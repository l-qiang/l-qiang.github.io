<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘强</title>
  
  <subtitle>博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://l-qiang.github.io/"/>
  <updated>2020-03-02T02:38:34.835Z</updated>
  <id>https://l-qiang.github.io/</id>
  
  <author>
    <name>刘强</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么Spring Boot读取UTF-8编码的properties会中文乱码？</title>
    <link href="https://l-qiang.github.io/2020/03/01/%E4%B8%BA%E4%BB%80%E4%B9%88Spring%20Boot%E8%AF%BB%E5%8F%96UTF-8%E7%BC%96%E7%A0%81%E7%9A%84properties%E4%BC%9A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%EF%BC%9F/"/>
    <id>https://l-qiang.github.io/2020/03/01/%E4%B8%BA%E4%BB%80%E4%B9%88Spring%20Boot%E8%AF%BB%E5%8F%96UTF-8%E7%BC%96%E7%A0%81%E7%9A%84properties%E4%BC%9A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%EF%BC%9F/</id>
    <published>2020-03-01T09:41:04.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们经常会在&lt;code&gt;properties&lt;/code&gt;文件中使用中文。当然大多数时候中文都是写在注释里。我们也会在STS中安装&lt;a href=&quot;https://java-properties-editor.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PropertiesEditor&lt;/a&gt;插件显示中文。但是，在我升级STS4之后我没有安装&lt;code&gt;PropertiesEditor&lt;/code&gt;，而是直接修改&lt;code&gt;properties&lt;/code&gt;文件为&lt;code&gt;UTF-8&lt;/code&gt;编码，然后在里面写中文。这样就发生了一个问题，应用程序读取出来的&lt;br&gt;&lt;code&gt;properties&lt;/code&gt;属性里中文是乱码的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
      <category term="Spring Boot" scheme="https://l-qiang.github.io/categories/Java/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://l-qiang.github.io/tags/Spring-Boot/"/>
    
      <category term="乱码" scheme="https://l-qiang.github.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
      <category term="UTF-8" scheme="https://l-qiang.github.io/tags/UTF-8/"/>
    
  </entry>
  
  <entry>
    <title>STS4启动报错Missing tools.jar</title>
    <link href="https://l-qiang.github.io/2020/02/17/STS4%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Missing%20tools.jar/"/>
    <id>https://l-qiang.github.io/2020/02/17/STS4%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Missing%20tools.jar/</id>
    <published>2020-02-17T12:42:52.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天将我的STS3升级到了STS4，升级完启动STS4的时候发现报&lt;code&gt;Missing tools.jar&lt;/code&gt;的错误。&lt;/p&gt;
&lt;img src=&quot;/2020/02/17/STS4%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Missing%20tools.jar/1.png&quot; class=&quot;&quot;&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://l-qiang.github.io/categories/Spring/"/>
    
      <category term="Spring Tool Suite" scheme="https://l-qiang.github.io/categories/Spring/Spring-Tool-Suite/"/>
    
    
      <category term="Spring Tool Suite" scheme="https://l-qiang.github.io/tags/Spring-Tool-Suite/"/>
    
      <category term="STS4" scheme="https://l-qiang.github.io/tags/STS4/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat日志截断</title>
    <link href="https://l-qiang.github.io/2020/01/22/Tomcat%E6%97%A5%E5%BF%97%E6%88%AA%E6%96%AD/"/>
    <id>https://l-qiang.github.io/2020/01/22/Tomcat%E6%97%A5%E5%BF%97%E6%88%AA%E6%96%AD/</id>
    <published>2020-01-22T12:30:43.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;为了避免生产环境&lt;code&gt;Tomcat&lt;/code&gt;的&lt;code&gt;catalina.out&lt;/code&gt;越来越大，我们需要轮替&lt;code&gt;catalina.out&lt;/code&gt;，那么我们该怎么做呢？&lt;/p&gt;
&lt;p&gt;关于这个问题，我在&lt;code&gt;Tomcat&lt;/code&gt;的&lt;code&gt;FAQ&lt;/code&gt;中找到了答案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tomcat" scheme="https://l-qiang.github.io/categories/Tomcat/"/>
    
      <category term="Linux" scheme="https://l-qiang.github.io/categories/Linux/"/>
    
    
      <category term="Tomcat" scheme="https://l-qiang.github.io/tags/Tomcat/"/>
    
      <category term="logrotate" scheme="https://l-qiang.github.io/tags/logrotate/"/>
    
      <category term="Linux" scheme="https://l-qiang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加RSS和站点地图</title>
    <link href="https://l-qiang.github.io/2020/01/20/Hexo%E6%B7%BB%E5%8A%A0RSS%E5%92%8C%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/"/>
    <id>https://l-qiang.github.io/2020/01/20/Hexo%E6%B7%BB%E5%8A%A0RSS%E5%92%8C%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/</id>
    <published>2020-01-20T13:08:57.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://l-qiang.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://l-qiang.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://l-qiang.github.io/tags/Hexo/"/>
    
      <category term="RSS" scheme="https://l-qiang.github.io/tags/RSS/"/>
    
      <category term="sitemap" scheme="https://l-qiang.github.io/tags/sitemap/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://l-qiang.github.io/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://l-qiang.github.io/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-01-17T16:56:05.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这不完全是一篇搭建个人博客的教程，因为&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;的文档其实写得非常清楚了。但是，我们按照教程来不一定很顺利。所以，这主要还是一个小白的经验之谈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://l-qiang.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://l-qiang.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://l-qiang.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://l-qiang.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Java + Appium + 夜神模拟器实现学习强国积分任务自动化</title>
    <link href="https://l-qiang.github.io/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>https://l-qiang.github.io/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/</id>
    <published>2020-01-15T19:34:00.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;首先，先放源码&lt;a href=&quot;https://github.com/l-qiang/LitterBaby&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LitterBaby&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我想装了《学习强国》App的同学都为每天30积分的任务苦恼过。我之前也是因为这30积分非常头疼，不是《学习强国》App不好，而是真的不适合我。我们会学习，但可能不是被迫学习指定内容，为了指标而学习。&lt;/p&gt;
&lt;p&gt;GitHub上面有很多Python写的《学习强国》自动化学习项目。我也有在用，但是我想有一个Java编写的，自己改起来顺手的《学习强国》自动学习。&lt;/p&gt;
&lt;p&gt;为此，我就写了一个Java的，目前已经实现刷30分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="Appium" scheme="https://l-qiang.github.io/tags/Appium/"/>
    
      <category term="自动化测试" scheme="https://l-qiang.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>iText合并PDF和添加书签</title>
    <link href="https://l-qiang.github.io/2020/01/10/iText%E5%90%88%E5%B9%B6PDF%E5%92%8C%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/"/>
    <id>https://l-qiang.github.io/2020/01/10/iText%E5%90%88%E5%B9%B6PDF%E5%92%8C%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/</id>
    <published>2020-01-10T20:37:23.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关于这个问题，其实在iText官网和Stack Overflow上面都有答案。之所以还要记录是想有更多人看到简单易懂的解决办法。因为我不想再有人直接CSDN搜一个，不管是否要新引入Jar包也不管代码是否复杂，然后告诉我参考那个写。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itextpdf.com/en/resources/examples/itext-5-legacy/merging-documents-bookmarks#39-mergewithoutlines.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网例子&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="PDF" scheme="https://l-qiang.github.io/tags/PDF/"/>
    
      <category term="iText" scheme="https://l-qiang.github.io/tags/iText/"/>
    
  </entry>
  
  <entry>
    <title>(三)架构</title>
    <link href="https://l-qiang.github.io/2019/12/27/(%E4%B8%89)%E6%9E%B6%E6%9E%84/"/>
    <id>https://l-qiang.github.io/2019/12/27/(%E4%B8%89)%E6%9E%B6%E6%9E%84/</id>
    <published>2019-12-27T19:56:56.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="DDD" scheme="https://l-qiang.github.io/categories/DDD/"/>
    
    
      <category term="DDD" scheme="https://l-qiang.github.io/tags/DDD/"/>
    
      <category term="领域驱动设计" scheme="https://l-qiang.github.io/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>(二)领域模型</title>
    <link href="https://l-qiang.github.io/2019/12/27/(%E4%BA%8C)%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/"/>
    <id>https://l-qiang.github.io/2019/12/27/(%E4%BA%8C)%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/</id>
    <published>2019-12-27T19:56:55.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="DDD" scheme="https://l-qiang.github.io/categories/DDD/"/>
    
    
      <category term="DDD" scheme="https://l-qiang.github.io/tags/DDD/"/>
    
      <category term="领域驱动设计" scheme="https://l-qiang.github.io/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>(一)初识DDD</title>
    <link href="https://l-qiang.github.io/2019/12/27/(%E4%B8%80)%E5%88%9D%E8%AF%86DDD/"/>
    <id>https://l-qiang.github.io/2019/12/27/(%E4%B8%80)%E5%88%9D%E8%AF%86DDD/</id>
    <published>2019-12-27T19:56:54.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间看到了&lt;code&gt;领域驱动设计(DDD)&lt;/code&gt;这个词，第一印象就是“这跟编码关系不大吧”，在我了解了一些关于DDD的知识后，发现DDD其实是跟我们关系密切的，了解DDD非常有必要。&lt;/p&gt;
&lt;p&gt;因此，我找了两本豆瓣评分较高的DDD的书籍（《领域驱动设计：软件核心复杂性应对之导》《实现领域驱动设计》）看了一遍。&lt;/p&gt;
&lt;p&gt;之前基本看完书之后会立马去看其他的书，但是经验告诉我，这很容易忘记。根据&lt;code&gt;费曼学习法&lt;/code&gt;。所以写点什么记录一下印象会比较深刻。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DDD" scheme="https://l-qiang.github.io/categories/DDD/"/>
    
    
      <category term="DDD" scheme="https://l-qiang.github.io/tags/DDD/"/>
    
      <category term="领域驱动设计" scheme="https://l-qiang.github.io/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Jackson将无嵌套JSON转嵌套对象</title>
    <link href="https://l-qiang.github.io/2019/12/19/Jackson%E5%B0%86%E6%97%A0%E5%B5%8C%E5%A5%97JSON%E8%BD%AC%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1/"/>
    <id>https://l-qiang.github.io/2019/12/19/Jackson%E5%B0%86%E6%97%A0%E5%B5%8C%E5%A5%97JSON%E8%BD%AC%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1/</id>
    <published>2019-12-19T19:04:52.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
      <category term="Jackson" scheme="https://l-qiang.github.io/categories/Java/Jackson/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="Jackson" scheme="https://l-qiang.github.io/tags/Jackson/"/>
    
      <category term="JSON" scheme="https://l-qiang.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>为什么我的Spring Boot项目不能访问静态资源？</title>
    <link href="https://l-qiang.github.io/2019/12/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84Spring-Boot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%EF%BC%9F/"/>
    <id>https://l-qiang.github.io/2019/12/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84Spring-Boot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%EF%BC%9F/</id>
    <published>2019-12-13T19:10:42.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;问题源于一个客户这边自己封装的框架。&lt;/p&gt;
&lt;p&gt;一直以来，我都对这种框架无感，因为它一般是由开源项目改编的，而且不一定是改得更好了。封装越多用起来越笨重。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
      <category term="Spring Boot" scheme="https://l-qiang.github.io/categories/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://l-qiang.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>记一次Java线程堆栈分析</title>
    <link href="https://l-qiang.github.io/2019/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%E5%88%86%E6%9E%90/"/>
    <id>https://l-qiang.github.io/2019/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%E5%88%86%E6%9E%90/</id>
    <published>2019-10-30T13:44:41.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最新某系统经常出现无法登录，不能响应请求的情况。一开始找上我的时候，他们已经通过重启恢复了，然后让我查原因。我表示一脸懵逼，啥都没有就让我解决了，最起码得让我有东西分析吧。还好这个问题经常发生，于是就在一次故障发生的时候。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="fastThread" scheme="https://l-qiang.github.io/tags/fastThread/"/>
    
      <category term="线程堆栈" scheme="https://l-qiang.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88/"/>
    
      <category term="Druid" scheme="https://l-qiang.github.io/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>关于Zookeeper与CAP的思考</title>
    <link href="https://l-qiang.github.io/2019/10/24/%E5%85%B3%E4%BA%8EZookeeper%E4%B8%8ECAP%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://l-qiang.github.io/2019/10/24/%E5%85%B3%E4%BA%8EZookeeper%E4%B8%8ECAP%E7%9A%84%E6%80%9D%E8%80%83/</id>
    <published>2019-10-24T19:55:22.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我看到很多博客都说&lt;code&gt;Zookeeper&lt;/code&gt;满足了&lt;code&gt;CAP&lt;/code&gt;中的&lt;code&gt;CP&lt;/code&gt;。但是Zookeeper的&lt;code&gt;Follower&lt;/code&gt;和&lt;code&gt;Observer&lt;/code&gt;是可以处理非事务请求的。&lt;/p&gt;
&lt;p&gt;那么，&lt;code&gt;如果一个读请求到了未同步的Follower和Observer上，那读到的数据不就是旧数据吗？那不就不一致了吗？&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Zookeeper" scheme="https://l-qiang.github.io/categories/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="https://l-qiang.github.io/tags/Zookeeper/"/>
    
      <category term="CAP" scheme="https://l-qiang.github.io/tags/CAP/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解之@Lookup</title>
    <link href="https://l-qiang.github.io/2019/10/17/Spring%E6%B3%A8%E8%A7%A3%E4%B9%8B@Lookup/"/>
    <id>https://l-qiang.github.io/2019/10/17/Spring%E6%B3%A8%E8%A7%A3%E4%B9%8B@Lookup/</id>
    <published>2019-10-17T16:12:49.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们在某个单例Bean中要用到原型Bean。那么我们怎么获取原型Bean呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用@Autowired，@Resource注解注入&lt;/li&gt;
&lt;li&gt;用BeanFactory的getBean方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;code&gt;@Autowired&lt;/code&gt;，&lt;code&gt;@Resource&lt;/code&gt;的话我们就没法达到原型Bean的效果。我想在一个单例Bean中多次获取原型Bean该怎么做，而且我不想用BeanFactory。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
      <category term="Spring" scheme="https://l-qiang.github.io/categories/Java/Spring/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://l-qiang.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>OAuth解决了什么问题？</title>
    <link href="https://l-qiang.github.io/2019/10/15/OAuth%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/"/>
    <id>https://l-qiang.github.io/2019/10/15/OAuth%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/</id>
    <published>2019-10-15T19:47:15.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;In the traditional client-server authentication model, the client&lt;br&gt;   requests an access-restricted resource (protected resource) on the&lt;br&gt;   server by authenticating with the server using the resource owner’s&lt;br&gt;   credentials.  In order to provide third-party applications access to&lt;br&gt;   restricted resources, the resource owner shares its credentials with&lt;br&gt;   the third party.  This creates several problems and limitations:&lt;/p&gt;
    
    </summary>
    
    
      <category term="OAuth" scheme="https://l-qiang.github.io/categories/OAuth/"/>
    
    
      <category term="OAuth" scheme="https://l-qiang.github.io/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>spring-session是怎样使用redis存session的？</title>
    <link href="https://l-qiang.github.io/2019/10/13/spring-session%E6%98%AF%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8redis%E5%AD%98session%E7%9A%84%EF%BC%9F/"/>
    <id>https://l-qiang.github.io/2019/10/13/spring-session%E6%98%AF%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8redis%E5%AD%98session%E7%9A%84%EF%BC%9F/</id>
    <published>2019-10-13T19:07:11.000Z</published>
    <updated>2020-03-02T02:38:34.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;其实，我的直觉告诉我使用Hash。&lt;/p&gt;
&lt;p&gt;我在项目里找到&lt;a href=&quot;https://docs.spring.io/spring-session/docs/current/api/org/springframework/session/data/redis/RedisOperationsSessionRepository.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RedisOperationsSessionRepository&lt;/a&gt;然后在注释中找到了答案&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each session is stored in Redis as a &lt;a href=&quot;http://redis.io/topics/data-types#hashes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hash&lt;/a&gt;. Each session is set and updated using the &lt;a href=&quot;http://redis.io/commands/hmset&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HMSET command&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
      <category term="Spring Session" scheme="https://l-qiang.github.io/categories/Java/Spring-Session/"/>
    
      <category term="Redis" scheme="https://l-qiang.github.io/categories/Redis/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="Spring Session" scheme="https://l-qiang.github.io/tags/Spring-Session/"/>
    
      <category term="Redis" scheme="https://l-qiang.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Jackson序列化字段脱敏处理</title>
    <link href="https://l-qiang.github.io/2019/10/11/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E8%84%B1%E6%95%8F%E5%A4%84%E7%90%86/"/>
    <id>https://l-qiang.github.io/2019/10/11/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E8%84%B1%E6%95%8F%E5%A4%84%E7%90%86/</id>
    <published>2019-10-11T20:25:55.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;例如，我有如下类A，我需要A序列化为JSON是name字段值为***。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;A.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;​    &lt;span class=&quot;meta&quot;&gt;@JsonProperty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;​    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
      <category term="Jackson" scheme="https://l-qiang.github.io/categories/Java/Jackson/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
      <category term="Jackson" scheme="https://l-qiang.github.io/tags/Jackson/"/>
    
      <category term="JSON" scheme="https://l-qiang.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentModificationException你真的了解吗？</title>
    <link href="https://l-qiang.github.io/2019/10/11/ConcurrentModificationException%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%90%97%EF%BC%9F/"/>
    <id>https://l-qiang.github.io/2019/10/11/ConcurrentModificationException%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%90%97%EF%BC%9F/</id>
    <published>2019-10-11T12:41:15.000Z</published>
    <updated>2020-03-02T02:38:34.831Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我想很多人第一次遇到这个异常都是因为对&lt;code&gt;List&lt;/code&gt;使用&lt;code&gt;foreach&lt;/code&gt;遍历，然后删除元素的导致的。然后我们会在网上查到使用&lt;code&gt;Iterator&lt;/code&gt;或&lt;code&gt;for倒序遍历&lt;/code&gt;来解决这个问题。那么&lt;code&gt;ConcurrentModificationException&lt;/code&gt;是怎么出现的？为什么要使用Iterator或for倒序遍历来解决呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://l-qiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>记一次MySQL统计查询SQL优化</title>
    <link href="https://l-qiang.github.io/2019/09/10/%E8%AE%B0%E4%B8%80%E6%AC%A1MySQL%E7%BB%9F%E8%AE%A1%E6%9F%A5%E8%AF%A2SQL%E4%BC%98%E5%8C%96/"/>
    <id>https://l-qiang.github.io/2019/09/10/%E8%AE%B0%E4%B8%80%E6%AC%A1MySQL%E7%BB%9F%E8%AE%A1%E6%9F%A5%E8%AF%A2SQL%E4%BC%98%E5%8C%96/</id>
    <published>2019-09-10T19:59:47.000Z</published>
    <updated>2020-03-02T02:38:34.839Z</updated>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	COL_B,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;MAX&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;CASE&lt;/span&gt; COL_A &lt;span class=&quot;keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;END&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;MAX&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;CASE&lt;/span&gt; COL_A &lt;span class=&quot;keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;END&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;MAX&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;CASE&lt;/span&gt; COL_A &lt;span class=&quot;keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;END&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;Table&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	COL_B &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    COL_C &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;COL_C上建立了一个普通索引。&lt;code&gt;50w&lt;/code&gt;数据这个SQL的执行时间大概为&lt;code&gt;3s&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://l-qiang.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://l-qiang.github.io/tags/MySQL/"/>
    
      <category term="SQL" scheme="https://l-qiang.github.io/tags/SQL/"/>
    
      <category term="优化查询" scheme="https://l-qiang.github.io/tags/%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
</feed>
