<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建个人博客</title>
    <url>/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这不完全是一篇搭建个人博客的教程，因为<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>的文档其实写得非常清楚了。但是，我们按照教程来不一定很顺利。所以，这主要还是一个小白的经验之谈。</p>
<a id="more"></a>


<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="我为什么选择Hexo呢？"><a href="#我为什么选择Hexo呢？" class="headerlink" title="我为什么选择Hexo呢？"></a>我为什么选择Hexo呢？</h3><ol>
<li>网上很多人推荐使用Hexo</li>
<li>我本来也打算用Jekyll，但是由于网络原因Ruby的开发环境的安装包我下载不下来。</li>
</ol>
<p>什么？还有其他的比Hexo好用，为什么不用？别问，问就是Hexo是最好用的。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> </li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li>
</ul>
<p>这两我都是用得很少，一般都是现学现用。安装也不难，这就不多说了。</p>
<h5 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h5><p>由于最终我们的是将网站部署到<span class="label default">GitHub Pages</span>，所以这里需要配置Git，将Git和GitHub关联上，以便之后将文件push到GitHub。</p>
<ol>
<li><p>鼠标右击，选择<span class="label default">Git Bash Here</span>打开Git命令行。</p>
</li>
<li><p>配置<span class="label default">user.name</span>和<span class="label default">user.email</span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;你的GitHub用户名&#39;</span><br><span class="line">git config --global user.email &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成SSH密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>

<p>然后直接连续回车就OK，默认不需要设置密码</p>
</li>
<li><p>复制公钥</p>
<p>打开.ssh文件夹中的id_rsa.pub文件(用文本编辑器打开就好了)，复制里面的内容。（我的在这个目录下：C:\Users\Admin\.ssh）</p>
</li>
<li><p>到<a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener">GitHub设置SSH keys</a></p>
<p>Title的内容随意，Key里面粘贴<span class="label default">第4步</span>中复制的内容，然后点击<a class="btn" href="#">Add SSH Key</a></p>
</li>
<li><p>检查</p>
<p>打开Git Bash，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh git@github.com</span><br></pre></td></tr></table></figure>

<p>显示<span class="label default">You've successfully authenticated</span>这样的话，就是成功了。</p>
</li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>打开一个新的命令行窗口输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ Hexo</span><br></pre></td></tr></table></figure>

<p>能显示出一些帮助信息就说明装成功了</p>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="初始化网站"><a href="#初始化网站" class="headerlink" title="初始化网站"></a>初始化网站</h4><p>找一个你想放网站文件的地方，然后执行下列命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p><a name='folder'>&lt;folder&gt;</a>换成你想要的文件夹名字。完成后，能看到指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>到目前为止，网站就建好了。但是我们要在本地看效果还需要将网站部署到本地服务器。</p>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ol>
<li><p>安装hexo-server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>这里一定要切换到网站文件夹下启动。</p>
          </div>

<p>最终看到输出<span class="label default">Hexo is running at http://localhost:4000</span>就是启动好了。</p>
</li>
<li><p>打开浏览器输入<span class="label default">Hexo is running at http://localhost:4000</span>就能看到Hexo默认主题<span class="label default">landscape</span>的页面</p>
<img data-src="/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_landscape.png" class="" title="landscape主题图片">



</li>
</ol>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>我们现在已经在本地部署过搭建的网站了。为了让其他人也能看到，我们要个人网站部署到GitHub Pages。</p>
<p>这个教程在<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>也是有的，有<span class="label default">两种</span>方式。我比较推荐第一种，就是使用<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 。</p>
<div class="note info">
            <h4 id="为什么选第一种"><a href="#为什么选第一种" class="headerlink" title="为什么选第一种"></a>为什么选第一种</h4><p>主要还是我按第二种，GitHub上只存了Hexo生成的页面，但是我想源文件也想存下来。持续集成服务，免费的，它不香吗？所以选第一种真香。</p>
          </div>



<p>如果你按官方教程后最终发现这个：</p>
<blockquote>
<p>User pages must be built from the <code>master</code> branch.</p>
</blockquote>
<p>那么下面的内容就有用了。因为<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>的教程是将Hexo的文件放<span class="label default">master</span>，然后生成的html放<span class="label default">gh-pages</span>的，以前可能是没问题，但是现在GitHub规定你必须将页面放到<span class="label default">master</span>。</p>
<ol>
<li><p>GitHub新建一个 repository。命名为<span class="label default"><你的 GitHub 用户名>.github.io</span>。选择<span class="label default">Public</span>，勾上<span class="label default">Initialize this repository with a README</span>。</p>
</li>
<li><p>然后选择一个地方新建一个空的文件夹。进入文件夹，右键鼠标，选择<span class="label default">Git Bash Here</span>打开Git命令行。将刚才建的repository clone下来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后新建一个分支用来存放Hexo生成前的文件。（我的分支名就blog）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>

<p>然后切换到分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将之前建站的文件夹<a href='#folder'>&lt;folder&gt;</a>下的所有文件及文件夹复制到第2步种新建的文件夹下面。</p>
</li>
<li><p>将第3步种的文件提交到分支，填写注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;&lt;注释&gt;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件push到GitHub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>上传成功后就能在GitHub上之前建的repository的分支看到了。</p>
</li>
<li><p>将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 GitHub 账户中。</p>
</li>
<li><p>前往 GitHub 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</p>
</li>
<li><p>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/" target="_blank" rel="noopener">手动前往</a>。</p>
</li>
<li><p>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</p>
</li>
<li><p>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</p>
</li>
<li><p>在你的 Hexo 站点文件夹(现在这个站点文件夹为应该为<span class="label default"><你的 GitHub 用户名>.github.io</span>)中新建一个 <code>.travis.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog # build blog branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  target_branch: master</span><br><span class="line">  on:</span><br><span class="line">    branch: blog</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>这里的内容和Hexo官网的有点区别。这里指定了build的为&lt;分支名字&gt;（<span class="label default">我的是blog</span>），目标是master</p>
          </div>
</li>
<li><p>将 <code>.travis.yml</code> 推送（推送方法和之前的文件推送到GitHub类型）到 repository 分支中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>master</code> 分支下。</p>
</li>
<li><p>推送之后等一会,<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 上就能看到build信息。等<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> build完之后。就能在 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点了。可能需要等一会儿。发布成功的话，你应该可以在repository的setting的<span class="label default">GitHub Pages</span> 下看到<span class="label success">Your site is published at https://<你的 GitHub 用户名>.github.io</span>。</p>
</li>
</ol>
<h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>到此，我们已经将网站发布到GitHub Pages了。但是默认的<code>landscape</code>，真的不符合我的审美。我们可以取<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a>网站挑选，也可以去GitHub上搜索<code>hexo-theme</code>。我就是去GitHub上挑选的star比较高的<a href="hexo-theme">Next主题</a>，所以我就以<code>Next</code>主题为例。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><div class="tabs" id="hexo-主题"><ul class="nav-tabs"><li class="tab active"><a href="#hexo-主题-1">安装-></a></li><li class="tab"><a href="#hexo-主题-2">Hexo 配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="hexo-主题-1"><p>切换到站点文件夹，按我上的的教程此时应该是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &lt;你的 GitHub 用户名&gt;.github.io</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="hexo-主题-2"><figure class="highlight plain"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一开始Next主题的很多配置都是关闭的，所以我们可以通过查看<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">文档</a>,然后修改主题的<code>_config.yml</code>来开启和配置一些功能。下面只讲我遇到过问题的。</p>
<h4 id="Post-Wordcount"><a href="#Post-Wordcount" class="headerlink" title="Post Wordcount"></a>Post Wordcount</h4><p>这是一个统计文字的功能，但是我安装步骤弄好之后。页面显示的字数和阅读时间都没正确显示出来。我看GitHub上关于没有正确显示字数的issue都是因为Next升级到<code>6.x</code>之后，将统计的插件从<a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener"><code>hexo-wordcount</code></a>换到了<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener"><code>hexo-symbols-count-time</code></a>。而我的都是最新的，最终我在Hexo上找到了解决办法。</p>
<blockquote>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
</blockquote>
<p>这个命令就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>我运行完这个之后就正确显示了。</p>
<h4 id="Comment-Systems"><a href="#Comment-Systems" class="headerlink" title="Comment Systems"></a>Comment Systems</h4><p>评论系统我选的Gitalk。嗯，我比较喜欢GitHub那一套。</p>
<p>具体过程，按照过程来就行。</p>
<p>需要注意的就是这个配置</p>
<figure class="highlight plain"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">gitalk:  </span><br><span class="line"></span><br><span class="line">​	repo: # Repository name to store issues</span><br></pre></td></tr></table></figure>

<p>这里填的是 Repository的名字，不是SSH URL。这个填错了页面上会显示<code>Error</code>。</p>
<p>另外，评论系统你得发布到GitHub才能正常使用。</p>
<div class="note info">
            <h4 id="推送主题修改到GitHub"><a href="#推送主题修改到GitHub" class="headerlink" title="推送主题修改到GitHub"></a>推送主题修改到GitHub</h4><p>因为我们是将Next主题直接clone到我们自己的Repository下。所以，我们推送的文件中，有个.git的文件夹。嵌套仓库可能会出问题。注意命令行的提示信息，会有类似让你执行下面这条命令的提示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached themes&#x2F;next</span><br></pre></td></tr></table></figure><p>这条真的有用，执行完就可以提交了。如果不行，你就多试几次，亲测有效。</p>
          </div>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="标签和分类"><a href="#标签和分类" class="headerlink" title="标签和分类"></a>标签和分类</h4><p>这个我们在Next的<a href="https://theme-next.org/docs/theme-settings/custom-pages" target="_blank" rel="noopener">文档</a>中就能弄好了。</p>
<h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>在站点文件夹下执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>这条指令其实就是在source/_posts文件夹下建了名为&lt;title&gt;.md的文件。</p>
<p>用一个markdown的编辑器打开这个文件就可以开始写文章了。</p>
<p>文章的头部一段内容可以包含标签，分类。本篇文章就是这就这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo搭建个人博客</span><br><span class="line">date: 2020-01-17 16:56:05</span><br><span class="line">categories:</span><br><span class="line"> - Blog</span><br><span class="line">tags: </span><br><span class="line"> - Hexo</span><br><span class="line"> - Github</span><br><span class="line"> - Blog</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>



<p>默认的情况下，文章是全部展开的，我们可以在文章的任何地方添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>控制哪些内容需要点击<a class="btn" href="#">阅读全文>></a>查看。</p>
<p>还有一些标签的使用可以查看Next<a href="https://theme-next.org/docs/tag-plugins/" target="_blank" rel="noopener">文档</a>和Hexo<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">文档</a>。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
