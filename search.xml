<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>开源框架及工具网站备忘录</title>
    <url>/2020/11/06/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>持续更新…</p>
<a id="more"></a>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="问题诊断"><a href="#问题诊断" class="headerlink" title="问题诊断"></a>问题诊断</h3><ul>
<li><a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">arthas</a><br>阿尔萨斯，Alibaba开源的Java诊断工具</li>
<li><a href="https://github.com/btraceio/btrace" target="_blank" rel="noopener">btrace</a><br>基于Java语言的一个安全的、可提供动态追踪服务的工具。<br>建议使用arthas。另附一篇好文章<a href="https://tech.meituan.com/2019/02/28/java-dynamic-trace.html" target="_blank" rel="noopener">Java动态追踪技术探究</a></li>
<li><a href="https://fastthread.io/" target="_blank" rel="noopener">fastThread</a><br>Java 线程 Dump文件分析</li>
<li><a href="https://heaphero.io/heap-index.jsp" target="_blank" rel="noopener">HeapHero</a><br>Java 堆 Dump文件分析</li>
<li><a href="https://gceasy.io/gc-index.jsp" target="_blank" rel="noopener">GCeasy</a><br>GC日志分析</li>
</ul>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul>
<li><a href="https://github.com/kilim/kilim" target="_blank" rel="noopener">kilim</a><br>Java 协程框架</li>
<li><a href="https://github.com/akka/akka" target="_blank" rel="noopener">akka</a></li>
</ul>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ul>
<li><a href="https://github.com/coobird/thumbnailator" target="_blank" rel="noopener">thumbnailator</a><br>Java 缩略图生成库</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p><a href="https://github.com/awaitility/awaitility" target="_blank" rel="noopener">awaitility</a><br>Awaitility是用于同步异步操作的小型Java DSL。大概就是下面这样，感觉很酷。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await().atMost(5, SECONDS).until(customerStatusHasUpdated());</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/google/guava" target="_blank" rel="noopener">guava</a></p>
</li>
<li><p><a href="https://github.com/jhy/jsoup" target="_blank" rel="noopener">jsoup</a><br>HTML 解析</p>
</li>
</ul>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul>
<li><p><a href="https://github.com/seata/seata" target="_blank" rel="noopener">seata</a></p>
<blockquote>
<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>
</blockquote>
</li>
<li><p><a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener">shardingsphere</a></p>
<blockquote>
<p>Apache ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款相互独立，却又能够混合部署配合使用的产品组成。 它们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景</p>
</blockquote>
</li>
</ul>
<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><ul>
<li><a href="https://github.com/apache/shardingsphere-elasticjob" target="_blank" rel="noopener">shardingsphere-elasticjob</a></li>
<li><a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="noopener">xxl-job</a></li>
</ul>
<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><ul>
<li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">apollo</a></li>
</ul>
<h3 id="服务网格"><a href="#服务网格" class="headerlink" title="服务网格"></a>服务网格</h3><ul>
<li><a href="https://github.com/istio/istio" target="_blank" rel="noopener">istio</a></li>
</ul>
<h2 id="容器化"><a href="#容器化" class="headerlink" title="容器化"></a>容器化</h2><ul>
<li><a href="https://github.com/GoogleContainerTools/jib" target="_blank" rel="noopener">jib</a><br>谷歌开源，容器化Java应用</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li><p><a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">canal</a></p>
<blockquote>
<p>阿里巴巴 MySQL binlog 增量订阅&amp;消费组件</p>
</blockquote>
</li>
<li><p><a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">tidb</a></p>
<blockquote>
<p>TiDB是与MySQL协议兼容的开源分布式HTAP数据库</p>
</blockquote>
</li>
<li><p><a href="https://github.com/mariadb-corporation/MaxScale" target="_blank" rel="noopener">MaxScale</a><br>数据库代理</p>
</li>
<li><p><a href="https://github.com/sysown/proxysql" target="_blank" rel="noopener">proxysql</a><br>MySQL代理</p>
</li>
<li><p><a href="https://github.com/MyCATApache/Mycat-Server" target="_blank" rel="noopener">Mycat-Server</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>踩坑SpringBoot单元测试与spring.profiles.active</title>
    <url>/2020/11/03/%E8%B8%A9%E5%9D%91SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8Espring.profiles.active/</url>
    <content><![CDATA[<p>今天运行单元测试的时候，突然就报错了，大概意思就是无法解析${spring.profiles.active}，但是之前的跑完全没问呀，而且单测的类上已经加了<code>@ActiveProfiles</code>注解了。为什么呢？</p>
<a id="more"></a>

<p>根据输出的错误信息，原因是使用了@Value(“${spring.profiles.active}”)获取activeProfiles。那为什么正常启动的时候没有问题呢？</p>
<p>因为加了启动参数spring.profiles.active。</p>
<p>但是我不想每个单测都加启动参数，太麻烦了。</p>
<p>那么，该怎么解决呢？</p>
<p>应该使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">applicationContext.getEnvironment().getActiveProfiles()[0]</span><br></pre></td></tr></table></figure>

<p>来获取activeProfiles。</p>
<p>使用@Value(“${spring.profiles.active}”)只是单纯获取他的值，如果没有设置这个值就会报错。</p>
<p><code>Environment</code>除了取spring.profiles.active还可以取注解<code>@ActiveProfiles</code>的值来设置ActiveProfiles，所以应该避免使用@Value(“${spring.profiles.active}”)。</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title>使用@sun.misc.Contended注解后竟然...</title>
    <url>/2020/10/20/%E4%BD%BF%E7%94%A8@sun.misc.Contended%E6%B3%A8%E8%A7%A3%E5%90%8E%E7%AB%9F%E7%84%B6.../</url>
    <content><![CDATA[<p>一段代码使用@sun.misc.Contended注解后竟然…</p>
<a id="more"></a>

<p>竟然变快了。</p>
<p>先放代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContendedTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> N = <span class="number">100000000L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="comment">//		private long x1,x2,x3,x4,x5,x6,x7;</span></span><br><span class="line">		<span class="meta">@sun</span>.misc.Contended</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> x = <span class="number">0L</span>;</span><br><span class="line"><span class="comment">//		private long x8,x9,x10,x11,x12,x13,x14;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> T[] ARR = <span class="keyword">new</span> T[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		ARR[<span class="number">0</span>] = <span class="keyword">new</span> T();</span><br><span class="line">		ARR[<span class="number">1</span>] = <span class="keyword">new</span> T();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				ARR[<span class="number">0</span>].x = <span class="number">1L</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cdl.countDown();</span><br><span class="line">		&#125;).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				ARR[<span class="number">1</span>].x = <span class="number">1L</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cdl.countDown();</span><br><span class="line">		&#125;).start();</span><br><span class="line">		</span><br><span class="line">		cdl.await();</span><br><span class="line">		System.out.println(System.currentTimeMillis() - start);</span><br><span class="line">		System.out.println(ClassLayout.parseInstance(<span class="keyword">new</span> T()).toPrintable());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加与不加@Contended注解耗时相差<code>1s</code>（使用注解需要加上jvm参数<strong>-XX:-RestrictContended</strong>）。</p>
<p>为什么耗时会相差这么多呢？</p>
<p>这就涉及到两个概念<strong>缓存行</strong>和<strong>伪共享</strong>。</p>
<p>根据<strong>局部性原理</strong>我们知道CPU会取一块连续区域的数据。而缓存呢又以缓存行为单位，所以当两个CPU使用了同一个缓存行的数据就会导致数据不一致性问题，需要耗时来达到缓存一致性。</p>
<p>比如上面例子的<strong>ARR[0]</strong>和<strong>ARR[1]</strong>，在同一个缓存行的时候被两个CPU修改就需要耗时来达到缓存一致。</p>
<p>由于通常情况下，一个缓存行为<strong>64字节</strong>，而一个long变量为<strong>8字节</strong>，所以我们可以在x变量的前后加上7个long变量来使<strong>ARR[0]</strong>和<strong>ARR[1]</strong>的x不在同一缓存行，这样就不会有缓存不一致的问题。高性能队列<strong>Disruptor</strong>里就有这种写法。</p>
<p>到了Java8，有了@sun.misc.Contended注解，就可以不用变量填充来解决伪共享的问题了。</p>
<p>当然，想要时间得要空间来换，使用JOL可以看到不同情况下对象<strong>T</strong>的大小。</p>
<div class="tabs" id="jol"><ul class="nav-tabs"><li class="tab active"><a href="#jol-1">无处理</a></li><li class="tab"><a href="#jol-2">变量填充</a></li><li class="tab"><a href="#jol-3">注解</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jol-1"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           43 c0 00 20 (01000011 11000000 00000000 00100000) (536920131)</span><br><span class="line">     12     4        (alignment&#x2F;padding gap)                  </span><br><span class="line">     16     8   long T.x                                       0</span><br><span class="line">Instance size: 24 bytes</span><br><span class="line">Space losses: 4 bytes internal + 0 bytes external &#x3D; 4 bytes total</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jol-2"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           43 c0 00 20 (01000011 11000000 00000000 00100000) (536920131)</span><br><span class="line">     12     4        (alignment&#x2F;padding gap)                  </span><br><span class="line">     16     8   long T.x1                                      0</span><br><span class="line">     24     8   long T.x2                                      0</span><br><span class="line">     32     8   long T.x3                                      0</span><br><span class="line">     40     8   long T.x4                                      0</span><br><span class="line">     48     8   long T.x5                                      0</span><br><span class="line">     56     8   long T.x6                                      0</span><br><span class="line">     64     8   long T.x7                                      0</span><br><span class="line">     72     8   long T.x                                       0</span><br><span class="line">     80     8   long T.x8                                      0</span><br><span class="line">     88     8   long T.x9                                      0</span><br><span class="line">     96     8   long T.x10                                     0</span><br><span class="line">    104     8   long T.x11                                     0</span><br><span class="line">    112     8   long T.x12                                     0</span><br><span class="line">    120     8   long T.x13                                     0</span><br><span class="line">    128     8   long T.x14                                     0</span><br><span class="line">Instance size: 136 bytes</span><br><span class="line">Space losses: 4 bytes internal + 0 bytes external &#x3D; 4 bytes total</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jol-3"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           43 c0 00 20 (01000011 11000000 00000000 00100000) (536920131)</span><br><span class="line">     12   132        (alignment&#x2F;padding gap)                  </span><br><span class="line">    144     8   long T.x                                       0</span><br><span class="line">    152     0        (loss due to the next object alignment)</span><br><span class="line">Instance size: 280 bytes</span><br><span class="line">Space losses: 132 bytes internal + 0 bytes external &#x3D; 132 bytes total</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>伪共享</tag>
        <tag>缓存行</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud升级记录</title>
    <url>/2020/09/24/SpringCloud%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p> 最近接到一个将所有项目的Spring Cloud升级到最新版的任务。一开始我觉得挺不容易的，比较目前我们的版本很低，真正做起来发现并没有想象中难。</p>
<p><code>Spring Cloud</code>升级版本为<strong>Edgware.SR1</strong> =&gt; <strong>Hoxton.SR8</strong>。</p>
<p><code>Spring Boot</code>升级版本为<strong>1.5.20.RELEASE</strong> =&gt; <strong>2.3.3.RELEASE</strong>。</p>
<h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><p>我们之前是使用<strong>Eureka</strong>做服务注册与发现，这次升级我继续使用<strong>Eureka</strong>。</p>
<p>我将Eureka Server项目的<strong>pom.xml</strong>里的<code>Spring Cloud</code>和<code>Spring Boot</code>的版本号改为目标版本号。</p>
<p>不出意外，此时，项目就报错了。由于Eureka Server的是没有业务代码的，所以需要修改的代码并不多。</p>
<ul>
<li><p>pom.xml</p>
<p>改完版本号，发现<strong>hystrix</strong>和<strong>eureka</strong>的依赖都报错了，这里可以从Spring Cloud的<a href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.5.RELEASE/reference/html/" target="_blank" rel="noopener">官方文档</a>了解到，这些依赖的jar包的<strong>artifactId</strong>都改了。</p>
<div class="tabs" id="eureka-server-pom"><ul class="nav-tabs"><li class="tab active"><a href="#eureka-server-pom-1">修改前</a></li><li class="tab"><a href="#eureka-server-pom-2">修改后</a></li></ul><div class="tab-content"><div class="tab-pane active" id="eureka-server-pom-1"><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="eureka-server-pom-2"><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>
</li>
<li><p>Eureka Server配置</p>
<div class="tabs" id="eureka-server-properties"><ul class="nav-tabs"><li class="tab active"><a href="#eureka-server-properties-1">修改前</a></li><li class="tab"><a href="#eureka-server-properties-2">修改后</a></li></ul><div class="tab-content"><div class="tab-pane active" id="eureka-server-properties-1"><figure class="highlight plain"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">eureka.client.register-with-eureka&#x3D;false</span><br><span class="line">eureka.client.fetch-registry&#x3D;false</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="eureka-server-properties-2"><figure class="highlight plain"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">eureka.client.registerWithEureka&#x3D;false</span><br><span class="line">eureka.client.fetchRegistry&#x3D;false</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;$&#123;service.center.username&#125;:$&#123;service.center.password&#125;@localhost:9999&#x2F;eureka&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div>

<p>这里添加了eureka.client.serviceUrl.defaultZone的配置，且指向自己。是因为控制台一直报错<strong>Connect to localhost:8761 time out</strong>，具体原因我们都可以再网上查到。</p>
</li>
<li><p>jar包升级</p>
<p>在我们修改完代码和配置文件，项目的代码没有红叉叉的时候。启动项目可能会有这样的信息。</p>
<blockquote><p><span id="error1">Description:</span></p>
<p>The bean ‘multipartConfigElement’, defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [com/h3c/config/MultipartConfig.class] and overriding is disabled.</p>
<p>Action:</p>
<p>Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true</p>
</blockquote>

<p>如果bean是自己代码，则需要自己修改（<a href="#filetemp">见后文</a>）。如果不是，可以尝试升级对应的jar包。</p>
</li>
<li><p>Spring Security</p>
<p>由于我们的Eureka Server使用了简单的<code>HTTP Basic</code>认证。所以，有关于Spring Security的配置。</p>
<p>在上面的操作都完成后，就可以成功启动项目了。但升级还未结束，启动完后，访问<code>http://localhost:9999</code>发现，验证方式变成Form表单验证了，而且输入用户名密码告诉我错了。</p>
<p>此时，需要进行两处修改。</p>
<ol>
<li><p>application.properties</p>
<p><strong>security.user.name</strong> =&gt;<strong>spring.security.user.name</strong></p>
<p><strong>security.user.password</strong>=&gt;<strong>spring.security.user.password</strong></p>
</li>
<li><p>WebSecurityConfigurerAdapter</p>
<p>继承WebSecurityConfigurerAdapter，并覆盖对应方法。</p>
<figure class="highlight java"><figcaption><span>WebSecurityConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable(); <span class="comment">// 不加这个也不行</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h2 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h2><p>上面说过的就在这不说了，下面的一些问题都跟项目相关，是否会遇到取决于是否使用了相关的依赖。</p>
<ul>
<li><p><span id="filetemp">Spring Boot文件上传配置更新</span></p>
<p>之前的Spring Boot需要配置<strong>MultipartConfigElement</strong>设置文件上传的临时目录，升级之后会<a href="#error1">报错</a>。</p>
<p>升级之后使用<code>spring.servlet.multipart.location</code>来设置文件上传的临时目录。更多相关配置见<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#web-properties" target="_blank" rel="noopener">官方文档</a></p>
</li>
<li><p>flyway配置修改</p>
<p><strong>flyway.baseline-on-migrate</strong> =&gt; <strong>spring.flyway.baseline-on-migrate</strong></p>
<p><strong>flyway.locations</strong> =&gt; <strong>spring.flyway.locations</strong></p>
</li>
<li><p>Spring Data JPA 相关接口名称及构造方法改变</p>
</li>
<li><p>Logger</p>
<p>之前都是用的<code>org.apache.log4j.Logger</code>，现改为<code>org.slf4j.Logger</code>。这种遍布所有代码且不统一的话，最好还是自己再封一层，以后修改会方便很多，不用到处改。</p>
</li>
<li><p>This may be the result of an unspecified view, due to default view name generation</p>
<p>访问页面报错，这个问题网上也有解决办法，什么view和path不能同名啥的，引入thymeleaf依赖之类的。</p>
<p>这些在我这可不好使，我典型的逆反心理，我就是要同名。而且我没用thymeleaf，我引什么这个依赖。</p>
<p>直接一个<strong>spring.freemarker.suffix=.ftl</strong>解决，造成问题的原因就是找不到视图，由于默认freemarker视图后缀是<code>.ftlh</code>，但是我们项目中的都是<code>.ftl</code>，所以修改一下视图后缀就好了。</p>
</li>
<li><p>Feign</p>
<p>我们项目的Feign可以说是用的很老版本的了，当时的Feign Form甚至不支持多文件。基本不需要太大的改变。</p>
<p>首先，是依赖包修改。</p>
<div class="tabs" id="feign-pom"><ul class="nav-tabs"><li class="tab active"><a href="#feign-pom-1">修改前</a></li><li class="tab"><a href="#feign-pom-2">修改后</a></li></ul><div class="tab-content"><div class="tab-pane active" id="feign-pom-1"><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="feign-pom-2"><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure></div></div></div>

<p>然后，启动就报了一个错，<strong>The bean ‘服务名.FeignClientSpecification’ could not be registered. A bean with that name has already been defined and overriding is disabled.</strong></p>
<p>这个错是因为<code>@FeignClient</code>有多个同<code>name</code>的，通过在<code>@FeignClient</code>中指定<code>contextId</code>即可解决。</p>
</li>
<li><p>Spring Security</p>
<p>升级Spring Boot后，Spring Security也升级成5.x，这对于我目前的项目来说，最大的影响就是PasswordEncoder。我们之前是使用MD5加密，升级之后是没有<code>Md5PasswordEncoder</code>这个类了。</p>
<p>但是，我们可以使用<code>new MessageDigestPasswordEncoder(&quot;MD5&quot;)</code>，这个类也提示我们弃用了，所以最好的办法是升级我们的密码编码方式。</p>
<p>为了能<code>兼容</code>以前的MD5的密码，我通过以下的方式来修改Spring Security配置的PasswordEncoder。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DelegatingPasswordEncoder encoder = (DelegatingPasswordEncoder) PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">encoder.setDefaultPasswordEncoderForMatches(<span class="keyword">new</span> MessageDigestPasswordEncoder(<span class="string">"MD5"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring Session Data Redis</p>
<p>除了<a href="https://docs.spring.io/spring-session/docs/2.3.1.RELEASE/reference/html5/" target="_blank" rel="noopener">官方文档</a>的说明之外，再说三点。</p>
<ol>
<li><p>需要加上Jedis的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不需要再自定义Bean<code>RedisOperationsSessionRepository</code>，且已弃用，直接注入使用<code>RedisIndexedSessionRepository</code>即可。</p>
</li>
<li><p>ConfigureRedisAction的配置依然需要，一开始我是把所有配置全删了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigureRedisAction <span class="title">configureRedisAction</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> ConfigureRedisAction.NO_OP;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h2><p>版本一改直接启动，毫无问题</p>
<h2 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h2><p><strong>spring-cloud-starter-zuul</strong> =&gt; <strong>spring-cloud-starter-netflix-zuul</strong></p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Cloud,Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot与Docker的经验分享</title>
    <url>/2020/06/28/SpringBoot%E4%B8%8EDocker%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p>关于怎么将Spring Boot应用构建Docker镜像的教程，我们可以在Spring Boot的官网找到。</p>
<p><a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">Spring Boot with Docker</a></p>
<p><a href="https://spring.io/guides/topicals/spring-boot-docker" target="_blank" rel="noopener">Spring Boot Docker</a></p>
<p>从上面两个教程中，我主要了解的就是怎么写好<code>Dockerfile</code>，以及怎么构建镜像然后运行。</p>
<a id="more"></a>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>对于一个Spring Boot应用，<code>Dockerfile</code>中要做最基本的就是这些。</p>
<ol>
<li>指定一个父镜像。</li>
<li>将我们的jar包<code>COPY</code>到镜像中</li>
<li><code>ENTRYPOINT</code>执行我们的应用程序</li>
</ol>
<p>这种情况需要我们先将jar打好。但是这也太麻烦了，我想一步到位。</p>
<p>在教程中我们也可以找到。</p>
<figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine as build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /workspace/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mvnw .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> .mvn .mvn</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./mvnw install -DskipTests</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p target/dependency &amp;&amp; (<span class="built_in">cd</span> target/dependency; jar -xf ../*.jar)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ARG</span> DEPENDENCY=/workspace/app/target/dependency</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build <span class="variable">$&#123;DEPENDENCY&#125;</span>/BOOT-INF/lib /app/lib</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build <span class="variable">$&#123;DEPENDENCY&#125;</span>/META-INF /app/META-INF</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build <span class="variable">$&#123;DEPENDENCY&#125;</span>/BOOT-INF/classes /app</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-cp"</span>,<span class="string">"app:app/lib/*"</span>,<span class="string">"hello.Application"</span>]</span></span><br></pre></td></tr></table></figure>

<p>这就是多阶段构建，首先使用<code>maven wrapper</code>将代码打成jar包，然后解压。再在第二阶段中<code>COPY</code>第一阶段的结果。关于为什么要解压，在Spring Boot的官方教程里已经说了，大概意思就是更快吧。</p>
<p>对于我来说，我只需要将<code>hello.Application</code>改成自己的<strong>包名+主类名</strong>，然后再加点自己的程序依赖的东西进去就可以了。</p>
<p>我的应用目前的<code>Dockerfile</code>如下，没有多大区别，就是多加了两个文件。</p>
<figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine as build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /workspace/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mvnw .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> .mvn .mvn</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./mvnw install -DskipTests</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p target/dependency &amp;&amp; (<span class="built_in">cd</span> target/dependency; jar -xf ../*.jar)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">ARG</span> DEPENDENCY=/workspace/app/target/dependency</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build <span class="variable">$&#123;DEPENDENCY&#125;</span>/BOOT-INF/lib /app/lib</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build <span class="variable">$&#123;DEPENDENCY&#125;</span>/META-INF /app/META-INF</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build <span class="variable">$&#123;DEPENDENCY&#125;</span>/BOOT-INF/classes /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> kafka_client_jaas.conf /app/kafka/kafka_client_jaas.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> kafka.client.truststore.jks /app/kafka/kafka.client.truststore.jks</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-cp"</span>,<span class="string">"app:app/lib/*"</span>,<span class="string">"com.xxx.xxx.xxxApplication"</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建一般来讲都比较顺利，从来没有使用过<code>maven wrapper</code>的我就在想，既然<code>maven wrapper</code>能让没有maven的直接运行打出jar包，那么要使用私有的maven仓库该怎么指定。</p>
<p>这个问题可以通过<code>pom.xml</code>来解决。</p>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>我们的应用程序的配置文件可能区分测试和生产。我们平时启动一般都是指定<code>spring.profiles.active</code>。那么使用docker运行的时候怎么指定呢。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -e <span class="string">"SPRING_PROFILES_ACTIVE=local"</span> -p 10088:10088 -t 镜像名</span></span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>我们的应用程序的数据库是外挂MySQL的，所以镜像中没有MySQL。所以我们的数据库链接<code>spring.datasource.url</code>不能使用localhost，而要使用ip地址。另外注意，MySQL要开启权限才能使用ip地址连接上。</p>
<h3 id="容器内部"><a href="#容器内部" class="headerlink" title="容器内部"></a>容器内部</h3><p>如果我们想看容器內部结构（比如，对于新手的我想看我COPY的文件是不是放在了指定位置），我们需要先运行（毕竟镜像运行起来了才有容器嘛），然后执行下面的命令进入容器内部。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器ID sh</span><br></pre></td></tr></table></figure>

<p>容器ID可以通过<code>docker ps</code>查看。</p>
<h3 id="镜像在哪"><a href="#镜像在哪" class="headerlink" title="镜像在哪"></a>镜像在哪</h3><p>使用<code>Windows Desktop</code>的我就想，自己构建的镜像在哪，能不能自己拷贝出来。这个就别费这个劲了，镜像在虚拟机的数据里。想弄出来用Docker的命令导出来就好了。</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Spring Boot,Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot统一异常处理与404</title>
    <url>/2020/05/21/SpringBoot%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E404/</url>
    <content><![CDATA[<p>几天前，我收到一封邮件，邮件是<strong>Chatra</strong>的消息。有人问了我一个问题。从消息里我猜是关于SpringBoot统一异常处理与404的问题。当时，没啥时间就没去自己试。现在，我来说说我的解决办法。</p>
<img data-src="/2020/05/21/SpringBoot%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E404/1.jpg" class="">

<a id="more"></a>



<p>我们的项目中可能会使用<code>@ControllerAdvice</code>来进行统一异常处理。比如，我在项目中所有Controller抛出的异常会返回同一个格式的JSON数据。但是，当我们请求一个不存在的页面的时候，我们看到的是这样的。</p>
<img data-src="/2020/05/21/SpringBoot%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E404/2.png" class="">

<p>当然并不是404都是显示<strong>Whitelabel Error Page</strong>页面，通过<strong>BasicErrorController</strong>处理，我们可以知道，只有请求的<code>MimeType</code>是<code>text/html</code>的时候才是，如果不是<code>text/html</code>会返回一个404的JSON。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2020-05-25T06:35:10.859+00:00"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/aaa"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>那么，如何让404也走统一异常处理呢。</p>
<p>我们在网上可能一搜就能查到，通过下面这种方式来解决。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.throw-exception-if-no-handler-found</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.add-mappings</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p><code>spring.resources.add-mappings=false</code>这个在我的另一篇博客中也提到过，这样设置会让静态资源没有handler。这个方式的原理就是通过这个设置使得没有handler处理404的问题，然后通过<code>spring.mvc.throw-exception-if-no-handler-found=true</code>来抛出异常。</p>
<p>这样坐确实能达到我们想要的效果，但是，我们的静态资源没法访问了。</p>
<p>那么，我想404的时候抛出异常而且静态资源能访问该怎么办呢？</p>
<p>其实，那个<strong>Whitelabel Error Page</strong>已经告诉我们答案了。我们自己处理<code>/error</code>就好了，这里我直接抛出异常，让它走统一异常处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"404"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>maven RSA premaster secret error SunTls12RsaPremasterSecret KeyGenerator not available</title>
    <url>/2020/05/18/maven%20RSA%20premaster%20secret%20error%20SunTls12RsaPremasterSecret%20KeyGenerator%20not%20available/</url>
    <content><![CDATA[<p>今天使用Maven打包的时候，报了一个maven RSA premaster secret error SunTls12RsaPremasterSecret KeyGenerator not available这样的错。而前面的报错信息给我的原因是某个Jar包下载不下来。</p>
<p>一看到这个错我就去Maven中心仓库看了，Jar确实是存在的而且也可以下载下来。错误信息给我的帮助网址是这个<a href="https://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException。" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException。</a></p>
<p>但是，我点进去一看，根本没有符合我的这种情况的。</p>
<p>终于，我通过maven RSA premaster secret error SunTls12RsaPremasterSecret KeyGenerator not available找到了原因。</p>
<p>Eclipse里的<code>Window-&gt;Preferences-&gt;Java-&gt;Installed JREs</code>的问题，因为之前将这个由<code>JRE</code><strong>修改</strong>成<code>JDK</code>了。但是JRE下的Jar包还是<strong>修改之前</strong>的Jar，并没有变成JDK下的Jar。所以，通过<code>Restore Default</code>，修改一下Jar的指向位置就好了。</p>
<p>这个坑踩得真的是，被下载不下来Jar的错误信息迷惑了。</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Desktop安装后启动报Cannot enable Hyper-V service错误</title>
    <url>/2020/05/18/Docker%20Desktop%E5%AE%89%E8%A3%85%E5%90%8E%E5%90%AF%E5%8A%A8%E6%8A%A5Cannot%20enable%20Hyper-V%20service%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>今天在自己的Win10系统笔记本上装了个Docker Desktop，启动的时候报错Cannot enable Hyper-V service。</p>
<p>上网一查，很多都说的是在<code>控制面版-&gt;程序-&gt;程序和功能</code>的<code>启用或关闭Windows功能</code>里面把<strong>Hyper-V</strong>开启就好了。</p>
<p>但是，我的电脑的<strong>Hyper-V</strong>本来就是开着的呀。这确实让我头疼了好一会儿。究竟是怎么一回事呢？</p>
<a id="more"></a>

<p>经过我的一番检查和上网查阅资料后发现是<strong>BIOS</strong>里没有开启<strong>虚拟机</strong>的设置。</p>
<p>例如：我的笔记本是<code>HP Elitebook 848 G4</code>，开机后按<code>F10</code>，然后在<code>Advanced</code>的<code>System Options</code>里开启</p>
<p><strong>Virtualization Technology(VTx)</strong>和<strong>Virtualization Technology for Directed(VTd)</strong>就行了。</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Docker Desktop</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker Desktop</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个微信小程序开发经验</title>
    <url>/2020/05/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<p>前段时间项目里要开发一个微信小程序，我也是临危受命吧，大概学习了几个小时，然后花了一天写好（功能比较简单所以…）。一般使用一个新东西的时候我都会先大致了解一下文档，然后才开始开发，主要是为了少踩点坑。记录一下自己开发这个小程序的一些经验，说不定以后能用到。</p>
<a id="more"></a>

<h2 id="小程序账号"><a href="#小程序账号" class="headerlink" title="小程序账号"></a>小程序账号</h2><p>首先，我们需要<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">申请一个小程序账号</a>。有<code>个人账号</code>也有<code>企业账号</code>。我这里是公司申请的企业账号，我之前自己也试过申请个人账号，印象中个人账号还是挺容易申请的。</p>
<p><a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">登录</a>这个账号的管理后台，就可以管理自己的小程序，可以在菜单 “开发”-“开发设置” 看到小程序的 <strong>AppID</strong> 了 。</p>
<p>这个<strong>AppID</strong> 在开发阶段不是必须的。<code>微信开发者工具</code>可以生成测试号，所以在没有账号的时候，我们还是可以开发的。</p>
<h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><p>微信小程序有自己的那一套代码结构（JSON, WXML, WXSS, JS），所以也就有自己的一个开发工具了。<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">下载</a>一个开发工具，然后装上就可以开始开发了。</p>
<h2 id="小程序结构"><a href="#小程序结构" class="headerlink" title="小程序结构"></a>小程序结构</h2><p>小程序是前后端分离的，所以小程序基本是一些前端代码组成，虽然小程序有自己的一套前端。但是，具备HTML，JS，CSS的基本使用就能直接入手了。当然，会Vue，Angular等数据驱动的框架就更好了。</p>
<p>在我看来小程序就是由不同的页面组成，然后使用一些路由方法(例如: <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html" target="_blank" rel="noopener">wx.navigateTo</a>)跳转。每个页面由</p>
<ol>
<li><code>.json</code> 后缀的 <code>JSON</code> 配置文件</li>
<li><code>.wxml</code> 后缀的 <code>WXML</code> 模板文件</li>
<li><code>.wxss</code> 后缀的 <code>WXSS</code> 样式文件</li>
<li><code>.js</code> 后缀的 <code>JS</code> 脚本逻辑文件</li>
</ol>
<p>4个文件构成。这些文件，我们可以直接使用微信开发工具直接生成。</p>
<p>除了页面的文件，还有就是一些公共的配置（例如：app.js，app.json，app.wxss，project.config.json等）</p>
<p>对于我的这次开发也就改了project.config.json里的appid。在app.json里修改了小程序首页路径，标题，标题颜色等配置。在app.js里设置了一些全局变量。</p>
<h2 id="小程序UI"><a href="#小程序UI" class="headerlink" title="小程序UI"></a>小程序UI</h2><p>小程序自己本身的一些组件的UI能基本满足我们的需求，但是有时候还是需要一些额外的UI组件。官方也提供了WeUI的小程序版（WeUI有企业微信版的，但是小程序的WeUI没有企业微信版。所以要做出企业微信风格的还是需要我们自己改样式）。我们可以使用WeUI来满足我们的其他需求。由于，官方的文档有些不太清楚的地方。所以，我说一下我是怎么使用的。</p>
<ol>
<li><p>下载WeUI的代码包。</p>
</li>
<li><p>将代码包解压后，放到小程序的根目录下（与pages目录平级，解压的目录名为<code>weui-miniprogram</code>）。</p>
</li>
<li><p>在 app.wxss 里面引入 weui.wxss。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &#39;.&#x2F;weui-miniprogram&#x2F;weui-wxss&#x2F;dist&#x2F;style&#x2F;weui.wxss&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要的页面引入组件。例如，我要在index页面使用<code>cell</code>和<code>cells</code>组件。</p>
<figure class="highlight json"><figcaption><span>index.json</span></figcaption><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="attr">"usingComponents"</span>: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">"mp-cells"</span>: <span class="string">"../../../weui-miniprogram/cells/cells"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">"mp-cell"</span> : <span class="string">"../../../weui-miniprogram/cell/cell"</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mp-cells和mp-cell的路径为WeUI里cells和cell相对于index页面的路径</strong>。</p>
</li>
<li><p>在index页面使用mp-cells和mp-cell标签。</p>
</li>
</ol>
<h2 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h2><p>一开始看文档的时候，我都忽略了这部分。直到我需要在WXML里面处理一些数据。</p>
<p>由于数据驱动的原因，我们使用数据来渲染页面的时候，可能需要做一些处理。例如，我有一些数据的格式不确定，可能是对象可能是数组。在WXML里对数组和对象的处理方式是不一样的，所以我们需要判断一下，但是怎么判断呢？</p>
<p>我们可以在WXML里写一段WXS。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">"m"</span>&gt;</span></span><br><span class="line">var isArray = function(o) &#123;</span><br><span class="line"></span><br><span class="line"> return o.constructor == "Array";</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">module.exports.isArray = isArray;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wx:if&#x3D;&quot;&#123;&#123;!m.isArray(item)&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>这样的方式来处理。还有一些像字符串分割等操作也可以用类似的方法。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>小程序的前端的效果都可以在模拟器中看到。但是，调后台接口的就稍微麻烦一点。因为小程序调的接口的域名得是小程序账号后台配置的域名。一开始，可能我们的接口还是调的本地的，所以要使用<code>局域网通信</code>来调试。因为不能同本机通信，所以我们可以让手机跟电脑连同一wifi来使用手机调试。</p>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>直接点击<code>微信开发者工具</code>的预览，然后用手机扫描后即可在手机上预览效果了，然后可以在手机上打开调试模式。</p>
<h3 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h3><p>真机调试需要使用小程序的<code>appId</code>，测试号的appId的话，微信开发者工具上就没有真机调试按钮。</p>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol>
<li><p>为什么调试模式程序正常，关掉调试模式就不行？</p>
<p>这基本就是，域名设置问题。注意wx.request和wx.uploadFile都要设置域名。</p>
</li>
<li><p>为什么this.setData不起作用？</p>
<p>注意this指的是什么，可以在外层使用var that = this，然后使用that.setData来设置数据。</p>
</li>
<li><p>如何设置域名？</p>
<p>登录小程序管理后台，开发设置里设置，注意一个月只能改5次。</p>
</li>
<li><p>怎么发布小程序？</p>
<p>微信开发者工具，点击上传，然后在管理后台发布。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Linux下使用Pdfbox将PDF转图片乱码问题</title>
    <url>/2020/03/11/%E8%A7%A3%E5%86%B3Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Pdfbox%E5%B0%86PDF%E8%BD%AC%E5%9B%BE%E7%89%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天测试跟我说我们的PDF转换图片的时候会出现中文乱码，然而我在自己的电脑上验证的时候发现并不会出现乱码的问题，我的第一反应就是这不是代码的问题，应该是服务器的环境问题。究竟是不是跟我猜想的一样呢？</p>
<a id="more"></a>

<h2 id="Invalid-or-corrupt-jarfile"><a href="#Invalid-or-corrupt-jarfile" class="headerlink" title="Invalid or corrupt jarfile"></a>Invalid or corrupt jarfile</h2><p>我将需要验证的代码打了个jar包放到服务器上运行。但是却出现了<code>Invalid or corrupt jarfile</code>问题。</p>
<p>这个jar包我在本地是试过的。完全没有问题呀。</p>
<p>我查了查网上说的都是<code>没有指定Main方法</code>或者是<code>上传jar包的时候文件损坏了</code>。但是这跟我的情况都不符合。</p>
<p>那怎么办呢？</p>
<p>首先，这个问题是因为找不到Main方法，那么我强制指定Main方法运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp pdf.jar packagename.classname</span><br></pre></td></tr></table></figure>

<p>一执行就出错了，<code>java.lang.UnsupportedClassVersionError</code>这个错误就好办了。<code>jdk版本的问题</code>。</p>
<h2 id="STSong-Light"><a href="#STSong-Light" class="headerlink" title="STSong Light"></a>STSong Light</h2><p>jdk的问题解决后jar包可以执行了，而且执行的结果确实和测试说的一样，中文显示不出来。而且在输出日志中看到了<code>警告</code>信息，缺少<code>STSong Light</code>字体。</p>
<p>既然缺少字体，那给我们的系统装上字体不就好了。</p>
<p>问题在于我们该上哪去找<code>STSong Light</code>字体。</p>
<p>首先，<code>STSong Light</code>字体其实就是华文宋体。我们在Windows系统<code>C:\Windows\Fonts</code>可以看到很多字体。我们只要宋体就行了。在我的系统上宋体的文件是<code>simsun.ttc</code>。</p>
<p>字体找到了，那么接下来就是给Linux装上这个字体。</p>
<h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>在<code>/usr/share/fonts/</code>下新建一个文件夹，名字自己定。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/share/fonts/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir win</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> win/</span></span><br></pre></td></tr></table></figure>

<p>然后将<code>simsun.ttc</code>上传到新建的文件夹里。然后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">fc</span>-cache -fv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">fc</span>-list</span></span><br></pre></td></tr></table></figure>

<p><code>fc-list</code>执行后我们可以看到，字体里面有我们新增的宋体。</p>
<div class="note success">
            <p>如果没有<code>/usr/share/fonts/</code>文件夹。那么就是没有安装<code>fontconfig</code>。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install fontconfig</span></span><br></pre></td></tr></table></figure>使用上述命名安装就OK了。
          </div>






]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>pdfbox</tag>
        <tag>STSong Light</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么Spring Boot读取UTF-8编码的properties会中文乱码？</title>
    <url>/2020/03/01/%E4%B8%BA%E4%BB%80%E4%B9%88SpringBoot%E8%AF%BB%E5%8F%96UTF-8%E7%BC%96%E7%A0%81%E7%9A%84properties%E4%BC%9A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>我们经常会在<code>properties</code>文件中使用中文。当然大多数时候中文都是写在注释里。我们也会在STS中安装<a href="https://java-properties-editor.com/index.html" target="_blank" rel="noopener">PropertiesEditor</a>插件显示中文。但是，在我升级STS4之后我没有安装<code>PropertiesEditor</code>，而是直接修改<code>properties</code>文件为<code>UTF-8</code>编码，然后在里面写中文。这样就发生了一个问题，应用程序读取出来的<br><code>properties</code>属性里中文是乱码的。</p>
<a id="more"></a>
<h2 id="那么这是为什么呢？"><a href="#那么这是为什么呢？" class="headerlink" title="那么这是为什么呢？"></a>那么这是为什么呢？</h2><p>我们可以追溯到Spring Boot加载<code>properties</code>文件的一段代码。</p>
<figure class="highlight java"><figcaption><span>PropertiesLoaderUtils.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load properties from the given resource (in ISO-8859-1 encoding).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resource the resource to load from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the populated Properties instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException if loading failed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #fillProperties(java.util.Properties, Resource)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">loadProperties</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">		fillProperties(props, resource);</span><br><span class="line">		<span class="keyword">return</span> props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们从注释中可以看到，使用<code>ISO-8859-1</code>编码加载资源文件。所以<code>UTF-8</code>编码的文件用<code>ISO-8859-1</code>编码读取出来所以中文乱码了。</p>
<p>那么，为什么使用<code>PropertiesEditor</code>就没有问题呢？</p>
<p>因为，<code>PropertiesEditor</code>只是让你看到中文，但是实际文件里<strong>\u</strong>xxxx的形式的中文（用文本编辑器打开properties文件看看）。</p>
<p>在这之前还有<code>native2ascii</code>这个东西，想了解的也可以去了解一下。</p>
<h2 id="关于这个问题，我是怎么解决的呢？"><a href="#关于这个问题，我是怎么解决的呢？" class="headerlink" title="关于这个问题，我是怎么解决的呢？"></a>关于这个问题，我是怎么解决的呢？</h2><p>我没有用<code>PropertiesEditor</code>，因为我希望我的一些配置不用<code>PropertiesEditor</code>仍然能看懂什么意思。</p>
<p>所以，我把我的配置文件分成了<code>两份</code>，属于系统的一些配置仍然放在<code>application.properties</code>里面使用<code>ISO-8859-1</code>编码，属于业务相关的配置放到了另一个配置文件<code>xxqg.properties</code>使用<code>UTF-8</code>编码。</p>
<p>然后，读取配置的地方使用<code>@PropertySource</code>注解。</p>
<p>例如，以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"xpath.agreement"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"xxqg.properties"</span>, encoding = <span class="string">"UTF-8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Data</span> <span class="class"><span class="keyword">class</span> <span class="title">AgreementXPath</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String agree;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>乱码</tag>
        <tag>UTF-8</tag>
      </tags>
  </entry>
  <entry>
    <title>STS4启动报错Missing tools.jar</title>
    <url>/2020/02/17/STS4%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Missingtools.jar/</url>
    <content><![CDATA[<p>今天将我的STS3升级到了STS4，升级完启动STS4的时候发现报<code>Missing tools.jar</code>的错误。</p>
<img data-src="/2020/02/17/STS4%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Missingtools.jar/1.png" class="">
<a id="more"></a>
<p>从图中我们可以看出STS去C盘找<code>tools.jar</code>了。但是我的JDK并不是装在这个目录。我想大多数人的JDK都不在图上的目录吧。</p>
<p>那么这个路径从哪来的呢？</p>
<p>我们通过<code>Help -&gt; About Spring Tool Suite 4 -&gt; Installation Details -&gt; Configuration</code>可以看到：</p>
<img data-src="/2020/02/17/STS4%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Missingtools.jar/2.png" class="">

<p>那么，这个配置该怎么修改呢？</p>
<p>我们打开STS4的安装目录，找到<code>SpringToolSuite4.ini</code>增加一下两行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-vm</span><br><span class="line">D:\soft\java8\bin\javaw.exe</span><br></pre></td></tr></table></figure>

<p>将<code>D:\soft\java8\bin</code>修改为自己电脑上的JDK目录即可。注意，这两行要加在<code>-vmargs</code>上面。</p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>Spring Tool Suite</category>
      </categories>
      <tags>
        <tag>Spring Tool Suite</tag>
        <tag>STS4</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat日志截断</title>
    <url>/2020/01/22/Tomcat%E6%97%A5%E5%BF%97%E6%88%AA%E6%96%AD/</url>
    <content><![CDATA[<p>为了避免生产环境<code>Tomcat</code>的<code>catalina.out</code>越来越大，我们需要轮替<code>catalina.out</code>，那么我们该怎么做呢？</p>
<p>关于这个问题，我在<code>Tomcat</code>的<code>FAQ</code>中找到了答案。</p>
<a id="more"></a>

<blockquote><p>CATALINA_BASE/logs/catalina.out does not rotate. But it should not be an issue because nothing should be printing to standard output since you are using a logging package, right?</p>
<p>If you really must rotate catalina.out, here are some techniques you can use:</p>
<ol>
<li>If you are using jsvc 1.0.4 or later (from <a href="https://commons.apache.org/proper/commons-daemon/" target="_blank" rel="noopener">Apache Commons Daemon</a> project) to launch Tomcat, you can send SIGUSR1 signal to jsvc to get it to re-open its log files (<a href="https://issues.apache.org/jira/browse/DAEMON-95" target="_blank" rel="noopener">Jira Ticket</a>). You can couple this with ‘logrotate’ or your favorite log-rotation utility (including good-old ‘mv’) to re-name catalina.out at intervals and then get jsvc to re-open the original (catalina.out) file and continue writing to it.</li>
<li>Use ‘logrotate’ with the ‘copytruncate’ option. This allows you to externally rotate catalina.out without changing anything within Tomcat.</li>
<li>Modify bin/catalina.sh (or bin/catalina.bat) to pipe output from the JVM into a piped-logger such as <a href="https://linux.die.net/man/1/cronolog" target="_blank" rel="noopener">cronolog</a> or Apache httpd’s <a href="https://httpd.apache.org/docs/2.4/logs.html#piped" target="_blank" rel="noopener">rotatelogs</a> (note that the previous reference is for Apache httpd documentation and <em>is not applicable to Tomcat</em> – it merely illustrates the concept).<br>See also the patch in <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=53930" target="_blank" rel="noopener">Bug 53930, “Allow capture of catalina stdout/stderr to a command instead of just a file”</a>.</li>
</ol>
<footer><strong>Tomcat FAQ</strong><cite><a href="https://cwiki.apache.org/confluence/display/TOMCAT/Logging#Logging-Q10" target="_blank" rel="noopener">How do I rotate catalina.out?</a></cite></footer></blockquote>

<p>大概意思是<code>catalina.out</code>的轮替不应该是一个问题，因为你用了日志包的话没啥东西会打印到标准输出。但是你真的要轮替<code>catalina.out</code>有三种方式。</p>
<ol>
<li>使用jsvc 1.0.4 +</li>
<li>使用logrotate</li>
<li>使用cronolog或者rotatelogs</li>
</ol>
<p>我选择了第二种，因为第二种最简单，最常用。而且不需要改Tomcat的任何东西。最重要的是，我们的<code>Linux</code>服务器已经有logrotate（一般都有的）。</p>
<p>那么，我们该怎么做呢？很简单，只要做一件事就行了。</p>
<ol>
<li><p>切换到<code>/etc/logrotate.d</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/logrotate.d</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch tomcat</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑新建的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim tomcat</span></span><br></pre></td></tr></table></figure>

<p>然后将下面的内容写到文件里就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;app&#x2F;apache-tomcat-8.0.43&#x2F;logs&#x2F;catalina.out</span><br><span class="line">&#123;</span><br><span class="line">    copytruncate</span><br><span class="line">    daily</span><br><span class="line">    dateext</span><br><span class="line">    rotate 7</span><br><span class="line">    compress</span><br><span class="line">    missingok</span><br><span class="line">    size 10M</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>/app/apache-tomcat-8.0.43/logs/catalina.out</code>是<code>你的catalina.out的路径</code></li>
<li><code>copytruncate</code> 就是关键了，复制截断</li>
<li><code>daily</code>表示每天轮替</li>
<li><code>dateext</code>表示使用日期作为后缀</li>
<li><code>rotate 7</code>表示轮替最多保留之前的数据几次，超出的将被删除或邮件接收</li>
<li><code>compress</code>表示轮替下来的日志会被压缩</li>
<li><code>missingok</code>表示如果日志丢失，不报错继续滚动下一个日志</li>
<li><code>size 10M</code>表示日志文件超过10M才轮替</li>
</ul>
<p><a href="https://linux.die.net/man/8/logrotate" target="_blank" rel="noopener">更多配置项&gt;&gt;&gt;</a></p>
</li>
</ol>
<p>做完上面这些我们就等着定时执行就好了，我们也可以手动强制执行轮替来试试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/sbin/logrotate -vf /etc/logrotate.d/tomcat</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>logrotate</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加RSS和站点地图</title>
    <url>/2020/01/20/Hexo%E6%B7%BB%E5%8A%A0RSS%E5%92%8C%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>给自己的博客添加RSS的话，其他人就可以订阅你的博客了。</p>
<div class="tabs" id="rss"><ul class="nav-tabs"><li class="tab active"><a href="#rss-1">安装</a></li><li class="tab"><a href="#rss-2">配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="rss-1"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-feed --save</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="rss-2"><figure class="highlight plain"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: </span><br><span class="line">  content_limit_delim: &#39; &#39;</span><br><span class="line">  order_by: -date</span><br><span class="line">  icon: </span><br><span class="line">  autodiscovery: true</span><br><span class="line">  template:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>详细见<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a></p></div></div></div>



<h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><blockquote><p>站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名sitemap，为爬虫指路，增加网站重要内容页面的收录。站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p>
<footer><strong>百度百科</strong><cite><a href="https://baike.baidu.com/item/站点地图/9991876" target="_blank" rel="noopener">站点地图</a></cite></footer></blockquote>

<div class="tabs" id="站点地图"><ul class="nav-tabs"><li class="tab active"><a href="#站点地图-1">安装</a></li><li class="tab"><a href="#站点地图-2">配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="站点地图-1"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-sitemap --save</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="站点地图-2"><figure class="highlight plain"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">    template:</span><br><span class="line">    rel: false</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>path</strong> - Sitemap path. (Default: sitemap.xml)</li>
<li><strong>template</strong> - Custom template path. This file will be used to generate sitemap.xml (See <a href="https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml" target="_blank" rel="noopener">default template</a>)</li>
<li><strong>rel</strong> - Add <a href="http://microformats.org/wiki/rel-sitemap" target="_blank" rel="noopener"><code>rel-sitemap</code></a> to the site’s header. (Default: <code>false</code>)</li>
</ul></div></div></div>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>RSS</tag>
        <tag>sitemap</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客</title>
    <url>/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这不完全是一篇搭建个人博客的教程，因为<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>的文档其实写得非常清楚了。但是，我们按照教程来不一定很顺利。所以，这主要还是一个小白的经验之谈。</p>
<a id="more"></a>


<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="我为什么选择Hexo呢？"><a href="#我为什么选择Hexo呢？" class="headerlink" title="我为什么选择Hexo呢？"></a>我为什么选择Hexo呢？</h3><ol>
<li>网上很多人推荐使用Hexo</li>
<li>我本来也打算用Jekyll，但是由于网络原因Ruby的开发环境的安装包我下载不下来。</li>
</ol>
<p>什么？还有其他的比Hexo好用，为什么不用？别问，问就是Hexo是最好用的。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> </li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li>
</ul>
<p>这两我都是用得很少，一般都是现学现用。安装也不难，这就不多说了。</p>
<h5 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h5><p>由于最终我们的是将网站部署到<span class="label default">GitHub Pages</span>，所以这里需要配置Git，将Git和GitHub关联上，以便之后将文件push到GitHub。</p>
<ol>
<li><p>鼠标右击，选择<span class="label default">Git Bash Here</span>打开Git命令行。</p>
</li>
<li><p>配置<span class="label default">user.name</span>和<span class="label default">user.email</span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;你的GitHub用户名&#39;</span><br><span class="line">git config --global user.email &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成SSH密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>

<p>然后直接连续回车就OK，默认不需要设置密码</p>
</li>
<li><p>复制公钥</p>
<p>打开.ssh文件夹中的id_rsa.pub文件(用文本编辑器打开就好了)，复制里面的内容。（我的在这个目录下：C:\Users\Admin\.ssh）</p>
</li>
<li><p>到<a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener">GitHub设置SSH keys</a></p>
<p>Title的内容随意，Key里面粘贴<span class="label default">第4步</span>中复制的内容，然后点击<a class="btn" href="#">
            <i class="fa fa-"></i>Add SSH Key
          </a></p>
</li>
<li><p>检查</p>
<p>打开Git Bash，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh git@github.com</span><br></pre></td></tr></table></figure>

<p>显示<span class="label default">You've successfully authenticated</span>这样的话，就是成功了。</p>
</li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>打开一个新的命令行窗口输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ Hexo</span><br></pre></td></tr></table></figure>

<p>能显示出一些帮助信息就说明装成功了</p>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="初始化网站"><a href="#初始化网站" class="headerlink" title="初始化网站"></a>初始化网站</h4><p>找一个你想放网站文件的地方，然后执行下列命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p><a name='folder'>&lt;folder&gt;</a>换成你想要的文件夹名字。完成后，能看到指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>到目前为止，网站就建好了。但是我们要在本地看效果还需要将网站部署到本地服务器。</p>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ol>
<li><p>安装hexo-server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>这里一定要切换到网站文件夹下启动。</p>
          </div>

<p>最终看到输出<span class="label default">Hexo is running at http://localhost:4000</span>就是启动好了。</p>
</li>
<li><p>打开浏览器输入<span class="label default">Hexo is running at http://localhost:4000</span>就能看到Hexo默认主题<span class="label default">landscape</span>的页面</p>
<img data-src="/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_landscape.png" class="" title="landscape主题图片">



</li>
</ol>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>我们现在已经在本地部署过搭建的网站了。为了让其他人也能看到，我们要个人网站部署到GitHub Pages。</p>
<p>这个教程在<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>也是有的，有<span class="label default">两种</span>方式。我比较推荐第一种，就是使用<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 。</p>
<div class="note info">
            <p><strong>为什么选第一种?</strong></p><p>主要还是我按第二种，GitHub上只存了Hexo生成的页面，但是我想源文件也想存下来，当然我们也可以将源文件也上传到GitHub，达到跟第一种类似的效果。但是，持续集成服务，免费的，它不香吗？</p>
          </div>



<p>如果你按官方教程后最终发现这个：</p>
<blockquote>
<p>User pages must be built from the <code>master</code> branch.</p>
</blockquote>
<p>那么下面的内容就有用了。因为<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>的教程是将Hexo的文件放<span class="label default">master</span>，然后生成的html放<span class="label default">gh-pages</span>的，以前可能是没问题，但是现在GitHub规定你必须将页面放到<span class="label default">master</span>。</p>
<ol>
<li><p>GitHub新建一个 repository。命名为<span class="label default"><你的 GitHub 用户名>.github.io</span>。选择<span class="label default">Public</span>，勾上<span class="label default">Initialize this repository with a README</span>。</p>
</li>
<li><p>然后选择一个地方新建一个空的文件夹。进入文件夹，右键鼠标，选择<span class="label default">Git Bash Here</span>打开Git命令行。将刚才建的repository clone下来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后新建一个分支用来存放Hexo生成前的文件。（我的分支名就blog）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>

<p>然后切换到分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将之前建站的文件夹<a href='#folder'>&lt;folder&gt;</a>下的所有文件及文件夹复制到第2步种新建的文件夹下面。</p>
</li>
<li><p>将第3步种的文件提交到分支，填写注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;&lt;注释&gt;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件push到GitHub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>上传成功后就能在GitHub上之前建的repository的分支看到了。</p>
</li>
<li><p>将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 GitHub 账户中。</p>
</li>
<li><p>前往 GitHub 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</p>
</li>
<li><p>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/" target="_blank" rel="noopener">手动前往</a>。</p>
</li>
<li><p>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</p>
</li>
<li><p>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</p>
</li>
<li><p>在你的 Hexo 站点文件夹(现在这个站点文件夹为应该为<span class="label default"><你的 GitHub 用户名>.github.io</span>)中新建一个 <code>.travis.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog # build blog branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  target_branch: master</span><br><span class="line">  on:</span><br><span class="line">    branch: blog</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>这里的内容和Hexo官网的有点区别。这里指定了build的为&lt;分支名字&gt;（<span class="label default">我的是blog</span>），目标是master</p>
          </div>
</li>
<li><p>将 <code>.travis.yml</code> 推送（推送方法和之前的文件推送到GitHub类型）到 repository 分支中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>master</code> 分支下。</p>
</li>
<li><p>推送之后等一会,<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 上就能看到build信息。等<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> build完之后。就能在 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点了。可能需要等一会儿。发布成功的话，你应该可以在repository的setting的<span class="label default">GitHub Pages</span> 下看到<span class="label success">Your site is published at https://<你的 GitHub 用户名>.github.io</span>。</p>
</li>
</ol>
<h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>到此，我们已经将网站发布到GitHub Pages了。但是默认的<code>landscape</code>，真的不符合我的审美。我们可以取<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a>网站挑选，也可以去GitHub上搜索<code>hexo-theme</code>。我就是去GitHub上挑选的star比较高的<a href="hexo-theme">Next主题</a>，所以我就以<code>Next</code>主题为例。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><div class="tabs" id="hexo-主题"><ul class="nav-tabs"><li class="tab active"><a href="#hexo-主题-1">安装-></a></li><li class="tab"><a href="#hexo-主题-2">Hexo 配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="hexo-主题-1"><p>切换到站点文件夹，按我上的的教程此时应该是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &lt;你的 GitHub 用户名&gt;.github.io</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="hexo-主题-2"><figure class="highlight plain"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一开始Next主题的很多配置都是关闭的，所以我们可以通过查看<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">文档</a>,然后修改主题的<code>_config.yml</code>来开启和配置一些功能。下面只讲我遇到过问题的。</p>
<h4 id="Post-Wordcount"><a href="#Post-Wordcount" class="headerlink" title="Post Wordcount"></a>Post Wordcount</h4><p>这是一个统计文字的功能，但是我安装步骤弄好之后。页面显示的字数和阅读时间都没正确显示出来。我看GitHub上关于没有正确显示字数的issue都是因为Next升级到<code>6.x</code>之后，将统计的插件从<a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener"><code>hexo-wordcount</code></a>换到了<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener"><code>hexo-symbols-count-time</code></a>。而我的都是最新的，最终我在Hexo上找到了解决办法。</p>
<blockquote>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
</blockquote>
<p>这个命令就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>我运行完这个之后就正确显示了。</p>
<h4 id="Comment-Systems"><a href="#Comment-Systems" class="headerlink" title="Comment Systems"></a>Comment Systems</h4><p>评论系统我选的Gitalk。嗯，我比较喜欢GitHub那一套。</p>
<p>具体过程，按照过程来就行。</p>
<p>需要注意的就是这个配置</p>
<figure class="highlight plain"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">gitalk:  </span><br><span class="line"></span><br><span class="line">​	repo: # Repository name to store issues</span><br></pre></td></tr></table></figure>

<p>这里填的是 Repository的名字，不是SSH URL。这个填错了页面上会显示<code>Error</code>。</p>
<p>另外，评论系统你得发布到GitHub才能正常使用。</p>
<h4 id="CC-license"><a href="#CC-license" class="headerlink" title="CC license"></a>CC license</h4><p>协议详情见<a href="https://creativecommons.org" target="_blank" rel="noopener">Creative Commons</a></p>
<p>将这个配置开启可以在文章最后加一个版权声明</p>
<div class="note danger">
            <p><strong>本文作者：</strong> xxx</p><p><strong>本文链接：</strong> xxx</p><p><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">BY-NC-SA</a> 许可协议。转载请注明出处！</p>
          </div>

<figure class="highlight plain"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language: deed.zh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p><strong>推送主题修改到GitHub</strong></p><p>因为我们是将Next主题直接clone到我们自己的Repository下。所以，我们推送的文件中，有个.git的文件夹。嵌套仓库可能会出问题。注意命令行的提示信息，会有类似让你执行下面这条命令的提示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached themes&#x2F;next</span><br></pre></td></tr></table></figure><p>这条真的有用，执行完就可以提交了。如果不行，你就多试几次，亲测有效。</p>
          </div>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="标签和分类"><a href="#标签和分类" class="headerlink" title="标签和分类"></a>标签和分类</h4><p>这个我们在Next的<a href="https://theme-next.org/docs/theme-settings/custom-pages" target="_blank" rel="noopener">文档</a>中就能弄好了。</p>
<h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>在站点文件夹下执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>这条指令其实就是在source/_posts文件夹下建了名为&lt;title&gt;.md的文件。</p>
<p>用一个markdown的编辑器打开这个文件就可以开始写文章了。</p>
<p>文章的头部一段内容可以包含标签，分类。本篇文章就是这就这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo搭建个人博客</span><br><span class="line">date: 2020-01-17 16:56:05</span><br><span class="line">categories:</span><br><span class="line"> - Blog</span><br><span class="line">tags: </span><br><span class="line"> - Hexo</span><br><span class="line"> - Github</span><br><span class="line"> - Blog</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>



<p>默认的情况下，文章是全部展开的，我们可以在文章的任何地方添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>控制哪些内容需要点击<a class="btn" href="#">
            <i class="fa fa-"></i>阅读全文>>
          </a>查看。</p>
<p>还有一些标签的使用可以查看Next<a href="https://theme-next.org/docs/tag-plugins/" target="_blank" rel="noopener">文档</a>和Hexo<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">文档</a>。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Java + Appium + 夜神模拟器实现学习强国积分任务自动化</title>
    <url>/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<p>首先，先放源码<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>。</p>
<p>我想装了《学习强国》App的同学都为每天30积分的任务苦恼过。我之前也是因为这30积分非常头疼，不是《学习强国》App不好，而是真的不适合我。我们会学习，但可能不是被迫学习指定内容，为了指标而学习。</p>
<p>GitHub上面有很多Python写的《学习强国》自动化学习项目。我也有在用，但是我想有一个Java编写的，自己改起来顺手的《学习强国》自动学习。</p>
<p>为此，我就写了一个Java的，目前已经实现刷30分。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK8</a></p>
</li>
<li><p><a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">Android SDK 24.4.1</a></p>
</li>
<li><p><a href="http://appium.io/" target="_blank" rel="noopener">Appium 1.15.1</a></p>
</li>
<li><p><a href="https://www.yeshen.com/" target="_blank" rel="noopener">夜神模拟器 6.5.0.3</a>，当然里面还需要安装《学习强国》</p>
</li>
<li><p><a href="https://spring.io/tools" target="_blank" rel="noopener">Sping Tool Suite</a></p>
</li>
<li><p><a href="https://projectlombok.org/setup/eclipse" target="_blank" rel="noopener">Lombok</a></p>
<p>（1、5、6我电脑上本来就已经装了，所以我就只用装2、3、4就行了</p>
<p>安装基本都比较顺利，网上教程也挺多。）</p>
</li>
</ol>
<div class="note info">
            <p>上面的环境准备好之后，启动<code>夜神模拟器</code>后，命令行执行下列命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>如果<code>List of devices attached</code>没有显示内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">127.0.0.1:62002 device</span><br></pre></td></tr></table></figure><p>那么，需要使用SDK下<code>platform-tools</code>文件夹的<strong>adb.exe</strong>覆盖掉夜神模拟器安装目录下<code>bin</code>目录中的<strong>adb.exe</strong>和<strong>nox_adb.exe</strong></p><p>如果做了上面的操作还是不行，试试以下指令。还是不行的话，看看adb的<a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn" target="_blank" rel="noopener">用户指南</a>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect device_ip_address</span><br></pre></td></tr></table></figure><p>我这里夜神模拟器的<code>device_ip_address</code>是<code>127.0.0.1:62001</code></p>
          </div>

<h2 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h2><p><a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>的核心就是<code>Appium</code>了。</p>
<p>Appium是客户端/服务器架构。我们下载的<a href="http://appium.io/" target="_blank" rel="noopener">Appium Desktop</a>就是服务器。而<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>做的就是使用Appium的Java客户端库定义一些操作来完成我的目标。</p>
<p>我没有去了解太多关于Appium的知识。感兴趣的可以去官方文档查看<a href="https://appium.io/docs/en/about-appium/intro/" target="_blank" rel="noopener">详细介绍</a>。</p>
<h3 id="Appium-Desktop"><a href="#Appium-Desktop" class="headerlink" title="Appium Desktop"></a>Appium Desktop</h3><p>打开Appium Desktop之后，显示如下界面，我将Host设置为<code>localhost</code>了</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_start.png" class="">

<p>在<a class="btn" href="#">
            <i class="fa fa-"></i>Start Server
          </a> 之前我们需要，先点击下面的按钮配置JDK和Android SDK 的路径</p>
<p>然后启动，显示如下界面</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_cmd.png" class="">

<p>点击放大镜。得到如下界面</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_conf.png" class="">

<p>然后填入如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;platformName&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;5.1.1&quot;,</span><br><span class="line">  &quot;appPackage&quot;: &quot;cn.xuexi.android&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.alibaba.android.rimet.biz.SplashActivity&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;127.0.0.1:62001&quot;,</span><br><span class="line">  &quot;noReset&quot;: true,</span><br><span class="line">  &quot;newCommandTimeout&quot;: 600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击<a class="btn" href="#">
            <i class="fa fa-"></i>Start Session
          </a>，就能得到如下界面。（在这之前得保证<code>adb devices</code>能看到你的设备，我这里是夜神模拟器）</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_op.png" class="">

<p>这时候我们应该能看到<code>夜神模拟器</code>中的《学习强国》App也已经打开了。此时<code>Appium</code>和<code>夜神模拟器</code>看到的页面是同步的。以上界面对页面元素的操作按钮的所有操作都会反馈到夜神模拟器上的《学习强国》App。同样，在夜神模拟器上的操作也会反馈到上面的页面，点击<code>刷新</code>按钮就能刷新页面。</p>
<p>到此为止就准备好了，可以开发了。</p>
<h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>用 <a href="https://spring.io/tools" target="_blank" rel="noopener">Sping Tool Suite</a>建一个Spring Boot工程</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​	&lt;dependency&gt;</span><br><span class="line">  			&lt;groupId&gt;io.appium&lt;&#x2F;groupId&gt;</span><br><span class="line">  			&lt;artifactId&gt;java-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">  			&lt;version&gt;7.3.0&lt;&#x2F;version&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">​			&lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">​			&lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;com.h2database&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;h2&lt;&#x2F;artifactId&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">​	&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要还是Appium客户端的依赖，其他的都是为了方便完成学习强国的积分任务功能而添加的</p>
<p>上面这些完成了就可以开始写代码了。当然你可以直接clone这个<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>。</p>
<h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><p>下面我以《学习强国》里的<code>登录</code>和<code>阅读文章</code>为例，讲述怎么使用Appium的Java客户端库。</p>
<p>因为几乎所有的操作都是从<code>AndroidDriver</code>开始的，所以我们需要构建<code>AndroidDriver</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;platformName&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;5.1.1&quot;,</span><br><span class="line">  &quot;appPackage&quot;: &quot;cn.xuexi.android&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.alibaba.android.rimet.biz.SplashActivity&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;127.0.0.1:62001&quot;,</span><br><span class="line">  &quot;noReset&quot;: true,</span><br><span class="line">  &quot;newCommandTimeout&quot;: 600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>中的代码如下：</p>
<figure class="highlight java"><figcaption><span>AppiumConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> AndroidDriver&lt;AndroidElement&gt; <span class="title">androidDriver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">	capabilities.setPlatform(Platform.ANDROID);</span><br><span class="line">	capabilities.setVersion(version); <span class="comment">// 安卓版本</span></span><br><span class="line">	capabilities.setCapability(AndroidMobileCapabilityType.APP_PACKAGE, appPackage);</span><br><span class="line">	capabilities.setCapability(AndroidMobileCapabilityType.APP_ACTIVITY, appActivity);</span><br><span class="line">	capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, deviceName); <span class="comment">// adb devices 查看</span></span><br><span class="line">	capabilities.setCapability(<span class="string">"noReset"</span>, noReset); </span><br><span class="line">	capabilities.setCapability(<span class="string">"newCommandTimeout"</span>, newCommandTimeout); </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> AndroidDriver&lt;AndroidElement&gt;(<span class="keyword">new</span> URL(appiumServer), capabilities);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p><code>手机号</code>和<code>密码</code>登录就非常简单了。</p>
<ol>
<li><p>找到<code>手机号输入框</code>。我们在Appium Desktop上用选择元素的按钮选中<code>手机号输入框</code>。</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/login_phone_input.png" class="">

<p>我们可以在右侧的<code>Selected Element</code>下看到<code>手机号输入框</code>的<code>XPath</code>，<code>Text</code>, <code>resource-id</code>等信息。</p>
</li>
<li><p>使用<code>AndroidDriver</code>的<code>findElementByXPath</code>方法。(所有的元素我都用的XPath查找，我们可以在网上搜索XPath的教程来学习XPath，这个并不复杂)</p>
<p>这里我使用以下XPath查找，意思就是查找所有元素中<code>resource-id</code>为<code>cn.xuexi.android:id/et_phone_input</code>的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;et_phone_input&#39;]</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>所有的XPath都可以在Appium Desktop的搜索中按XPath搜索尝试能不能搜到元素。</p>
          </div>
</li>
<li><p>然后调用第2步中<code>findElementByXPath</code>返回的<code>AndroidElement</code>对象的<code>sendKeys</code>方法，并传入手机号作为参数。</p>
</li>
<li><p>同样的操作找到<code>密码输入框</code>，并输入密码。找到<code>登录</code>按钮，然后调用<code>click()</code>方法点击</p>
</li>
</ol>
<p>到此为止，登录就实现了。</p>
<h4 id="阅读文章"><a href="#阅读文章" class="headerlink" title="阅读文章"></a>阅读文章</h4><p>阅读文章不外乎是这些操作</p>
<ol>
<li>找文章</li>
<li>进入文章</li>
<li>上下滑动阅读文章</li>
<li>等待阅读到达指定时间</li>
<li>返回</li>
</ol>
<p>这5步中比较特别的就是<code>上下滑动</code>和<code>返回</code>了，其他的就跟<code>登录</code>差不多，都是先<code>findElementByXPath</code>找到元素然后调用<code>click()</code>方法。</p>
<h5 id="那么滑动怎么做呢"><a href="#那么滑动怎么做呢" class="headerlink" title="那么滑动怎么做呢?"></a>那么滑动怎么做呢?</h5><ol>
<li>我们需要创建一个新的对象<code>AndroidTouchAction</code></li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line">androidTouchAction = <span class="keyword">new</span> AndroidTouchAction(androidDriver);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取设备的<code>宽</code>和<code>高</code></li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line">val size = androidDriver.manage().window().getSize();</span><br><span class="line">height = size.height;</span><br><span class="line">width = size.width;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后相继调用<code>AndroidTouchAction</code>的<code>press</code>，<code>moveTo</code>，<code>release</code>，<code>perform</code>方法</li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		androidTouchAction.press(PointOption.point(width / <span class="number">2</span>, height / <span class="number">2</span> + <span class="number">200</span>))</span><br><span class="line">						  .waitAction()</span><br><span class="line">						  .moveTo(PointOption.point(width / <span class="number">2</span>, height / <span class="number">2</span> - <span class="number">400</span>))</span><br><span class="line">						  .release()</span><br><span class="line">						  .perform();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="返回操作"><a href="#返回操作" class="headerlink" title="返回操作"></a>返回操作</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">androidDriver.navigate().back();</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p><strong>常见问题</strong></p><ol><li><p>XPath对了但是找不到元素</p><p>这种情况基本就是元素还没加载。我们可以用WebDriverWait对象等待</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wait &#x3D; new WebDriverWait(androidDriver,30);</span><br><span class="line">wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(xpath)));</span><br></pre></td></tr></table></figure></li><li><p>滑动的时候报不能在指定元素上执行touch操作</p><p>解决办法也是跟上面类似，都是需要等待元素加载完成。</p></li></ol>
          </div>

<div class="note info">
            <p><strong>XPath的常用写法</strong></p><ul><li><p>指定属性为&lt;xxx&gt;的元素，例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@text&#x3D;&#39;&lt;xxxx&gt;&#39;]</span><br><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;&lt;xxx&gt;&#39;]</span><br></pre></td></tr></table></figure></li><li><p>指定某个元素的父元素，例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;general_card_title_id&#39;]&#x2F;parent::*</span><br></pre></td></tr></table></figure><p><code>resource-id</code>为<code>cn.xuexi.android:id/general_card_title_id</code>的元素的父元素</p></li><li><p>指定元素之后的同级元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;android.widget.ImageView&#x2F;following-sibling::android.widget.TextView[ends-with(@text, &quot;学习平台&quot;)]</span><br></pre></td></tr></table></figure><p><code>android.widget.ImageView</code>元素之后的同级元素为<code>android.widget.TextView</code>的text内容以<code>学习平台</code>结尾的元素</p></li><li><p>指定元素之前的同级元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;action_bar_root&#39;]&#x2F;&#x2F;android.widget.TextView[@text&#x3D;&#39;分享到学习强国&#39;]&#x2F;preceding-sibling::*</span><br></pre></td></tr></table></figure></li><li><p>倒数第二个元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;android.widget.TextView[@text&#x3D;&#39;欢迎发表你的观点&#39;]&#x2F;following-sibling::*[last()-1]</span><br></pre></td></tr></table></figure><p><code>android.widget.TextView</code>的text内容为<code>欢迎发表你的观点</code>的元素之后的同级元素中的倒数第二个元素</p><p><a href="https://github.com/l-qiang/LitterBaby/blob/master/src/main/resources/application.properties" target="_blank" rel="noopener">更多用法示例</a></p></li></ul>
          </div>








]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Appium</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>iText合并PDF和添加书签</title>
    <url>/2020/01/10/iText%E5%90%88%E5%B9%B6PDF%E5%92%8C%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/</url>
    <content><![CDATA[<p>关于这个问题，其实在iText官网和Stack Overflow上面都有答案。之所以还要记录是想有更多人看到简单易懂的解决办法。因为我不想再有人直接CSDN搜一个，不管是否要新引入Jar包也不管代码是否复杂，然后告诉我参考那个写。</p>
<p><a href="https://itextpdf.com/en/resources/examples/itext-5-legacy/merging-documents-bookmarks#39-mergewithoutlines.java" target="_blank" rel="noopener">官网例子</a></p>
<a id="more"></a>

<p>下面是一个示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(List&lt;String&gt; srcFiles, String desFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Document document = <span class="keyword">new</span> Document();</span><br><span class="line">        PdfCopy copy = <span class="keyword">new</span> PdfCopy(document, <span class="keyword">new</span> FileOutputStream(desFile));</span><br><span class="line">        document.open();</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line">        List&lt;HashMap&lt;String, Object&gt;&gt; outlines = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String scrFile : srcFiles) &#123;</span><br><span class="line">            PdfReader reader = <span class="keyword">new</span> PdfReader(scrFile);</span><br><span class="line">            copy.addDocument(reader);</span><br><span class="line">            <span class="comment">// add outline element</span></span><br><span class="line">            HashMap&lt;String, Object&gt; outline = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            outline.put(<span class="string">"Title"</span>, FilenameUtils.getBaseName(scrFile)); <span class="comment">// 书签的名字</span></span><br><span class="line">            outline.put(<span class="string">"Action"</span>, <span class="string">"GoTo"</span>);</span><br><span class="line">            outline.put(<span class="string">"Page"</span>, String.format(<span class="string">"%d Fit"</span>, page));</span><br><span class="line">            outlines.add(outline);</span><br><span class="line">            <span class="comment">// update page count</span></span><br><span class="line">            page += reader.getNumberOfPages();</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line">        copy.setOutlines(outlines);</span><br><span class="line">        document.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PDF</tag>
        <tag>iText</tag>
      </tags>
  </entry>
  <entry>
    <title>领域驱动设计</title>
    <url>/2019/12/27/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>前一段时间看到了<code>领域驱动设计(DDD)</code>这个词，第一印象就是“这跟编码关系不大吧”，在我了解了一些关于DDD的知识后，发现DDD其实是跟我们关系密切的，了解DDD非常有必要。</p>
<p>因此，我找了两本豆瓣评分较高的DDD的书籍（《领域驱动设计：软件核心复杂性应对之导》《实现领域驱动设计》）看了一遍。</p>
<p>本想写点学习总结，后来觉得自己写的实在不上不了台面。</p>
<p>因此，附一个DDD学习地址-<a href="https://www.jdon.com/" target="_blank" rel="noopener">解道</a></p>
]]></content>
      <categories>
        <category>DDD</category>
      </categories>
      <tags>
        <tag>DDD</tag>
        <tag>领域驱动设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson将无嵌套JSON转嵌套对象</title>
    <url>/2019/12/19/Jackson%E5%B0%86%E6%97%A0%E5%B5%8C%E5%A5%97JSON%E8%BD%AC%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>例如，我有以下JSON</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;age: 18, lastname: &quot;Liu&quot;, firstname: &quot;Ryan&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>我需要将这个JSON装成Person对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private Name name;</span><br><span class="line">&#125;</span><br><span class="line">class Name &#123;</span><br><span class="line">    private String lastname;</span><br><span class="line">    private String firstname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要使用Jackson的注解<code>@JsonUnwrapped</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    @JsonUnwrapped</span><br><span class="line">    private Name name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Jackson</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jackson</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我的Spring Boot项目不能访问静态资源？</title>
    <url>/2019/12/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>问题源于一个客户这边自己封装的框架。</p>
<p>一直以来，我都对这种框架无感，因为它一般是由开源项目改编的，而且不一定是改得更好了。封装越多用起来越笨重。</p>
<a id="more"></a>

<p>由于缺少文档的原因，查原因就稍微曲折了一点。</p>
<ul>
<li><p>首先我从出错信息开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401 认证失败</span><br></pre></td></tr></table></figure>

<p>这就有意思了，我访问一个静态资源，而且我按照所谓的文档已经关闭权限认证了。最头疼的是，这个错误信息在这个框架的自定义的错误码里面根本没有。然后我顺着代码看了个遍，终于找到了这个错误信息。他不是用的自定义的错误码，而是直接写死的，我服了…</p>
</li>
<li><p>然后debug找到原本的错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No handler mapping for xxx</span><br></pre></td></tr></table></figure>

<p>醉了，这错误多明显，为啥要改成<code>401 认证失败</code>返回呢。</p>
<p>错误虽然明显，但是确实超过了我的经验范围，静态资源需要啥Handler呢，还是我太年轻了。不过踩一次坑涨一波经验也不亏。</p>
</li>
<li><p>最终，我在配置文件中发现了这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring</span><br><span class="line">    resources:</span><br><span class="line">        add-mappings: false</span><br></pre></td></tr></table></figure>

<p>这不是坑爹吗，这么多配置项中掺了一个这个，还没有任何说明。</p>
</li>
</ul>
<p>所以原因就是因为<code>spring.resource.add-mappings</code>这个被设置成false，导致<code>WebMvcConfigurer</code>的<code>addResourceHandlers</code>方法直接返回了，所以没有Handler处理静态资源。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Java线程堆栈分析</title>
    <url>/2019/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>最新某系统经常出现无法登录，不能响应请求的情况。一开始找上我的时候，他们已经通过重启恢复了，然后让我查原因。我表示一脸懵逼，啥都没有就让我解决了，最起码得让我有东西分析吧。还好这个问题经常发生，于是就在一次故障发生的时候。</p>
<a id="more"></a>

<p>我使用<code>jps</code>查到<code>进程pid</code>，然后用<code>jstack</code>将堆栈信息保存到一个文件里，然后就用上了我不知道啥时候收藏的网站<a href="https://fastthread.io/" target="_blank" rel="noopener">fastThread</a>，将文件上传上去。</p>
<img data-src="/2019/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%E5%88%86%E6%9E%90/1.png" class="">

<p>嚯，这么多线程再<code>WAITING</code>状态。点进去一个看看。</p>
<img data-src="/2019/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%E5%88%86%E6%9E%90/2.png" class="">

<p>大多数线程的堆栈信息都跟上面差不多，都是在等从Druid数据库连接池等连接。</p>
<p>所以，原因就是数据库连接不够用了。然后我看了一眼数据库连接池的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.maxActive&#x3D;80</span><br><span class="line">spring.datasource.removeAbandoned&#x3D;false</span><br></pre></td></tr></table></figure>

<p>以我对这个系统的了解，这个配置完全够了。</p>
<p>于是，我打开了<code>druid</code>的监控。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.druid.web-stat-filter.enabled&#x3D;true</span><br><span class="line">spring.datasource.druid.stat-view-servlet.enabled&#x3D;true</span><br></pre></td></tr></table></figure>

<p>监控页面的部分功能需要设置这个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.druid.removeAbandoned&#x3D;true</span><br></pre></td></tr></table></figure>

<p>果然，<code>removeAbandoned</code>设置为<code>true</code>之后就有地方出现问题了，抛出了<code>connection holder is null</code>的异常错误。</p>
<p>这说明，有地方长时间占用数据库连接了，由于超时回收，导致事务提交的时候出现问题。找到出错的代码后发现是因为定时任务的所有操作都在一个事务里，一个定时任务<code>几十分钟</code>。其实，这个定时任务完全没必要加一个这样的大粒度事务，它的大多数操作都不必与数据库交互。所以，只要把事务粒度控制好了问题就解决了。</p>
<p>另外，还有一个原因是下面这个配置并不会生效。我其实挺不理解的，Spring Boot的文档写得很清楚了，为什么还有人把这些配置弄错了，而且还不验证有没有生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.maxActive&#x3D;80</span><br><span class="line">spring.datasource.removeAbandoned&#x3D;false</span><br></pre></td></tr></table></figure>

<p>因为系统用的Druid，所以<code>正确的配置</code>是下面这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.druid.maxActive&#x3D;80</span><br><span class="line">spring.datasource.druid.removeAbandoned&#x3D;false</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>fastThread</tag>
        <tag>线程堆栈</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Zookeeper与CAP的思考</title>
    <url>/2019/10/24/%E5%85%B3%E4%BA%8EZookeeper%E4%B8%8ECAP%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>我看到很多博客都说<code>Zookeeper</code>满足了<code>CAP</code>中的<code>CP</code>。但是Zookeeper的<code>Follower</code>和<code>Observer</code>是可以处理非事务请求的。</p>
<p>那么，<code>如果一个读请求到了未同步的Follower和Observer上，那读到的数据不就是旧数据吗？那不就不一致了吗？</code></p>
<a id="more"></a>

<p>带着这个疑问，我在<code>Zookeeper</code>的官方文档中找到了这么一段话。</p>
<blockquote>
<p>Sometimes developers mistakenly assume one other guarantee that ZooKeeper does not in fact make. This is: * Simultaneously Consistent Cross-Client Views* : ZooKeeper does not guarantee that at every instance in time, two different clients will have identical views of ZooKeeper data. Due to factors like network delays, one client may perform an update before another client gets notified of the change. Consider the scenario of two clients, A and B. If client A sets the value of a znode /a from 0 to 1, then tells client B to read /a, client B may read the old value of 0, depending on which server it is connected to. If it is important that Client A and Client B read the same value, Client B should should call the sync() method from the ZooKeeper API method before it performs its read. So, ZooKeeper by itself doesn’t guarantee that changes occur synchronously across all servers, but ZooKeeper primitives can be used to construct higher level functions that provide useful client synchronization. (For more information, see the ZooKeeper Recipes. [tbd:..]).</p>
</blockquote>
<p>所以，数据不一致的问题确实是存在的，但是可以通过sync方法来获取最新数据。</p>
]]></content>
      <categories>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
        <tag>CAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解之@Lookup</title>
    <url>/2019/10/17/Spring%E6%B3%A8%E8%A7%A3%E4%B9%8B@Lookup/</url>
    <content><![CDATA[<p>有时候我们在某个单例Bean中要用到原型Bean。那么我们怎么获取原型Bean呢？</p>
<ul>
<li>用@Autowired，@Resource注解注入</li>
<li>用BeanFactory的getBean方法</li>
</ul>
<p>使用<code>@Autowired</code>，<code>@Resource</code>的话我们就没法达到原型Bean的效果。我想在一个单例Bean中多次获取原型Bean该怎么做，而且我不想用BeanFactory。</p>
<a id="more"></a>

<p><code>@Lookup</code>就能满足我的需要。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class ServiceA &#123;</span><br><span class="line">    </span><br><span class="line">    public void print(String msg) &#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void test(String msg) &#123;</span><br><span class="line">        testBean(msg).print();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Lookup</span><br><span class="line">    protected TestBean testBean(String msg) &#123;</span><br><span class="line">        return new TestBean(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的test方法每次调用都需要一个新的TestBean。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">public class TestBean &#123;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private ServiceA serviceA;</span><br><span class="line">    </span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg(String msg) &#123;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void print() &#123;</span><br><span class="line">        serviceA.print(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TestBean(String msg) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Lookup并不神奇，它的就是通过BeanFactory的getBean实现的</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth解决了什么问题？</title>
    <url>/2019/10/15/OAuth%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote><p>In the traditional client-server authentication model, the client<br>   requests an access-restricted resource (protected resource) on the<br>   server by authenticating with the server using the resource owner’s<br>   credentials.  In order to provide third-party applications access to<br>   restricted resources, the resource owner shares its credentials with<br>   the third party.  This creates several problems and limitations:</p>
<a id="more"></a>

<p>   o  Third-party applications are required to store the resource<br>      owner’s credentials for future use, typically a password in<br>      clear-text.</p>
<p>   o  Servers are required to support password authentication, despite<br>      the security weaknesses inherent in passwords.</p>
<p>   o  Third-party applications gain overly broad access to the resource<br>      owner’s protected resources, leaving resource owners without any<br>      ability to restrict duration or access to a limited subset of<br>      resources.</p>
<p>   o  Resource owners cannot revoke access to an individual third party<br>      without revoking access to all third parties, and must do so by<br>      changing the third party’s password.<br>   o  Compromise of any third-party application results in compromise of<br>      the end-user’s password and all of the data protected by that<br>      password.</p>
<footer><strong>RFC 6749</strong><cite><a href="https://tools.ietf.org/html/rfc6749#section-1" target="_blank" rel="noopener">section-1</a></cite></footer></blockquote>

<p>大概意思就是</p>
<ul>
<li>第三方应用需要存储资源拥有者的密码，并且通常是明文密码</li>
<li>尽管密码不安全，但是服务器必须支持密码验证</li>
<li>资源拥有者不能限制第三方应用对资源访问的范围和持续时间</li>
<li>资源拥有着不能撤销单个第三方应用的权限，只能是通过修改密码的方式来撤销所有第三方应用的权限</li>
<li>任何第三方应用遭到破坏会导致用户密码和所有受到该密码保护的数据受到损害</li>
</ul>
]]></content>
      <categories>
        <category>OAuth</category>
      </categories>
      <tags>
        <tag>OAuth</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-session是怎样使用redis存session的？</title>
    <url>/2019/10/13/springsession%E6%98%AF%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8redis%E5%AD%98session%E7%9A%84/</url>
    <content><![CDATA[<p>其实，我的直觉告诉我使用Hash。</p>
<p>我在项目里找到<a href="https://docs.spring.io/spring-session/docs/current/api/org/springframework/session/data/redis/RedisOperationsSessionRepository.html" target="_blank" rel="noopener">RedisOperationsSessionRepository</a>然后在注释中找到了答案</p>
<blockquote>
<p>Each session is stored in Redis as a <a href="http://redis.io/topics/data-types#hashes" target="_blank" rel="noopener">Hash</a>. Each session is set and updated using the <a href="http://redis.io/commands/hmset" target="_blank" rel="noopener">HMSET command</a>. </p>
</blockquote>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMSET spring:session:sessions:33fdd1b6-b496-4b33-9f7d-df96679d32fe creationTime 1404360000000 maxInactiveInterval 1800 lastAccessedTime 1404360000000 sessionAttr:attrName someAttrValue sessionAttr:attrName2 someAttrValue2</span><br></pre></td></tr></table></figure>

<ul>
<li><code>33fdd1b6-b496-4b33-9f7d-df96679d32fe</code>是session id</li>
<li><code>creationTime 1404360000000</code>是session的创建时间</li>
<li><code>maxInactiveInterval 1800</code>是过期时间</li>
<li><code>lastAccessedTime 1404360000000</code>是最后访问时间</li>
<li>后面的就是一些自定义的属性了</li>
</ul>
<p>当然，除了上面的这些，在Redis中还存了一些过期时间相关的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPIRE spring:session:sessions:33fdd1b6-b496-4b33-9f7d-df96679d32fe 2100</span><br><span class="line">APPEND spring:session:sessions:expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe &quot;&quot;</span><br><span class="line">EXPIRE spring:session:sessions:expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe 1800</span><br><span class="line">SADD spring:session:expirations:1439245080000 expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe</span><br><span class="line">EXPIRE spring:session:expirations1439245080000 2100</span><br></pre></td></tr></table></figure>

<p>原因是Spring Session依赖Redis的过期键的删除触发<code>SessionDestroyedEvent</code>事件来释放资源。但是，Redis的键过期之后不能保证立马删除，所以就会有后台任务不断地访问session过期键来触发Redis过期键删除。</p>
<p>这个可以在<code>RedisOperationsSessionRepository</code>的注释或者<a href="https://docs.spring.io/spring-session/docs/2.0.0.M4/reference/html5/#api-redisoperationssessionrepository-expiration" target="_blank" rel="noopener">Spring Session的文档</a>查看详细介绍。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Session</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Session</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson序列化字段脱敏处理</title>
    <url>/2019/10/11/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E8%84%B1%E6%95%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>例如，我有如下类A，我需要A序列化为JSON是name字段值为***。</p>
<figure class="highlight java"><figcaption><span>A.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="meta">@JsonProperty</span></span><br><span class="line">​    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>我们可以这么做。</p>
<div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><a href="#code-1">StdConverter-></a></li><li class="tab"><a href="#code-2">A</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code-1"><figure class="highlight java"><figcaption><span>NameDesensitizeConverter.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameDesensitizeConverter</span> <span class="keyword">extends</span> <span class="title">StdConverter</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"***"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="code-2"><figure class="highlight java"><figcaption><span>A.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(converter = NameDesensitizeConverter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<p>当然，网上还有<a href="https://blog.csdn.net/liufei198613/article/details/79009015" target="_blank" rel="noopener">其他的方法</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Jackson</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jackson</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentModificationException你真的了解吗？</title>
    <url>/2019/10/11/ConcurrentModificationException%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%90%97/</url>
    <content><![CDATA[<p>我想很多人第一次遇到这个异常都是因为对<code>List</code>使用<code>foreach</code>遍历，然后删除元素的导致的。然后我们会在网上查到使用<code>Iterator</code>或<code>for倒序遍历</code>来解决这个问题。那么<code>ConcurrentModificationException</code>是怎么出现的？为什么要使用Iterator或for倒序遍历来解决呢？</p>
<a id="more"></a>

<p>首先，<code>ConcurrentModificationException</code>是<code>Iterator</code>的<code>remove</code>方法抛出来的，而不是<code>List</code>的<code>remove</code>方法，而<code>foreach</code>的实现原理其实就是<code>Iterator</code>。既然<code>foreach</code>是通过<code>Iterator</code>实现的，那为什么使用<code>Iterator</code>可以，而使用<code>foreach</code>却不行呢？</p>
<p>别急，让我们先看看<code>Iterator</code>的<code>remove</code>和<code>List</code>的<code>remove</code>的区别。</p>
<div class="tabs" id="remove"><ul class="nav-tabs"><li class="tab active"><a href="#remove-1">Iterator</a></li><li class="tab"><a href="#remove-2">List</a></li></ul><div class="tab-content"><div class="tab-pane active" id="remove-1"><figure class="highlight java"><figcaption><span>ArrayList$Itr</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    checkForComodification();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="remove-2"><figure class="highlight java"><figcaption><span>ArrayList</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<p>可以看到，<code>Iterator</code>的的<code>remove</code>方法除了调用<code>List</code>的<code>remove</code>方法之后，还有这样一个操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expectedModCount &#x3D; modCount;</span><br></pre></td></tr></table></figure>

<p>使用<code>foreach</code>的时候会调用<code>checkForComodification</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final void checkForComodification() &#123;</span><br><span class="line">    if (modCount !&#x3D; expectedModCount)</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而我们使用foreach的时候一般都会习惯性的使用List的<code>remove</code>，导致了<code>modCount</code> 和 <code>expectedModCount</code>不相等。</p>
<p><strong>为什么普通的for循环不会出现<code>ConcurrentModificationException</code>异常呢？</strong></p>
<p>因为普通的for循环没有用到Iterator的方法，也就不存在<code>modCount</code> 和 <code>expectedModCount</code>是否相等的问题。</p>
<p>但是，普通for循环也要注意要倒序。</p>
<div class="tabs" id="for"><ul class="nav-tabs"><li class="tab active"><a href="#for-1">倒序</a></li><li class="tab"><a href="#for-2">正序</a></li></ul><div class="tab-content"><div class="tab-pane active" id="for-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; lst = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = lst.size() - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.println(lst.get(i));</span><br><span class="line">            lst.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码可以正常运行。并且输出和预料的一样是10,9,8,7,6,5,4,3,2,1</p></div><div class="tab-pane" id="for-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; lst = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; lst.size() ; i++) &#123;</span><br><span class="line">            System.out.println(lst.get(i));</span><br><span class="line">            lst.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这就有问题了，输出1,3,5,7,9。原因就是删除1之后，2挪到了数组下标为0的位置，但是i已经变成1了，而1的位置已经不是2是3了，所以2就错过了。4,6,8,10也是同样的道理。</p></div></div></div>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次MySQL统计查询SQL优化</title>
    <url>/2019/09/10/%E8%AE%B0%E4%B8%80%E6%AC%A1MySQL%E7%BB%9F%E8%AE%A1%E6%9F%A5%E8%AF%A2SQL%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	COL_B,</span><br><span class="line">	<span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'a'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'a'</span>,</span><br><span class="line">	<span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'b'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'b'</span>,</span><br><span class="line">	<span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'c'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'c'</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Table</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	COL_B </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>COL_C上建立了一个普通索引。<code>50w</code>数据这个SQL的执行时间大概为<code>3s</code>。</p>
<a id="more"></a>

<div class="tabs" id="优化"><ul class="nav-tabs"><li class="tab active"><a href="#优化-1">第一次优化</a></li><li class="tab"><a href="#优化-2">第二次优化</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优化-1"><p>我将一条SQL拆成两条</p>
<figure class="highlight sql"><figcaption><span>分页</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COL_B </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">Table</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    COL_B</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><figcaption><span>查询</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COL_B,</span><br><span class="line">    <span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'a'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'a'</span>,</span><br><span class="line">    <span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'b'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'b'</span>,</span><br><span class="line">    <span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'c'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'c'</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">Table</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    COL_B <span class="keyword">IN</span> (...) </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    COL_B</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这条查询时间缩短到<code>0.5s</code>。在COL_B上加上索引之后，缩短到<code>0.1s</code>。</p>
<p>在第一次优化之后，<code>查询</code>的速度我已经可以接受了，但是<code>分页</code>我还是觉得太慢了。</p></div><div class="tab-pane" id="优化-2"><p>对<code>分页</code>SQL执行EXPLAIN，发现Extra列有一个<code>Using filesort</code>，我想去掉这个。决定使用索引覆盖，在原来的COL_C的索引改为COL_C,COL_B的多列索引。但是这样还是不行，因为GROUP BY 使用的是COL_B，所以无法用到COL_C,COL_B的多列索引，因为索引中COL_C在COL_B左边。</p>
<p>既然是GROUP BY这里引起的，那么我可以不用<code>GROUP BY</code>，改为用<code>DISTINCT</code></p>
<figure class="highlight sql"><figcaption><span>分页</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">DISTINCT</span></span><br><span class="line">    COL_B </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">Table</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这么一改时间由<code>1.4s</code>缩短至<code>0.1s</code>。</p>
<p>原来一条SQL查询需要<code>3s</code>，优化之后变成了两个<code>0.1s</code>的SQL。</p></div></div></div>


]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
        <tag>优化查询</tag>
      </tags>
  </entry>
  <entry>
    <title>spring.mvc.favicon.enabled为什么不起作用？</title>
    <url>/2019/09/05/spring.mvc.favicon.enabled%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>偶然发现不管我将spring.mvc.favicon.enabled设置成true还是false，系统表面上都没有什么变化。favicon该显示还是显示。</p>
<p>那么这个配置究竟有什么用呢？</p>
<a id="more"></a>

<p>我在github的<a href="https://github.com/spring-projects/spring-boot/issues/17925" target="_blank" rel="noopener">issue</a>找到了答案。</p>
<blockquote>
<p>It only disables serving a favicon.ico from the root of the classpath. A favicon.ico that’s placed in one of the static resource locations will still be served.</p>
</blockquote>
<p>也就是说将<code>spring.mvc.favicon.enabled</code>设置成<code>false</code>，只是让<code>classpath</code>下的<code>favicon</code>图标不能用。而<code>static</code>下的<code>favicon</code>仍然可以用。</p>
<p><code>WebMvcAutoConfiguration</code>的<code>FaviconConfiguration</code>也可以验证这一点。</p>
<p>favicon的请求是由浏览器发起的，所以如果要禁用需要让系统不再请求这个图标。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java书籍阅读记录</title>
    <url>/2019/09/04/Java%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>有些书值得二刷，有些书第一刷都觉得浪费时间。记录下最近看的书，以前看的记不起就暂时不列了，后面如果再次二刷到再记录。</p>
<p><strong>代码质量</strong><br>这些书算是近期收获最大的，毕竟提高代码质量不是一蹴而就的，这些肯定还会二刷。</p>
<ol>
<li><code>敏捷软件开发：原则、模式与实践</code><br>这本书讲了面向对象的设计原则、部分设计模式，我们经常听到的单一职责，开放封闭，里氏替换等等，里面都有具体介绍和小实例。</li>
<li><code>代码整洁之道</code><br>这本书也很厉害，非常全面地介绍了怎么写好整洁的代码。连注释盖怎么写都有整整一章介绍，当然好代码是不需要注释的。</li>
<li><code>重构：改善既有的代码设计</code><br>短小精悍</li>
<li><code>测试驱动开发</code><br>用例子告诉你什么叫TDD</li>
<li><code>重构与模式</code>（待看）</li>
<li><code>Head first 设计模式</code><br>讲得很清楚，但是并不全</li>
<li><code>Effective Java</code></li>
<li><code>领域驱动设计：软件核心复杂性应对之道</code></li>
<li><code>实现领域驱动设计</code></li>
</ol>
<p><strong>Zookeeper</strong></p>
<ol>
<li><code>从Paxos到Zookeeper  分布式一致性原理与实践</code><br>由于之前没怎么了解过Zookeeper，看到这本书就感觉。哇！太厉害了。想了解Paxos的也可以看，都知道这个协议很复杂，但是这本书真的能让你了解到Paxos。</li>
</ol>
<p><strong>算法相关</strong><br>LeetCode刷刷题也可以学到一些思路</p>
<ol>
<li><code>算法</code><br>适合入门，内容真的不多</li>
<li><code>算法导论</code><br>这个当初买了实体书，可以说非常难啃了，所以我就当买了就看了吧。因为需要大量的数学知识，数学我都还给老师了。</li>
<li><code>编程珠玑</code><br>因为BitMap去看的，也就看了BitMap</li>
</ol>
<p><strong>Java</strong></p>
<ol>
<li><code>Java编程思想</code><br>买了就等于看了系列，书很厚当初看了一半，现在又没有去看的理由。</li>
<li><code>Java并发编程实战</code></li>
<li><code>Java性能优化权威指南</code></li>
<li><code>深入理解Java虚拟机</code></li>
</ol>
<p><strong>Mysql</strong><br>有时间可以看看Mysql文档，比较详细了。</p>
<ol>
<li><code>高性能Mysql</code></li>
<li><code>MySQL技术内幕：InnoDB存储引擎</code><br>快速浏览了第6章，相对于我的预期稍微有点失望，有些内容就完全是照搬官方文档。</li>
</ol>
<p><strong>Tomcat</strong></p>
<ol>
<li><code>深入剖析Tomcat</code><br>当初看的时候感觉，哇！厉害了！现在完全记不起讲啥了。</li>
</ol>
<p><strong>Spring</strong><br>Spring相关的文档就可以了吧</p>
<ol>
<li><code>Spring技术内幕</code><br>买了实体书，但是真的不适合我</li>
<li><code>Spring Boot揭秘</code><br>我觉得不行</li>
<li><code>Spring Cloud微服务架构开发实战</code><br>感觉什么都讲了，也感觉什么都没讲。不如自己看博客，文档</li>
<li><code>Spring实战</code><br>这个好像还可以，很久之前看过</li>
<li><code>精通Spring 4.x ――企业应用开发实战</code><br>同上</li>
</ol>
<p><strong>计算机网络</strong></p>
<ol>
<li><p><code>图解HTTP</code></p>
</li>
<li><p><code>计算机网络(第7版)-谢希仁</code></p>
<p>之前上学时候的课本，全忘了。现在重新看感觉挺不错。</p>
</li>
<li><p><code>TCP/IP详解 卷1</code></p>
<p>说实话看完上面这本，我在看这本感觉看不太下去。就看了前面一点点，我觉得也并不详细呀。</p>
</li>
</ol>
<p><strong>安全</strong></p>
<ol>
<li><p><code>白帽子讲Web安全</code></p>
<p>久闻大名，我看起来感觉十分的枯燥。</p>
</li>
</ol>
<p><strong>其他</strong></p>
<ol>
<li><code>代码大全</code><br>现在看起来觉得很枯燥，就看了一两章，以后再看</li>
<li><code>大型网站系统与Java中间件实践</code></li>
<li><code>Netty实战</code><br>好像看过两遍，但是我现在还是忘了看了啥。</li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>Java</category>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot注解之@ConditionalOnProperty</title>
    <url>/2019/09/04/SpringBoot%E6%B3%A8%E8%A7%A3%E4%B9%8B@ConditionalOnProperty/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>,</span><br><span class="line">				matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>当配置文件中<strong>没有</strong><code>spring.mvc.favicon.enabled</code>时，由于<code>matchIfMissing = true</code><strong>，属于条件</strong>匹配**。</p>
</li>
<li><p>当配置文件中<strong>有</strong><code>spring.mvc.favicon.enabled</code>时，此时配合<code>havingValue</code>，如下表。<code>havingValue</code>默认为<code>“”</code>，<code>spring.mvc.favicon.enabled=true</code>时属于条件<strong>匹配</strong>(yes)， <code>spring.mvc.favicon.enabled=false</code>时属于条件<strong>不匹配</strong>(no)</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Property Value</th>
<th>havingValue=””</th>
<th>havingValue=”true”</th>
<th>havingValue=”false”</th>
<th>havingValue=”foo”</th>
</tr>
</thead>
<tbody><tr>
<td>“true”</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td>“false”</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>“foo”</td>
<td>yes</td>
<td>no</td>
<td>no</td>
<td>yes</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>这才是正确地初始化只有一个元素的HashMap的方式</title>
    <url>/2019/09/04/%E8%BF%99%E6%89%8D%E6%98%AF%E6%AD%A3%E7%A1%AE%E5%9C%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84HashMap%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>有时候我们需要一个只放一个元素的Map。 可能一开始是这样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>上面这种写法相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">1</span>, <span class="number">0.75f</span>);</span><br></pre></td></tr></table></figure>

<p>这种写法正确吗？</p>
<a id="more"></a>

<p>我们知道<code>threshold = capacity * loadFactor</code></p>
<p>让我们看看<code>HashMap中的resize方法</code>的这部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">    newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?(<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">threshold = newThr;</span><br></pre></td></tr></table></figure>
<p>所以上面这种写法，在putVal开始的时候会调用resize()，导致threshold ==0（1*0.75强转int），然后在putVal的结束的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">    resize();</span><br></pre></td></tr></table></figure>
<p>1 &gt; 0 ，所以会再次调用resize()，这样Map的这个table长度就变成2了，但是Map此时是只有一个元素的。<br>但是，用这种方式就没问题了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">1</span>, <span class="number">1</span>.f);</span><br></pre></td></tr></table></figure>
<p>当然，有时候可以用<code>Collections.singletonMap</code>(一个不可变的Map，只包含一个Key和一个Value)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么修改SVN后Spring Cloud Config失效了？</title>
    <url>/2019/08/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BF%AE%E6%94%B9SVN%E5%90%8ESpringCloudConfig%E5%A4%B1%E6%95%88%E4%BA%86/</url>
    <content><![CDATA[<p><code>spring.cloud.config.server.svn.uri</code>修改成<code>新的SVN地址</code>之后，访问配置中心获得的配置还是<code>修改前SVN</code>的。</p>
<p>在我百思不得其姐的时候，我看到了配置中<code>spring.cloud.config.server.svn.basedir</code>指定了一个服务器上的目录。</p>
<p>于是，我上服务器看了看<code>spring.cloud.config.server.svn.basedir</code>指定的目录有什么。</p>
<p>果然跟我猜测的一样，这个目录其实就是SVN上Check out下来的文件。平时我们在自己电脑上换SVN的时候都会<code>relocate</code>一下，但是Spring Cloud Config没有<code>relocate</code>。</p>
<p>所以，解决办法就是：</p>
<ol>
<li>手动<code>relocate</code> <code>spring.cloud.config.server.svn.basedir</code>指定的目录。</li>
<li>直接删除<code>spring.cloud.config.server.svn.basedir</code>指定的目录。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Spring Data Jpa使用@Query分页查询的问题</title>
    <url>/2019/08/20/%E5%85%B3%E4%BA%8ESpringDataJpa%E4%BD%BF%E7%94%A8@Query%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>原本没有想过要用@Query来查询的，毕竟JpaRepository提供的方法已经基本够用了。但是今天这个sql比较特殊可能要用正则匹配，然后看到了ExampleMatcher里的StringMatcher：</p>
<figure class="highlight java"><figcaption><span>StringMatcher.class</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> StringMatcher &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Store specific default.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DEFAULT,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Matches the exact string</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EXACT,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Matches string starting with pattern</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        STARTING,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Matches string ending with pattern</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ENDING,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Matches string containing pattern</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CONTAINING,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Treats strings as regular expression patterns</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        REGEX;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有正则REGEX，我以为这样就很好办了（讲道理sql用正则真的非常慢）。然而事情并不是这么简单。因为会报一个异常<code>Unsupported StringMatcher REGEX</code>。<br>上面的枚举时有REGEX，但是QueryByExamplePredicateBuilder类的这部分代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (exampleAccessor.getStringMatcherForPath(currentPath)) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> DEFAULT:</span><br><span class="line">                    <span class="keyword">case</span> EXACT:</span><br><span class="line">                        predicates.add(cb.equal(expression, attributeValue));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> CONTAINING:</span><br><span class="line">                        predicates.add(cb.like(expression, <span class="string">"%"</span> + attributeValue + <span class="string">"%"</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> STARTING:</span><br><span class="line">                        predicates.add(cb.like(expression, attributeValue + <span class="string">"%"</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> ENDING:</span><br><span class="line">                        predicates.add(cb.like(expression, <span class="string">"%"</span> + attributeValue));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                                <span class="string">"Unsupported StringMatcher "</span> + exampleAccessor.getStringMatcherForPath(currentPath));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到并没有REGEX，这是什么骚操作？</p>
<p>所以，我打算使用@Query。在官网文档找到如下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM USERS WHERE LASTNAME = ?1"</span>,</span><br><span class="line">    countQuery = <span class="string">"SELECT count(*) FROM USERS WHERE LASTNAME = ?1"</span>,</span><br><span class="line">    nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">  <span class="function">Page&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照示例写好，然后一运行。非常好，报错了<code>Cannot use native queries with dynamic sorting and/or pagination in method...</code><br>看下报错地方的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NativeJpaQuery</span><span class="params">(JpaQueryMethod method, EntityManager em, String queryString,</span></span></span><br><span class="line"><span class="function"><span class="params">            EvaluationContextProvider evaluationContextProvider, SpelExpressionParser parser)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(method, em, queryString, evaluationContextProvider, parser);</span><br><span class="line">    </span><br><span class="line">        Parameters&lt;?, ?&gt; parameters = method.getParameters();</span><br><span class="line">        <span class="keyword">boolean</span> hasPagingOrSortingParameter = parameters.hasPageableParameter() || parameters.hasSortParameter();</span><br><span class="line">        <span class="keyword">boolean</span> containsPageableOrSortInQueryExpression = queryString.contains(<span class="string">"#pageable"</span>)</span><br><span class="line">                || queryString.contains(<span class="string">"#sort"</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (hasPagingOrSortingParameter &amp;&amp; !containsPageableOrSortInQueryExpression) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidJpaQueryMethodException(</span><br><span class="line">                    <span class="string">"Cannot use native queries with dynamic sorting and/or pagination in method "</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这段代码里看出，报异常的原因时我们的sql里没有<code>#pageable</code><br>所以，加上这个就好了，修改后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM USERS WHERE LASTNAME = ?1 \n#pageable\n"</span>,</span><br><span class="line">    countQuery = <span class="string">"SELECT count(*) FROM USERS WHERE LASTNAME = ?1"</span>,</span><br><span class="line">    nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">  <span class="function">Page&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Data Jpa</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Data Jpa</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8漏洞-使用Collectors.toMap时，value为null报空指针异常</title>
    <url>/2019/08/19/Java8%E6%BC%8F%E6%B4%9E%E4%BD%BF%E7%94%A8CollectorstoMap%E6%97%B6value%E4%B8%BAnull%E6%8A%A5%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>罪魁祸首就是<code>HashMap的merge</code>方法了，它的第一行就是这个：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br></pre></td></tr></table></figure>
<p>谁调<code>merge</code>了？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, U, M extends Map&lt;K, U&gt;&gt;</span><br><span class="line">    Collector&lt;T, ?, M&gt; toMap(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; keyMapper,</span><br><span class="line">                                Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; valueMapper,</span><br><span class="line">                                BinaryOperator&lt;U&gt; mergeFunction,</span><br><span class="line">                                Supplier&lt;M&gt; mapSupplier) &#123;</span><br><span class="line">        BiConsumer&lt;M, T&gt; accumulator</span><br><span class="line">                = (map, element) -&gt; map.merge(keyMapper.apply(element),</span><br><span class="line">                                              valueMapper.apply(element), mergeFunction);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CollectorImpl&lt;&gt;(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么怎么解决呢？<br>既然时merge方法造成的，那就不调merge方法。<br>我们用自己定义的<code>accumulator</code>,用Stream的另一个collect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">R <span class="title">collect</span><span class="params">(Supplier&lt;R&gt; supplier,</span></span></span><br><span class="line"><span class="function"><span class="params">              BiConsumer&lt;R, ? <span class="keyword">super</span> T&gt; accumulator,</span></span></span><br><span class="line"><span class="function"><span class="params">              BiConsumer&lt;R, R&gt; combiner)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这个方法上面的注释写了一段这个, 前两个参数干什么用的就很清楚了，第三个参数时并行计算用来组合结果的，所以用HashMap的putAll就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">R result = supplier.get();</span><br><span class="line"><span class="keyword">for</span> (T element : <span class="keyword">this</span> stream)</span><br><span class="line">    accumulator.accept(result, element);</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p>所以解决问题的代码大概就是这样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">params.stream().collect(LinkedHashMap::<span class="keyword">new</span>, (m, v) -&gt; m.put(v.getParam(), v.getParamValue()), LinkedHashMap::putAll);</span><br></pre></td></tr></table></figure>

<p>当然，升级JDK也能解决这个问题。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache VFS移动FTP文件太慢原因及解决办法</title>
    <url>/2019/08/12/ApacheVFS%E7%A7%BB%E5%8A%A8FTP%E6%96%87%E4%BB%B6%E5%A4%AA%E6%85%A2%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>项目中我们使用Apache VFS操作FTP服务器上得文件。但是最近发现，如果一个文件夹里面的文件特别多，移动这个文件夹里的文件就会特别慢。</p>
<p>于是，我就找了找原因。</p>
<a id="more"></a>

<p><code>Apache VFS</code>移动文件是通过使用<code>FileSystemManager的resolveFile方法</code>获得<code>FileObject</code>，然后调用其<code>moveTo</code>方法来达到FTP文件移动的目的。</p>
<p>我们使用的<code>FileSystemManager</code>是默认的<code>DefaultFileSystemManager</code>，在操作FTP文件的时候会调用<code>AbstractOriginatingFileProvider</code>的<code>findFile</code>方法。</p>
<figure class="highlight java"><figcaption><span>AbstractOriginatingFileProvider.findFile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> FileObject <span class="title">findFile</span><span class="params">(<span class="keyword">final</span> FileName name, <span class="keyword">final</span> FileSystemOptions fileSystemOptions)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="comment">// Check in the cache for the file system</span></span><br><span class="line">    <span class="keyword">final</span> FileName rootName = getContext().getFileSystemManager().resolveName(name, FileName.ROOT_PATH);</span><br><span class="line">    <span class="keyword">final</span> FileSystem fs = getFileSystem(rootName, fileSystemOptions);</span><br><span class="line">    <span class="comment">// Locate the file</span></span><br><span class="line">    <span class="comment">// return fs.resolveFile(name.getPath());</span></span><br><span class="line">    <span class="keyword">return</span> fs.resolveFile(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里可以看到会使用<code>FileName</code>获取到一个<code>FileSystem</code>，然后调用FlieSystem的resolveFile方法。这个FileName是从FTP的uri中解析出来的。FTP的uri（例如：<a href="ftp://username:password@host" target="_blank" rel="noopener">ftp://username:password@host</a>:port/）如果username，password，host，port相同，这里取到的<code>FileSystem是同一个</code>。这里涉及到两个重要的类。</p>
<div class="tabs" id="class"><ul class="nav-tabs"><li class="tab active"><a href="#class-1">FtpFileObject</a></li><li class="tab"><a href="#class-2">FtpFileSystem</a></li></ul><div class="tab-content"><div class="tab-pane active" id="class-1"><figure class="highlight java"><figcaption><span>FtpFileObject.class</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">FtpFileObject</span><span class="params">(<span class="keyword">final</span> AbstractFileName name, <span class="keyword">final</span> FtpFileSystem fileSystem, <span class="keyword">final</span> FileName rootName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, fileSystem);</span><br><span class="line">    <span class="keyword">final</span> String relPath = UriParser.decode(rootName.getRelativeName(name));</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"."</span>.equals(relPath)) &#123;</span><br><span class="line">        <span class="comment">// do not use the "." as path against the ftp-server</span></span><br><span class="line">        <span class="comment">// e.g. the uu.net ftp-server do a recursive listing then</span></span><br><span class="line">        <span class="comment">// this.relPath = UriParser.decode(rootName.getPath());</span></span><br><span class="line">        <span class="comment">// this.relPath = ".";</span></span><br><span class="line">        <span class="keyword">this</span>.relPath = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.relPath = relPath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从构造函数可以看出，并没有做太多事情，而且最关键的属性没有初始化
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private FTPFile fileInfo;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="class-2"><figure class="highlight java"><figcaption><span>FtpFileSystem.class</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putClient</span><span class="params">(<span class="keyword">final</span> FtpClient client)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Save client for reuse if none is idle.</span></span><br><span class="line">    <span class="keyword">if</span> (!idleClient.compareAndSet(<span class="keyword">null</span>, client)) &#123;</span><br><span class="line">        <span class="comment">// An idle client is already present so close the connection.</span></span><br><span class="line">        closeConnection(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> FtpClient <span class="title">getClient</span><span class="params">()</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    FtpClient client = idleClient.getAndSet(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (client == <span class="keyword">null</span> || !client.isConnected()) &#123;</span><br><span class="line">        client = createWrapper();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line">这个类就是对`FtpClient`进行了封装，操作FTP文件时会先调用`getClient()`，操作完成后再调用`putClient`。这个类使用`AtomicReference`来保持他只持有`一个`FtpClient，每次get的时候会置`<span class="keyword">null</span>`，如果有`其他的`线程get，那么会创建一个`新的client`返回。在put的时候，如果这个类已经持有一个client了，就把put进来的client关掉。</span><br></pre></td></tr></table></figure></div></div></div>



<p>既然是移动文件太慢，那就看看<code>AbstractFileObject</code>的<code>moveTo</code>方法</p>
<figure class="highlight java"><figcaption><span>AbstractFileObject.class</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(<span class="keyword">final</span> FileObject destFile)</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (canRenameTo(destFile)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!getParent().isWriteable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/rename-parent-read-only.error"</span>, getName(),getParent().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isWriteable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/rename-read-only.error"</span>, getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (destFile.exists() &amp;&amp; !isSameFile(destFile)) &#123;</span><br><span class="line">        destFile.deleteAll();</span><br><span class="line">        <span class="comment">// throw new FileSystemException("vfs.provider/rename-dest-exists.error", destFile.getName());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (canRenameTo(destFile)) &#123;</span><br><span class="line">        <span class="comment">// issue rename on same filesystem</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            attach();</span><br><span class="line">            <span class="comment">// remember type to avoid attach</span></span><br><span class="line">            <span class="keyword">final</span> FileType srcType = getType();</span><br><span class="line">            doRename(destFile); </span><br><span class="line">            FileObjectUtils.getAbstractFileObject(destFile).handleCreate(srcType);</span><br><span class="line">            destFile.close(); <span class="comment">// now the destFile is no longer imaginary. force reattach.</span></span><br><span class="line">            handleDelete(); <span class="comment">// fire delete-events. This file-object (src) is like deleted.</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> RuntimeException re) &#123;</span><br><span class="line">                <span class="keyword">throw</span> re;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception exc) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/rename.error"</span>, exc, getName(), destFile.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// different fs - do the copy/delete stuff</span></span><br><span class="line">            destFile.copyFrom(<span class="keyword">this</span>, Selectors.SELECT_SELF);</span><br><span class="line">            <span class="keyword">if</span> ((destFile.getType().hasContent()</span><br><span class="line">                    &amp;&amp; destFile.getFileSystem().hasCapability(Capability.SET_LAST_MODIFIED_FILE)</span><br><span class="line">                    || destFile.getType().hasChildren()</span><br><span class="line">                            &amp;&amp; destFile.getFileSystem().hasCapability(Capability.SET_LAST_MODIFIED_FOLDER))</span><br><span class="line">                    &amp;&amp; fs.hasCapability(Capability.GET_LAST_MODIFIED)) &#123;</span><br><span class="line">            destFile.getContent().setLastModifiedTime(<span class="keyword">this</span>.getContent().getLastModifiedTime());</span><br><span class="line">        &#125;</span><br><span class="line">        deleteSelf();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法也不复杂，移动文件有两种情况</p>
<ol>
<li>源文件和目标文件在同一个filesystem，使用<code>doRename</code></li>
<li>源文件和目标文件不在同一个filesystem，使用<code>copyFrom</code></li>
</ol>
<p>前面我们已经知道username，password，host，port相同的时候取到的就是同一个filesystem，所以这里判断源文件和目标文件是否在同一个filesystem也很简单，直接用==判断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRenameTo</span><span class="params">(<span class="keyword">final</span> FileObject newfile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs == newfile.getFileSystem();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>doRename</code>的实现原理就是调用<code>FTPClient的rename</code>方法，而这个<code>FTPClient</code>是通过<code>FTP协议</code>的<code>RNFR</code>和<code>RNTO</code>指令实现的。 <code>copyFrom</code>则是通过<code>FTP协议</code>中的<code>RETR</code>和<code>STOR</code>命令来下载上传实现的。</p>
<p>目前来看，文件移动都没什么问题，然而项目中导致移动文件慢的竟然是这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getType() != FileType.IMAGINARY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不管源文件与目标文件<code>是否在同一个文件系统</code>都会对源文件和目标文件执行这个<code>getType()</code>方法。这个方法最终会调用<code>FtpFileObject的doGetType()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> FileType <span class="title">doGetType</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// VFS-210</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getFileSystem()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            getInfo(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo == UNKNOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileType.IMAGINARY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileType.FOLDER;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo.isFile()) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileType.FILE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo.isSymbolicLink()) &#123;</span><br><span class="line">            <span class="keyword">final</span> FileObject linkDest = getLinkDestination();</span><br><span class="line">            <span class="comment">// VFS-437: We need to check if the symbolic link links back to the symbolic link itself</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isCircular(linkDest)) &#123;</span><br><span class="line">                <span class="comment">// If the symbolic link links back to itself, treat it as an imaginary file to prevent following</span></span><br><span class="line">                <span class="comment">// this link. If the user tries to access the link as a file or directory, the user will end up with</span></span><br><span class="line">                <span class="comment">// a FileSystemException warning that the file cannot be accessed. This is to prevent the infinite</span></span><br><span class="line">                <span class="comment">// call back to doGetType() to prevent the StackOverFlow</span></span><br><span class="line">                <span class="keyword">return</span> FileType.IMAGINARY;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> linkDest.getType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider.ftp/get-type.error"</span>, getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面已经说过，FtpFileObject的fileInfo没有初始化，所以这里会执行getInfo方法，而getInfo方法又会调用<code>getChildFile</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> FTPFile <span class="title">getChildFile</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="keyword">boolean</span> flush)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * If we should flush cached children, clear our children map unless we're in the middle of a refresh in which</span></span><br><span class="line"><span class="comment">    * case we've just recently refreshed our children. No need to do it again when our children are refresh()ed,</span></span><br><span class="line"><span class="comment">    * calling getChildFile() for themselves from within getInfo(). See getChildren().</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (flush &amp;&amp; !inRefresh) &#123;</span><br><span class="line">        children = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// List the children of this file</span></span><br><span class="line">    doGetChildren();</span><br><span class="line">    <span class="comment">// VFS-210</span></span><br><span class="line">    <span class="keyword">if</span> (children == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Look for the requested child</span></span><br><span class="line">    <span class="keyword">final</span> FTPFile ftpFile = children.get(name);</span><br><span class="line">    <span class="keyword">return</span> ftpFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是这里，我们可以看到，获取某个文件时，会先获取<code>父路径的所有子文件</code>，然后从子文件中获取你要的那个文件。 如果你要的那个文件在一个文件非常多的目录里，而且<code>关闭了缓存</code>，你每获取这个目录的一个文件就要把目录里的所有文件列一次。<br>FTPClient是可以通过listFiles列出单个文件的，所以解决办法就是</p>
<ol>
<li>使用缓存</li>
<li>不要用VFS了，直接用FTPClient的rename方法，直接起飞（仅限于同一个FTPClient，如果时跨文件服务器的需要FTPClient的上传下载实现）。<br>下面附上解决办法2的代码。<br>代码很简单，大多数都是解析URI的，全塞一个类里了，如果真要用建议把一些代码拆出来。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPFile;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.FileSystemException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.FileSystemOptions;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.UriParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.ftp.FtpClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.ftp.FtpFileSystemConfigBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.util.Cryptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.util.CryptorFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(FtpUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Auth, AtomicReference&lt;FTPClient&gt;&gt; clients = Maps.newConcurrentMap();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">move</span><span class="params">(String src, String tar)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FtpPath srcFtpPath = parse(src);</span><br><span class="line">        FtpPath tarFtpPath = parse(tar);</span><br><span class="line">        <span class="keyword">if</span> (!srcFtpPath.auth.equals(tarFtpPath.auth)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"源目录和目标目录的ftp服务器连接信息不一致"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FTPClient ftpClient = getFTPClient(srcFtpPath.auth);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ftpClient.rename(srcFtpPath.path, tarFtpPath.path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            closeConnection(ftpClient);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putFTPClient(srcFtpPath.auth, ftpClient);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FtpPath <span class="title">parse</span><span class="params">(String uri)</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">        FtpPath ftpPath = <span class="keyword">new</span> FtpPath();</span><br><span class="line">        StringBuilder name = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        UriParser.extractScheme(uri, name);</span><br><span class="line">        <span class="comment">// Expecting "//"</span></span><br><span class="line">        <span class="keyword">if</span> (name.length() &lt; <span class="number">2</span> || name.charAt(<span class="number">0</span>) != <span class="string">'/'</span> || name.charAt(<span class="number">1</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-double-slashes.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">        name.delete(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">     <span class="comment">// Extract userinfo, and split into username and password</span></span><br><span class="line">        <span class="keyword">final</span> String userInfo = extractUserInfo(name);</span><br><span class="line">        <span class="keyword">final</span> String userName;</span><br><span class="line">        <span class="keyword">final</span> String password;</span><br><span class="line">        <span class="keyword">if</span> (userInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> idx = userInfo.indexOf(<span class="string">':'</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx == -<span class="number">1</span>) &#123;</span><br><span class="line">                userName = userInfo;</span><br><span class="line">                password = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                userName = userInfo.substring(<span class="number">0</span>, idx);</span><br><span class="line">                password = userInfo.substring(idx + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userName = <span class="keyword">null</span>;</span><br><span class="line">            password = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String u = UriParser.decode(userName);</span><br><span class="line">        String p = UriParser.decode(password);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.startsWith(<span class="string">"&#123;"</span>) &amp;&amp; p.endsWith(<span class="string">"&#125;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> Cryptor cryptor = CryptorFactory.getCryptor();</span><br><span class="line">                p = cryptor.decrypt(p.substring(<span class="number">1</span>, p.length() - <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"Unable to decrypt password"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ftpPath.auth.username = u == <span class="keyword">null</span> ? <span class="keyword">null</span> : u.toCharArray();</span><br><span class="line">        ftpPath.auth.password = p == <span class="keyword">null</span> ? <span class="keyword">null</span> : p.toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Extract hostname, and normalise (lowercase)</span></span><br><span class="line">        <span class="keyword">final</span> String hostName = extractHostName(name);</span><br><span class="line">        <span class="keyword">if</span> (hostName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-hostname.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">        ftpPath.auth.host = hostName.toLowerCase();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Extract port</span></span><br><span class="line">        ftpPath.auth.port = extractPort(name, uri);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Expecting '/' or empty name</span></span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt; <span class="number">0</span> &amp;&amp; name.charAt(<span class="number">0</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-hostname-path-sep.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ftpPath.path = name.toString();</span><br><span class="line">        <span class="keyword">return</span> ftpPath;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extracts the user info from a URI.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name string buffer with the "scheme://" part has been removed already. Will be modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the user information up to the '@' or null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">extractUserInfo</span><span class="params">(<span class="keyword">final</span> StringBuilder name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxlen = name.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; pos &lt; maxlen; pos++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">char</span> ch = name.charAt(pos);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'@'</span>) &#123;</span><br><span class="line">                <span class="comment">// Found the end of the user info</span></span><br><span class="line">                <span class="keyword">final</span> String userInfo = name.substring(<span class="number">0</span>, pos);</span><br><span class="line">                name.delete(<span class="number">0</span>, pos + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> userInfo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'/'</span> || ch == <span class="string">'?'</span>) &#123;</span><br><span class="line">                <span class="comment">// Not allowed in user info</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Not found</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extracts the hostname from a URI.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name string buffer with the "scheme://[userinfo@]" part has been removed already. Will be modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the host name or null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">extractHostName</span><span class="params">(<span class="keyword">final</span> StringBuilder name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxlen = name.length();</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; pos &lt; maxlen; pos++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">char</span> ch = name.charAt(pos);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'/'</span> || ch == <span class="string">';'</span> || ch == <span class="string">'?'</span> || ch == <span class="string">':'</span> || ch == <span class="string">'@'</span> || ch == <span class="string">'&amp;'</span> || ch == <span class="string">'='</span> || ch == <span class="string">'+'</span></span><br><span class="line">                    || ch == <span class="string">'$'</span> || ch == <span class="string">','</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> String hostname = name.substring(<span class="number">0</span>, pos);</span><br><span class="line">        name.delete(<span class="number">0</span>, pos);</span><br><span class="line">        <span class="keyword">return</span> hostname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extracts the port from a URI.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name string buffer with the "scheme://[userinfo@]hostname" part has been removed already. Will be</span></span><br><span class="line"><span class="comment">     *            modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri full URI for error reporting.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The port, or -1 if the URI does not contain a port.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileSystemException if URI is malformed.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NumberFormatException if port number cannot be parsed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">extractPort</span><span class="params">(<span class="keyword">final</span> StringBuilder name, <span class="keyword">final</span> String uri)</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &lt; <span class="number">1</span> || name.charAt(<span class="number">0</span>) != <span class="string">':'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxlen = name.length();</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; pos &lt; maxlen; pos++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">char</span> ch = name.charAt(pos);</span><br><span class="line">            <span class="keyword">if</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> String port = name.substring(<span class="number">1</span>, pos);</span><br><span class="line">        name.delete(<span class="number">0</span>, pos);</span><br><span class="line">        <span class="keyword">if</span> (port.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-port.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(port);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> FTPClient <span class="title">getFTPClient</span><span class="params">(Auth key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AtomicReference&lt;FTPClient&gt; refClient = clients.getOrDefault(key, <span class="keyword">new</span> AtomicReference&lt;FTPClient&gt;(<span class="keyword">null</span>));</span><br><span class="line">        </span><br><span class="line">        FTPClient client = refClient.getAndSet(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span> || !client.isConnected()) &#123;</span><br><span class="line">            client = createClient(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> FTPClient <span class="title">createClient</span><span class="params">(Auth key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FtpFileSystemConfigBuilder builder = FtpFileSystemConfigBuilder.getInstance();</span><br><span class="line">        FileSystemOptions options = <span class="keyword">new</span> FileSystemOptions();</span><br><span class="line">        builder.setControlEncoding(options, <span class="string">"UTF-8"</span>);</span><br><span class="line">        builder.setServerLanguageCode(options, <span class="string">"zh"</span>);</span><br><span class="line">        builder.setPassiveMode(options, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> FtpClientFactory.createConnection(key.host, key.port, key.username, key.password, <span class="keyword">null</span>, options);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putFTPClient</span><span class="params">(Auth key, FTPClient client)</span> </span>&#123;</span><br><span class="line">        AtomicReference&lt;FTPClient&gt; refClient = clients.getOrDefault(key, <span class="keyword">new</span> AtomicReference&lt;FTPClient&gt;(<span class="keyword">null</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!refClient.compareAndSet(<span class="keyword">null</span>, client)) &#123;</span><br><span class="line">            closeConnection(client);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">(FTPClient client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (client.isConnected()) &#123;</span><br><span class="line">                client.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Auth</span> </span>&#123;</span><br><span class="line">        String host;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">char</span>[] username;</span><br><span class="line">        <span class="keyword">char</span>[] password;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Auth) &#123;</span><br><span class="line">                Auth k = (Auth) obj;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.host.equals(k.host) &amp;&amp; <span class="keyword">this</span>.port == k.port &amp;&amp; Arrays.equals(<span class="keyword">this</span>.username, k.username)</span><br><span class="line">                        &amp;&amp; Arrays.equals(<span class="keyword">this</span>.password, k.password);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> h = host.hashCode();</span><br><span class="line">            h = <span class="number">31</span> * h + port;</span><br><span class="line">            h = <span class="number">31</span> * h + username.hashCode();</span><br><span class="line">            h = <span class="number">31</span> * h + password.hashCode();</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpPath</span> </span>&#123;</span><br><span class="line">        Auth auth = <span class="keyword">new</span> Auth();</span><br><span class="line">        String path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>FTP</tag>
        <tag>Apache VFS</tag>
      </tags>
  </entry>
  <entry>
    <title>同一个Controller的@RequestMapping指向同一个value会发生什么？</title>
    <url>/2019/08/08/%E5%90%8C%E4%B8%80%E4%B8%AAController%E7%9A%84@RequestMapping%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AAvalue%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>首先，是如下这种写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/a"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"a"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/a"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"a"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个应该都知道了，肯定会报错的</p>
<blockquote>
<p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘requestMappingHandlerMapping’ defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: <code>Ambiguous mapping</code>.</p>
</blockquote>
<p>那是不是value的值一定不能一样呢，答案是否定的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/a"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"a"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/a"</span>, method = RequestMethod.HEAD)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().header(<span class="string">"b"</span>, <span class="string">"b"</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/a"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"c"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="/2019/08/08/%E5%90%8C%E4%B8%80%E4%B8%AAController%E7%9A%84@RequestMapping%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AAvalue%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/1.png" class="">
<img data-src="/2019/08/08/%E5%90%8C%E4%B8%80%E4%B8%AAController%E7%9A%84@RequestMapping%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AAvalue%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/2.png" class="">
<img data-src="/2019/08/08/%E5%90%8C%E4%B8%80%E4%B8%AAController%E7%9A%84@RequestMapping%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AAvalue%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/3.png" class="">
<p>从结果可以看出，只要指定不同method就行。而且会优先匹配对应的方法，没有找到匹配的才会执行没有指定method的@RequestMapping对应方法</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Select2在Bootstrap模态框无法获得焦点问题的解决办法</title>
    <url>/2019/07/22/%E5%85%B3%E4%BA%8ESelect2%E5%9C%A8Bootstrap%E6%A8%A1%E6%80%81%E6%A1%86%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E7%84%A6%E7%82%B9%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>虽然，我比较少写前端的东西，但是遇到这种问题我的直觉告诉我将input框的z-index设大应该就行了。然后，我的直觉错了，改了z-index并没有解决。</p>
<p>于是，我就在网上搜了搜，发现有一下两种解决办法：</p>
<ol>
<li>把页面中的 tabindex=”-1” 删掉</li>
<li>$.fn.modal.Constructor.prototype.enforceFocus = function() {};</li>
</ol>
<p>但是不太熟悉的人表示完全不知道说了啥，然后我在Select2官方文档中找到了<a href="https://stackoverflow.com/questions/18487056/select2-doesnt-work-when-embedded-in-a-bootstrap-modal/19574076#19574076" target="_blank" rel="noopener">解决办法</a>（由于官网之前的链接失效了，所以这附上Stack Overflow的）。</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"mySelect2"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#mySelect2'</span>).select2(&#123;</span></span><br><span class="line"><span class="javascript">        dropdownParent: $(<span class="string">'#myModal'</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>造成的原因也说明了，<code>bootstrap的模态框</code>会<code>窃取</code>模态框之外的<code>焦点</code>，而select2的下拉菜单是附在body元素（模态框之外）上的。 所以配置<code>dropdownParent</code>就行了，亲自试了一下确实有效。而且不一定指定模态框，指定form元素我也亲自试了没问题。</p>
<p>至于这个方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Do this before you initialize any of your modals</span></span><br><span class="line">$.fn.modal.Constructor.prototype.enforceFocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>一定要看清楚是在模态框初始化之前执行</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Select2</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign使用服务名调用微服务</title>
    <url>/2019/05/22/Feign%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%90%8D%E8%B0%83%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>在这之前都是使用@FeignClient，在@FeignClient中的name指定服务名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(</span><br><span class="line">    name = <span class="string">"file-upload-service"</span>,</span><br><span class="line">    configuration = FileUploadServiceClient.MultipartSupportConfig<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">FileUploadServiceClient</span> <span class="keyword">extends</span> <span class="title">IFileUploadServiceClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipartSupportConfig</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Encoder <span class="title">feignFormEncoder</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式有地方不能满足我的要求，于是我就采用了这种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Bank bank = Feign.builder().decoder(</span><br><span class="line">        <span class="keyword">new</span> AccountDecoder())</span><br><span class="line">        .target(Bank.class, "https://api.examplebank.com");</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始，我从github上Feign的示例看到使用服务名代替url的Host部分有个示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyService api = Feign.builder()</span><br><span class="line">          .client(RibbonClient.create())</span><br><span class="line">          .target(MyService.class, "https://myAppProd");</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>刚好我这项目也用到了Ribbon，但是在RibbonClient的介绍中看到了这个</p>
<blockquote>
<p>This integration relies on the Feign Target.url() being encoded like <a href="https://myAppProd" target="_blank" rel="noopener">https://myAppProd</a> where myAppProd is the ribbon client or loadbalancer name and myAppProd.ribbon.listOfServers configuration is set.</p>
</blockquote>
<p>这个意思是需要设置.ribbon.listOfServers，如果设置这个的话不还是得在配置文件中写IP和端口吗？我觉得不合理，然后查看spring cloud的文档，我看到了</p>
<blockquote><p>Eureka is a convenient way to abstract the discovery of remote servers so that you do not have to hard code their URLs in clients. However, if you prefer not to use Eureka, Ribbon and Feign also work. Suppose you have declared a <code>@RibbonClient</code> for “stores”, and Eureka is not in use (and not even on the classpath). The Ribbon client defaults to a configured server list. You can supply the configuration as follows:</p>
<p><strong>application.yml.</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stores:</span><br><span class="line">  ribbon:</span><br><span class="line">    listOfServers: example.com,google.com</span><br></pre></td></tr></table></figure>
<footer><strong>Spring Cloud 文档</strong><cite><a href="https://cloud.spring.io/spring-cloud-static/Greenwich.SR4/single/spring-cloud.html#spring-cloud-ribbon-without-eureka" target="_blank" rel="noopener">How to Use Ribbon Without Eureka</a></cite></footer></blockquote>

<p>不使用Eureka的时候才需要设置.ribbon.listOfServers，但是项目是使用Eureka的，应该不需要设置才对，但是不设置的话，用这个方式调用是不行的，根据服务名找不到服务。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">MyService api = Feign.builder()</span><br><span class="line">          .client(RibbonClient.create())</span><br><span class="line">          .target(MyService.class, "https://myAppProd");</span><br></pre></td></tr></table></figure>

<p>但是使用<code>RestTemplate</code>加上<code>@LoadBalanced</code>是没有问题的，通过debug源码，发现使用@LoadBalanced是有个地方会加载服务列表，但是使用Feign的RibbonClient不会。</p>
<p>因为使用<code>@FeignClient</code>的时候是可以找到服务的，说明Feign完全可以支持使用服务名调用，于是我查看Feign中Client的实现有哪些。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Client - feign</span><br><span class="line">--Default - feign.Client</span><br><span class="line">--LoadBalancerFeignClient - org.springframework.cloud.netflix.feign.ribbon</span><br><span class="line">--RibbonClient - feign.ribbon</span><br></pre></td></tr></table></figure>

<p>很好，有个LoadBalancerFeignClient，我猜使用这个就可以达到服务名调用，于是查看怎么实例化这个Client，一搜构造方法的调用就找到了这个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultFeignLoadBalancedConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Client <span class="title">feignClient</span><span class="params">(CachingSpringLoadBalancerFactory cachingFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              SpringClientFactory clientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoadBalancerFeignClient(<span class="keyword">new</span> Client.Default(<span class="keyword">null</span>, <span class="keyword">null</span>),</span><br><span class="line">                cachingFactory, clientFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这都实例化好了，所以直接注入就可以使用。</p>
<p>所以，最终解决方法就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Client feignClient;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestApi test= Feign.builder()</span><br><span class="line">                               .encoder(<span class="keyword">new</span> FormEncoder(<span class="keyword">new</span> JacksonEncoder()))</span><br><span class="line">                               .decoder(<span class="keyword">new</span> JacksonDecoder())</span><br><span class="line">                               .client(feignClient)</span><br><span class="line">                               .target(TestApi .class, "http://service-name/");</span><br><span class="line">    <span class="keyword">return</span> test.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Cloud</tag>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>Java文件下载文件名包含特殊字符处理</title>
    <url>/2019/04/02/Java%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%90%8D%E5%8C%85%E5%90%AB%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">            response.setContentType(<span class="string">"multipart/form-data"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>,</span><br><span class="line">                    <span class="string">"attachment;fileName*=UTF-8''"</span> + UriUtils.encode(fileName, <span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure>
<p>重点是<span class="label success">fileName*=UTF-8'' 和UriUtils.encode</span>，UriUtils使用的是spring包的<code>org.springframework.web.util.UriUtils</code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
