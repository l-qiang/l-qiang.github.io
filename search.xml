<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Tomcat日志截断</title>
    <url>/2020/01/22/Tomcat%E6%97%A5%E5%BF%97%E6%88%AA%E6%96%AD/</url>
    <content><![CDATA[<p>为了避免生产环境<code>Tomcat</code>的<code>catalina.out</code>越来越大，我们需要轮替<code>catalina.out</code>，那么我们该怎么做呢？</p>
<p>关于这个问题，我在<code>Tomcat</code>的<code>FAQ</code>中找到了答案。</p>
<a id="more"></a>

<blockquote><p>CATALINA_BASE/logs/catalina.out does not rotate. But it should not be an issue because nothing should be printing to standard output since you are using a logging package, right?</p>
<p>If you really must rotate catalina.out, here are some techniques you can use:</p>
<ol>
<li>If you are using jsvc 1.0.4 or later (from <a href="https://commons.apache.org/proper/commons-daemon/" target="_blank" rel="noopener">Apache Commons Daemon</a> project) to launch Tomcat, you can send SIGUSR1 signal to jsvc to get it to re-open its log files (<a href="https://issues.apache.org/jira/browse/DAEMON-95" target="_blank" rel="noopener">Jira Ticket</a>). You can couple this with ‘logrotate’ or your favorite log-rotation utility (including good-old ‘mv’) to re-name catalina.out at intervals and then get jsvc to re-open the original (catalina.out) file and continue writing to it.</li>
<li>Use ‘logrotate’ with the ‘copytruncate’ option. This allows you to externally rotate catalina.out without changing anything within Tomcat.</li>
<li>Modify bin/catalina.sh (or bin/catalina.bat) to pipe output from the JVM into a piped-logger such as <a href="https://linux.die.net/man/1/cronolog" target="_blank" rel="noopener">cronolog</a> or Apache httpd’s <a href="https://httpd.apache.org/docs/2.4/logs.html#piped" target="_blank" rel="noopener">rotatelogs</a> (note that the previous reference is for Apache httpd documentation and <em>is not applicable to Tomcat</em> – it merely illustrates the concept).<br>See also the patch in <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=53930" target="_blank" rel="noopener">Bug 53930, “Allow capture of catalina stdout/stderr to a command instead of just a file”</a>.</li>
</ol>
<footer><strong>Tomcat FAQ</strong><cite><a href="https://cwiki.apache.org/confluence/display/TOMCAT/Logging#Logging-Q10" target="_blank" rel="noopener">How do I rotate catalina.out?</a></cite></footer></blockquote>

<p>大概意思是<code>catalina.out</code>的轮替不应该是一个问题，因为你用了日志包的话没啥东西会打印到标准输出。但是你真的要轮替<code>catalina.out</code>有三种方式。</p>
<ol>
<li>使用jsvc 1.0.4 +</li>
<li>使用logrotate</li>
<li>使用cronolog或者rotatelogs</li>
</ol>
<p>我选择了第二种，因为第二种最简单，最常用。而且不需要改Tomcat的任何东西。最重要的是，我们的<code>Linux</code>服务器已经有logrotate（一般都有的）。</p>
<p>那么，我们该怎么做呢？很简单，只要做一件事就行了。</p>
<ol>
<li><p>切换到<code>/etc/logrotate.d</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/logrotate.d</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch tomcat</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑新建的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim tomcat</span></span><br></pre></td></tr></table></figure>

<p>然后将下面的内容写到文件里就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;app&#x2F;apache-tomcat-8.0.43&#x2F;logs&#x2F;catalina.out</span><br><span class="line">&#123;</span><br><span class="line">    copytruncate</span><br><span class="line">    daily</span><br><span class="line">    dateext</span><br><span class="line">    rotate 7</span><br><span class="line">    compress</span><br><span class="line">    missingok</span><br><span class="line">    size 10M</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>/app/apache-tomcat-8.0.43/logs/catalina.out</code>是<code>你的catalina.out的路径</code></li>
<li><code>copytruncate</code> 就是关键了，复制截断</li>
<li><code>daily</code>表示每天轮替</li>
<li><code>dateext</code>表示使用日期作为后缀</li>
<li><code>rotate 7</code>表示轮替最多保留之前的数据几次，超出的将被删除或邮件接收</li>
<li><code>compress</code>表示轮替下来的日志会被压缩</li>
<li><code>missingok</code>表示如果日志丢失，不报错继续滚动下一个日志</li>
<li><code>size 10M</code>表示日志文件超过10M才轮替</li>
</ul>
<p><a href="https://linux.die.net/man/8/logrotate" target="_blank" rel="noopener">更多配置项&gt;&gt;&gt;</a></p>
</li>
</ol>
<p>做完上面这些我们就等着定时执行就好了，我们也可以手动强制执行轮替来试试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/sbin/logrotate -vf /etc/logrotate.d/tomcat</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>logrotate</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加RSS和站点地图</title>
    <url>/2020/01/20/Hexo%E6%B7%BB%E5%8A%A0RSS%E5%92%8C%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<p>​    </p>
<a id="more"></a>

<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>给自己的博客添加RSS的话，其他人就可以订阅你的博客了。</p>
<div class="tabs" id="rss"><ul class="nav-tabs"><li class="tab active"><a href="#rss-1">安装</a></li><li class="tab"><a href="#rss-2">配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="rss-1"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="rss-2"><figure class="highlight plain"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: </span><br><span class="line">  content_limit_delim: &#39; &#39;</span><br><span class="line">  order_by: -date</span><br><span class="line">  icon: </span><br><span class="line">  autodiscovery: true</span><br><span class="line">  template:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>详细见<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a></p></div></div></div>



<h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><blockquote><p>站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名sitemap，为爬虫指路，增加网站重要内容页面的收录。站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p>
<footer><strong>百度百科</strong><cite><a href="https://baike.baidu.com/item/站点地图/9991876" target="_blank" rel="noopener">站点地图</a></cite></footer></blockquote>

<div class="tabs" id="站点地图"><ul class="nav-tabs"><li class="tab active"><a href="#站点地图-1">安装</a></li><li class="tab"><a href="#站点地图-2">配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="站点地图-1"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="站点地图-2"><figure class="highlight plain"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">    template:</span><br><span class="line">    rel: false</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>path</strong> - Sitemap path. (Default: sitemap.xml)</li>
<li><strong>template</strong> - Custom template path. This file will be used to generate sitemap.xml (See <a href="https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml" target="_blank" rel="noopener">default template</a>)</li>
<li><strong>rel</strong> - Add <a href="http://microformats.org/wiki/rel-sitemap" target="_blank" rel="noopener"><code>rel-sitemap</code></a> to the site’s header. (Default: <code>false</code>)</li>
</ul></div></div></div>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>RSS</tag>
        <tag>sitemap</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客</title>
    <url>/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这不完全是一篇搭建个人博客的教程，因为<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>的文档其实写得非常清楚了。但是，我们按照教程来不一定很顺利。所以，这主要还是一个小白的经验之谈。</p>
<a id="more"></a>


<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="我为什么选择Hexo呢？"><a href="#我为什么选择Hexo呢？" class="headerlink" title="我为什么选择Hexo呢？"></a>我为什么选择Hexo呢？</h3><ol>
<li>网上很多人推荐使用Hexo</li>
<li>我本来也打算用Jekyll，但是由于网络原因Ruby的开发环境的安装包我下载不下来。</li>
</ol>
<p>什么？还有其他的比Hexo好用，为什么不用？别问，问就是Hexo是最好用的。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> </li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li>
</ul>
<p>这两我都是用得很少，一般都是现学现用。安装也不难，这就不多说了。</p>
<h5 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h5><p>由于最终我们的是将网站部署到<span class="label default">GitHub Pages</span>，所以这里需要配置Git，将Git和GitHub关联上，以便之后将文件push到GitHub。</p>
<ol>
<li><p>鼠标右击，选择<span class="label default">Git Bash Here</span>打开Git命令行。</p>
</li>
<li><p>配置<span class="label default">user.name</span>和<span class="label default">user.email</span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;你的GitHub用户名&#39;</span><br><span class="line">git config --global user.email &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成SSH密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>

<p>然后直接连续回车就OK，默认不需要设置密码</p>
</li>
<li><p>复制公钥</p>
<p>打开.ssh文件夹中的id_rsa.pub文件(用文本编辑器打开就好了)，复制里面的内容。（我的在这个目录下：C:\Users\Admin\.ssh）</p>
</li>
<li><p>到<a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener">GitHub设置SSH keys</a></p>
<p>Title的内容随意，Key里面粘贴<span class="label default">第4步</span>中复制的内容，然后点击<a class="btn" href="#">Add SSH Key</a></p>
</li>
<li><p>检查</p>
<p>打开Git Bash，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh git@github.com</span><br></pre></td></tr></table></figure>

<p>显示<span class="label default">You've successfully authenticated</span>这样的话，就是成功了。</p>
</li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>打开一个新的命令行窗口输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ Hexo</span><br></pre></td></tr></table></figure>

<p>能显示出一些帮助信息就说明装成功了</p>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="初始化网站"><a href="#初始化网站" class="headerlink" title="初始化网站"></a>初始化网站</h4><p>找一个你想放网站文件的地方，然后执行下列命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p><a name='folder'>&lt;folder&gt;</a>换成你想要的文件夹名字。完成后，能看到指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>到目前为止，网站就建好了。但是我们要在本地看效果还需要将网站部署到本地服务器。</p>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ol>
<li><p>安装hexo-server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>这里一定要切换到网站文件夹下启动。</p>
          </div>

<p>最终看到输出<span class="label default">Hexo is running at http://localhost:4000</span>就是启动好了。</p>
</li>
<li><p>打开浏览器输入<span class="label default">Hexo is running at http://localhost:4000</span>就能看到Hexo默认主题<span class="label default">landscape</span>的页面</p>




</li>
</ol>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>我们现在已经在本地部署过搭建的网站了。为了让其他人也能看到，我们要个人网站部署到GitHub Pages。</p>
<p>这个教程在<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>也是有的，有<span class="label default">两种</span>方式。我比较推荐第一种，就是使用<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 。</p>
<div class="note info">
            <p><strong>为什么选第一种?</strong></p><p>主要还是我按第二种，GitHub上只存了Hexo生成的页面，但是我想源文件也想存下来，当然我们也可以将源文件也上传到GitHub，达到跟第一种类似的效果。但是，持续集成服务，免费的，它不香吗？</p>
          </div>



<p>如果你按官方教程后最终发现这个：</p>
<blockquote>
<p>User pages must be built from the <code>master</code> branch.</p>
</blockquote>
<p>那么下面的内容就有用了。因为<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>的教程是将Hexo的文件放<span class="label default">master</span>，然后生成的html放<span class="label default">gh-pages</span>的，以前可能是没问题，但是现在GitHub规定你必须将页面放到<span class="label default">master</span>。</p>
<ol>
<li><p>GitHub新建一个 repository。命名为<span class="label default"><你的 GitHub 用户名>.github.io</span>。选择<span class="label default">Public</span>，勾上<span class="label default">Initialize this repository with a README</span>。</p>
</li>
<li><p>然后选择一个地方新建一个空的文件夹。进入文件夹，右键鼠标，选择<span class="label default">Git Bash Here</span>打开Git命令行。将刚才建的repository clone下来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后新建一个分支用来存放Hexo生成前的文件。（我的分支名就blog）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>

<p>然后切换到分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将之前建站的文件夹<a href='#folder'>&lt;folder&gt;</a>下的所有文件及文件夹复制到第2步种新建的文件夹下面。</p>
</li>
<li><p>将第3步种的文件提交到分支，填写注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;&lt;注释&gt;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件push到GitHub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>上传成功后就能在GitHub上之前建的repository的分支看到了。</p>
</li>
<li><p>将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 GitHub 账户中。</p>
</li>
<li><p>前往 GitHub 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</p>
</li>
<li><p>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/" target="_blank" rel="noopener">手动前往</a>。</p>
</li>
<li><p>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</p>
</li>
<li><p>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</p>
</li>
<li><p>在你的 Hexo 站点文件夹(现在这个站点文件夹为应该为<span class="label default"><你的 GitHub 用户名>.github.io</span>)中新建一个 <code>.travis.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog # build blog branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  target_branch: master</span><br><span class="line">  on:</span><br><span class="line">    branch: blog</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>这里的内容和Hexo官网的有点区别。这里指定了build的为&lt;分支名字&gt;（<span class="label default">我的是blog</span>），目标是master</p>
          </div>
</li>
<li><p>将 <code>.travis.yml</code> 推送（推送方法和之前的文件推送到GitHub类型）到 repository 分支中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>master</code> 分支下。</p>
</li>
<li><p>推送之后等一会,<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 上就能看到build信息。等<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> build完之后。就能在 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点了。可能需要等一会儿。发布成功的话，你应该可以在repository的setting的<span class="label default">GitHub Pages</span> 下看到<span class="label success">Your site is published at https://<你的 GitHub 用户名>.github.io</span>。</p>
</li>
</ol>
<h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>到此，我们已经将网站发布到GitHub Pages了。但是默认的<code>landscape</code>，真的不符合我的审美。我们可以取<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a>网站挑选，也可以去GitHub上搜索<code>hexo-theme</code>。我就是去GitHub上挑选的star比较高的<a href="hexo-theme">Next主题</a>，所以我就以<code>Next</code>主题为例。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><div class="tabs" id="hexo-主题"><ul class="nav-tabs"><li class="tab active"><a href="#hexo-主题-1">安装-></a></li><li class="tab"><a href="#hexo-主题-2">Hexo 配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="hexo-主题-1"><p>切换到站点文件夹，按我上的的教程此时应该是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &lt;你的 GitHub 用户名&gt;.github.io</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="hexo-主题-2"><figure class="highlight plain"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一开始Next主题的很多配置都是关闭的，所以我们可以通过查看<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">文档</a>,然后修改主题的<code>_config.yml</code>来开启和配置一些功能。下面只讲我遇到过问题的。</p>
<h4 id="Post-Wordcount"><a href="#Post-Wordcount" class="headerlink" title="Post Wordcount"></a>Post Wordcount</h4><p>这是一个统计文字的功能，但是我安装步骤弄好之后。页面显示的字数和阅读时间都没正确显示出来。我看GitHub上关于没有正确显示字数的issue都是因为Next升级到<code>6.x</code>之后，将统计的插件从<a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener"><code>hexo-wordcount</code></a>换到了<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener"><code>hexo-symbols-count-time</code></a>。而我的都是最新的，最终我在Hexo上找到了解决办法。</p>
<blockquote>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
</blockquote>
<p>这个命令就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>我运行完这个之后就正确显示了。</p>
<h4 id="Comment-Systems"><a href="#Comment-Systems" class="headerlink" title="Comment Systems"></a>Comment Systems</h4><p>评论系统我选的Gitalk。嗯，我比较喜欢GitHub那一套。</p>
<p>具体过程，按照过程来就行。</p>
<p>需要注意的就是这个配置</p>
<figure class="highlight plain"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">gitalk:  </span><br><span class="line"></span><br><span class="line">​	repo: # Repository name to store issues</span><br></pre></td></tr></table></figure>

<p>这里填的是 Repository的名字，不是SSH URL。这个填错了页面上会显示<code>Error</code>。</p>
<p>另外，评论系统你得发布到GitHub才能正常使用。</p>
<h4 id="CC-license"><a href="#CC-license" class="headerlink" title="CC license"></a>CC license</h4><p>协议详情见<a href="https://creativecommons.org" target="_blank" rel="noopener">Creative Commons</a></p>
<p>将这个配置开启可以在文章最后加一个版权声明</p>
<div class="note danger">
            <p><strong>本文作者：</strong> xxx</p><p><strong>本文链接：</strong> xxx</p><p><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">BY-NC-SA</a> 许可协议。转载请注明出处！</p>
          </div>

<figure class="highlight plain"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language: deed.zh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p><strong>推送主题修改到GitHub</strong></p><p>因为我们是将Next主题直接clone到我们自己的Repository下。所以，我们推送的文件中，有个.git的文件夹。嵌套仓库可能会出问题。注意命令行的提示信息，会有类似让你执行下面这条命令的提示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached themes&#x2F;next</span><br></pre></td></tr></table></figure><p>这条真的有用，执行完就可以提交了。如果不行，你就多试几次，亲测有效。</p>
          </div>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="标签和分类"><a href="#标签和分类" class="headerlink" title="标签和分类"></a>标签和分类</h4><p>这个我们在Next的<a href="https://theme-next.org/docs/theme-settings/custom-pages" target="_blank" rel="noopener">文档</a>中就能弄好了。</p>
<h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>在站点文件夹下执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>这条指令其实就是在source/_posts文件夹下建了名为&lt;title&gt;.md的文件。</p>
<p>用一个markdown的编辑器打开这个文件就可以开始写文章了。</p>
<p>文章的头部一段内容可以包含标签，分类。本篇文章就是这就这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo搭建个人博客</span><br><span class="line">date: 2020-01-17 16:56:05</span><br><span class="line">categories:</span><br><span class="line"> - Blog</span><br><span class="line">tags: </span><br><span class="line"> - Hexo</span><br><span class="line"> - Github</span><br><span class="line"> - Blog</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>



<p>默认的情况下，文章是全部展开的，我们可以在文章的任何地方添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>控制哪些内容需要点击<a class="btn" href="#">阅读全文>></a>查看。</p>
<p>还有一些标签的使用可以查看Next<a href="https://theme-next.org/docs/tag-plugins/" target="_blank" rel="noopener">文档</a>和Hexo<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">文档</a>。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Java + Appium + 夜神模拟器实现学习强国积分任务自动化</title>
    <url>/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<p>首先，先放源码<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>。</p>
<p>我想装了《学习强国》App的同学都为每天30积分的任务苦恼过。我之前也是因为这30积分非常头疼，不是《学习强国》App不好，而是真的不适合我。我们会学习，但可能不是被迫学习指定内容，为了指标而学习。</p>
<p>GitHub上面有很多Python写的《学习强国》自动化学习项目。我也有在用，但是我想有一个Java编写的，自己改起来顺手的《学习强国》自动学习。</p>
<p>为此，我就写了一个Java的，目前已经实现刷30分。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK8</a></p>
</li>
<li><p><a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">Android SDK 24.4.1</a></p>
</li>
<li><p><a href="http://appium.io/" target="_blank" rel="noopener">Appium 1.15.1</a></p>
</li>
<li><p><a href="https://www.yeshen.com/" target="_blank" rel="noopener">夜神模拟器 6.5.0.3</a>，当然里面还需要安装《学习强国》</p>
</li>
<li><p><a href="https://spring.io/tools" target="_blank" rel="noopener">Sping Tool Suite</a></p>
</li>
<li><p><a href="https://projectlombok.org/setup/eclipse" target="_blank" rel="noopener">Lombok</a></p>
<p>（1、5、6我电脑上本来就已经装了，所以我就只用装2、3、4就行了</p>
<p>安装基本都比较顺利，网上教程也挺多。）</p>
</li>
</ol>
<div class="note info">
            <p>上面的环境准备好之后，启动<code>夜神模拟器</code>后，命令行执行下列命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>如果<code>List of devices attached</code>没有显示内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">127.0.0.1:62002 device</span><br></pre></td></tr></table></figure><p>那么，需要使用SDK下<code>platform-tools</code>文件夹的<strong>adb.exe</strong>覆盖掉夜神模拟器安装目录下<code>bin</code>目录中的<strong>adb.exe</strong>和<strong>nox_adb.exe</strong></p><p>如果做了上面的操作还是不行，试试以下指令。还是不行的话，看看adb的<a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn" target="_blank" rel="noopener">用户指南</a>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect device_ip_address</span><br></pre></td></tr></table></figure><p>我这里夜神模拟器的<code>device_ip_address</code>是<code>127.0.0.1:62001</code></p>
          </div>

<h2 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h2><p><a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>的核心就是<code>Appium</code>了。</p>
<p>Appium是客户端/服务器架构。我们下载的<a href="http://appium.io/" target="_blank" rel="noopener">Appium Desktop</a>就是服务器。而<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>做的就是使用Appium的Java客户端库定义一些操作来完成我的目标。</p>
<p>我没有去了解太多关于Appium的知识。感兴趣的可以去官方文档查看<a href="https://appium.io/docs/en/about-appium/intro/" target="_blank" rel="noopener">详细介绍</a>。</p>
<h3 id="Appium-Desktop"><a href="#Appium-Desktop" class="headerlink" title="Appium Desktop"></a>Appium Desktop</h3><p>打开Appium Desktop之后，显示如下界面，我将Host设置为<code>localhost</code>了</p>


<p>在<a class="btn" href="#">Start Server</a> 之前我们需要，先点击下面的按钮配置JDK和Android SDK 的路径</p>
<p>然后启动，显示如下界面</p>


<p>点击放大镜。得到如下界面</p>


<p>然后填入如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;platformName&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;5.1.1&quot;,</span><br><span class="line">  &quot;appPackage&quot;: &quot;cn.xuexi.android&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.alibaba.android.rimet.biz.SplashActivity&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;127.0.0.1:62001&quot;,</span><br><span class="line">  &quot;noReset&quot;: true,</span><br><span class="line">  &quot;newCommandTimeout&quot;: 600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击<a class="btn" href="#">Start Session</a>，就能得到如下界面。（在这之前得保证<code>adb devices</code>能看到你的设备，我这里是夜神模拟器）</p>


<p>这时候我们应该能看到<code>夜神模拟器</code>中的《学习强国》App也已经打开了。此时<code>Appium</code>和<code>夜神模拟器</code>看到的页面是同步的。以上界面对页面元素的操作按钮的所有操作都会反馈到夜神模拟器上的《学习强国》App。同样，在夜神模拟器上的操作也会反馈到上面的页面，点击<code>刷新</code>按钮就能刷新页面。</p>
<p>到此为止就准备好了，可以开发了。</p>
<h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>用 <a href="https://spring.io/tools" target="_blank" rel="noopener">Sping Tool Suite</a>建一个Spring Boot工程</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​	&lt;dependency&gt;</span><br><span class="line">  			&lt;groupId&gt;io.appium&lt;&#x2F;groupId&gt;</span><br><span class="line">  			&lt;artifactId&gt;java-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">  			&lt;version&gt;7.3.0&lt;&#x2F;version&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">​			&lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">​			&lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;com.h2database&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;h2&lt;&#x2F;artifactId&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">​	&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要还是Appium客户端的依赖，其他的都是为了方便完成学习强国的积分任务功能而添加的</p>
<p>上面这些完成了就可以开始写代码了。当然你可以直接clone这个<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>。</p>
<h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><p>下面我以《学习强国》里的<code>登录</code>和<code>阅读文章</code>为例，讲述怎么使用Appium的Java客户端库。</p>
<p>因为几乎所有的操作都是从<code>AndroidDriver</code>开始的，所以我们需要构建<code>AndroidDriver</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;platformName&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;5.1.1&quot;,</span><br><span class="line">  &quot;appPackage&quot;: &quot;cn.xuexi.android&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.alibaba.android.rimet.biz.SplashActivity&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;127.0.0.1:62001&quot;,</span><br><span class="line">  &quot;noReset&quot;: true,</span><br><span class="line">  &quot;newCommandTimeout&quot;: 600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>中的代码如下：</p>
<figure class="highlight java"><figcaption><span>AppiumConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> AndroidDriver&lt;AndroidElement&gt; <span class="title">androidDriver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">	capabilities.setPlatform(Platform.ANDROID);</span><br><span class="line">	capabilities.setVersion(version); <span class="comment">// 安卓版本</span></span><br><span class="line">	capabilities.setCapability(AndroidMobileCapabilityType.APP_PACKAGE, appPackage);</span><br><span class="line">	capabilities.setCapability(AndroidMobileCapabilityType.APP_ACTIVITY, appActivity);</span><br><span class="line">	capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, deviceName); <span class="comment">// adb devices 查看</span></span><br><span class="line">	capabilities.setCapability(<span class="string">"noReset"</span>, noReset); </span><br><span class="line">	capabilities.setCapability(<span class="string">"newCommandTimeout"</span>, newCommandTimeout); </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> AndroidDriver&lt;AndroidElement&gt;(<span class="keyword">new</span> URL(appiumServer), capabilities);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p><code>手机号</code>和<code>密码</code>登录就非常简单了。</p>
<ol>
<li><p>找到<code>手机号输入框</code>。我们在Appium Desktop上用选择元素的按钮选中<code>手机号输入框</code>。</p>


<p>我们可以在右侧的<code>Selected Element</code>下看到<code>手机号输入框</code>的<code>XPath</code>，<code>Text</code>, <code>resource-id</code>等信息。</p>
</li>
<li><p>使用<code>AndroidDriver</code>的<code>findElementByXPath</code>方法。(所有的元素我都用的XPath查找，我们可以在网上搜索XPath的教程来学习XPath，这个并不复杂)</p>
<p>这里我使用以下XPath查找，意思就是查找所有元素中<code>resource-id</code>为<code>cn.xuexi.android:id/et_phone_input</code>的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;et_phone_input&#39;]</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>所有的XPath都可以在Appium Desktop的搜索中按XPath搜索尝试能不能搜到元素。</p>
          </div>
</li>
<li><p>然后调用第2步中<code>findElementByXPath</code>返回的<code>AndroidElement</code>对象的<code>sendKeys</code>方法，并传入手机号作为参数。</p>
</li>
<li><p>同样的操作找到<code>密码输入框</code>，并输入密码。找到<code>登录</code>按钮，然后调用<code>click()</code>方法点击</p>
</li>
</ol>
<p>到此为止，登录就实现了。</p>
<h4 id="阅读文章"><a href="#阅读文章" class="headerlink" title="阅读文章"></a>阅读文章</h4><p>阅读文章不外乎是这些操作</p>
<ol>
<li>找文章</li>
<li>进入文章</li>
<li>上下滑动阅读文章</li>
<li>等待阅读到达指定时间</li>
<li>返回</li>
</ol>
<p>这5步中比较特别的就是<code>上下滑动</code>和<code>返回</code>了，其他的就跟<code>登录</code>差不多，都是先<code>findElementByXPath</code>找到元素然后调用<code>click()</code>方法。</p>
<h5 id="那么滑动怎么做呢"><a href="#那么滑动怎么做呢" class="headerlink" title="那么滑动怎么做呢?"></a>那么滑动怎么做呢?</h5><ol>
<li>我们需要创建一个新的对象<code>AndroidTouchAction</code></li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line">androidTouchAction = <span class="keyword">new</span> AndroidTouchAction(androidDriver);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取设备的<code>宽</code>和<code>高</code></li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line">val size = androidDriver.manage().window().getSize();</span><br><span class="line">height = size.height;</span><br><span class="line">width = size.width;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后相继调用<code>AndroidTouchAction</code>的<code>press</code>，<code>moveTo</code>，<code>release</code>，<code>perform</code>方法</li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		androidTouchAction.press(PointOption.point(width / <span class="number">2</span>, height / <span class="number">2</span> + <span class="number">200</span>))</span><br><span class="line">						  .waitAction()</span><br><span class="line">						  .moveTo(PointOption.point(width / <span class="number">2</span>, height / <span class="number">2</span> - <span class="number">400</span>))</span><br><span class="line">						  .release()</span><br><span class="line">						  .perform();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="返回操作"><a href="#返回操作" class="headerlink" title="返回操作"></a>返回操作</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">androidDriver.navigate().back();</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p><strong>常见问题</strong></p><ol><li><p>XPath对了但是找不到元素</p><p>这种情况基本就是元素还没加载。我们可以用WebDriverWait对象等待</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wait &#x3D; new WebDriverWait(androidDriver,30);</span><br><span class="line">wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(xpath)));</span><br></pre></td></tr></table></figure></li><li><p>滑动的时候报不能在指定元素上执行touch操作</p><p>解决办法也是跟上面类似，都是需要等待元素加载完成。</p></li></ol>
          </div>

<div class="note info">
            <p><strong>XPath的常用写法</strong></p><ul><li><p>指定属性为&lt;xxx&gt;的元素，例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@text&#x3D;&#39;&lt;xxxx&gt;&#39;]</span><br><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;&lt;xxx&gt;&#39;]</span><br></pre></td></tr></table></figure></li><li><p>指定某个元素的父元素，例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;general_card_title_id&#39;]&#x2F;parent::*</span><br></pre></td></tr></table></figure><p><code>resource-id</code>为<code>cn.xuexi.android:id/general_card_title_id</code>的元素的父元素</p></li><li><p>指定元素之后的同级元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;android.widget.ImageView&#x2F;following-sibling::android.widget.TextView[ends-with(@text, &quot;学习平台&quot;)]</span><br></pre></td></tr></table></figure><p><code>android.widget.ImageView</code>元素之后的同级元素为<code>android.widget.TextView</code>的text内容以<code>学习平台</code>结尾的元素</p></li><li><p>指定元素之前的同级元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;action_bar_root&#39;]&#x2F;&#x2F;android.widget.TextView[@text&#x3D;&#39;分享到学习强国&#39;]&#x2F;preceding-sibling::*</span><br></pre></td></tr></table></figure></li><li><p>倒数第二个元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;android.widget.TextView[@text&#x3D;&#39;欢迎发表你的观点&#39;]&#x2F;following-sibling::*[last()-1]</span><br></pre></td></tr></table></figure><p><code>android.widget.TextView</code>的text内容为<code>欢迎发表你的观点</code>的元素之后的同级元素中的倒数第二个元素</p><p><a href="https://github.com/l-qiang/LitterBaby/blob/master/src/main/resources/application.properties" target="_blank" rel="noopener">更多用法示例</a></p></li></ul>
          </div>








]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Appium</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>iText合并PDF和添加书签</title>
    <url>/2020/01/10/iText%E5%90%88%E5%B9%B6PDF%E5%92%8C%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/</url>
    <content><![CDATA[<p>关于这个问题，其实在iText官网和Stack Overflow上面都有答案。之所以还要记录是想有更多人看到简单易懂的解决办法。因为我不想再有人直接CSDN搜一个，不管是否要新引入Jar包也不管代码是否复杂，然后告诉我参考那个写。</p>
<p><a href="https://itextpdf.com/en/resources/examples/itext-5-legacy/merging-documents-bookmarks#39-mergewithoutlines.java" target="_blank" rel="noopener">官网例子</a></p>
<a id="more"></a>

<p>下面是一个示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(List&lt;String&gt; srcFiles, String desFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Document document = <span class="keyword">new</span> Document();</span><br><span class="line">        PdfCopy copy = <span class="keyword">new</span> PdfCopy(document, <span class="keyword">new</span> FileOutputStream(desFile));</span><br><span class="line">        document.open();</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line">        List&lt;HashMap&lt;String, Object&gt;&gt; outlines = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String scrFile : srcFiles) &#123;</span><br><span class="line">            PdfReader reader = <span class="keyword">new</span> PdfReader(scrFile);</span><br><span class="line">            copy.addDocument(reader);</span><br><span class="line">            <span class="comment">// add outline element</span></span><br><span class="line">            HashMap&lt;String, Object&gt; outline = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            outline.put(<span class="string">"Title"</span>, FilenameUtils.getBaseName(scrFile)); <span class="comment">// 书签的名字</span></span><br><span class="line">            outline.put(<span class="string">"Action"</span>, <span class="string">"GoTo"</span>);</span><br><span class="line">            outline.put(<span class="string">"Page"</span>, String.format(<span class="string">"%d Fit"</span>, page));</span><br><span class="line">            outlines.add(outline);</span><br><span class="line">            <span class="comment">// update page count</span></span><br><span class="line">            page += reader.getNumberOfPages();</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line">        copy.setOutlines(outlines);</span><br><span class="line">        document.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PDF</tag>
        <tag>iText</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson将无嵌套JSON转嵌套对象</title>
    <url>/2019/12/19/Jackson%E5%B0%86%E6%97%A0%E5%B5%8C%E5%A5%97JSON%E8%BD%AC%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>例如，我有以下JSON</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;age: 18, lastname: &quot;Liu&quot;, firstname: &quot;Ryan&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>我需要将这个JSON装成Person对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private Name name;</span><br><span class="line">&#125;</span><br><span class="line">class Name &#123;</span><br><span class="line">    private String lastname;</span><br><span class="line">    private String firstname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要使用Jackson的注解<code>@JsonUnwrapped</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    @JsonUnwrapped</span><br><span class="line">    private Name name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Jackson</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jackson</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我的Spring Boot项目不能访问静态资源？</title>
    <url>/2019/12/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84Spring-Boot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%EF%BC%9F/</url>
    <content><![CDATA[<p>问题源于一个客户这边自己封装的框架。</p>
<p>一直以来，我都对这种框架无感，因为它一般是由开源项目改编的，而且不一定是改得更好了。封装越多用起来越笨重。</p>
<a id="more"></a>

<p>由于缺少文档的原因，查原因就稍微曲折了一点。</p>
<ul>
<li><p>首先我从出错信息开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401 认证失败</span><br></pre></td></tr></table></figure>

<p>这就有意思了，我访问一个静态资源，而且我按照所谓的文档已经关闭权限认证了。最头疼的是，这个错误信息在这个框架的自定义的错误码里面根本没有。然后我顺着代码看了个遍，终于找到了这个错误信息。他不是用的自定义的错误码，而是直接写死的，我服了…</p>
</li>
<li><p>然后debug找到原本的错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No handler mapping for xxx</span><br></pre></td></tr></table></figure>

<p>醉了，这错误多明显，为啥要改成<code>401 认证失败</code>返回呢。</p>
<p>错误虽然明显，但是确实超过了我的经验范围，静态资源需要啥Handler呢，还是我太年轻了。不过踩一次坑涨一波经验也不亏。</p>
</li>
<li><p>最终，我在配置文件中发现了这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring</span><br><span class="line">    resources:</span><br><span class="line">        add-mappings: false</span><br></pre></td></tr></table></figure>

<p>这不是坑爹吗，这么多配置项中掺了一个这个，还没有任何说明。</p>
</li>
</ul>
<p>所以原因就是因为<code>spring.resource.add-mappings</code>这个被设置成false，导致<code>WebMvcConfigurer</code>的<code>addResourceHandlers</code>方法直接返回了，所以没有Handler处理静态资源。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Java线程堆栈分析</title>
    <url>/2019/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>最新某系统经常出现无法登录，不能响应请求的情况。一开始找上我的时候，他们已经通过重启恢复了，然后让我查原因。我表示一脸懵逼，啥都没有就让我解决了，最起码得让我有东西分析吧。还好这个问题经常发生，于是就在一次故障发生的时候。</p>
<a id="more"></a>

<p>我使用<code>jps</code>查到<code>进程pid</code>，然后用<code>jstack</code>将堆栈信息保存到一个文件里，然后就用上了我不知道啥时候收藏的网站<a href="https://fastthread.io/" target="_blank" rel="noopener">fastThread</a>，将文件上传上去。</p>


<p>嚯，这么多线程再<code>WAITING</code>状态。点进去一个看看。</p>


<p>大多数线程的堆栈信息都跟上面差不多，都是在等从Druid数据库连接池等连接。</p>
<p>所以，原因就是数据库连接不够用了。然后我看了一眼数据库连接池的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.maxActive&#x3D;80</span><br><span class="line">spring.datasource.removeAbandoned&#x3D;false</span><br></pre></td></tr></table></figure>

<p>以我对这个系统的了解，这个配置完全够了。</p>
<p>于是，我打开了<code>druid</code>的监控。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.druid.web-stat-filter.enabled&#x3D;true</span><br><span class="line">spring.datasource.druid.stat-view-servlet.enabled&#x3D;true</span><br></pre></td></tr></table></figure>

<p>监控页面的部分功能需要设置这个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.druid.removeAbandoned&#x3D;true</span><br></pre></td></tr></table></figure>

<p>果然，<code>removeAbandoned</code>设置为<code>true</code>之后就有地方出现问题了，抛出了<code>connection holder is null</code>的异常错误。</p>
<p>这说明，有地方长时间占用数据库连接了，由于超时回收，导致事务提交的时候出现问题。找到出错的代码后发现是因为定时任务的所有操作都在一个事务里，一个定时任务<code>几十分钟</code>。其实，这个定时任务完全没必要加一个这样的大粒度事务，它的大多数操作都不必与数据库交互。所以，只要把事务粒度控制好了问题就解决了。</p>
<p>另外，还有一个原因是下面这个配置并不会生效。我其实挺不理解的，Spring Boot的文档写得很清楚了，为什么还有人把这些配置弄错了，而且还不验证有没有生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.maxActive&#x3D;80</span><br><span class="line">spring.datasource.removeAbandoned&#x3D;false</span><br></pre></td></tr></table></figure>

<p>因为系统用的Druid，所以<code>正确的配置</code>是下面这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.druid.maxActive&#x3D;80</span><br><span class="line">spring.datasource.druid.removeAbandoned&#x3D;false</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>fastThread</tag>
        <tag>线程堆栈</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Zookeeper与CAP的思考</title>
    <url>/2019/10/24/%E5%85%B3%E4%BA%8EZookeeper%E4%B8%8ECAP%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>我看到很多博客都说<code>Zookeeper</code>满足了<code>CAP</code>中的<code>CP</code>。但是Zookeeper的<code>Follower</code>和<code>Observer</code>是可以处理非事务请求的。</p>
<p>那么，<code>如果一个读请求到了未同步的Follower和Observer上，那读到的数据不就是旧数据吗？那不就不一致了吗？</code></p>
<a id="more"></a>

<p>带着这个疑问，我在<code>Zookeeper</code>的官方文档中找到了这么一段话。</p>
<blockquote>
<p>Sometimes developers mistakenly assume one other guarantee that ZooKeeper does not in fact make. This is: * Simultaneously Consistent Cross-Client Views* : ZooKeeper does not guarantee that at every instance in time, two different clients will have identical views of ZooKeeper data. Due to factors like network delays, one client may perform an update before another client gets notified of the change. Consider the scenario of two clients, A and B. If client A sets the value of a znode /a from 0 to 1, then tells client B to read /a, client B may read the old value of 0, depending on which server it is connected to. If it is important that Client A and Client B read the same value, Client B should should call the sync() method from the ZooKeeper API method before it performs its read. So, ZooKeeper by itself doesn’t guarantee that changes occur synchronously across all servers, but ZooKeeper primitives can be used to construct higher level functions that provide useful client synchronization. (For more information, see the ZooKeeper Recipes. [tbd:..]).</p>
</blockquote>
<p>所以，数据不一致的问题确实是存在的，但是可以通过sync方法来获取最新数据。</p>
]]></content>
      <categories>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
        <tag>CAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解之@Lookup</title>
    <url>/2019/10/17/Spring%E6%B3%A8%E8%A7%A3%E4%B9%8B@Lookup/</url>
    <content><![CDATA[<p>有时候我们在某个单例Bean中要用到原型Bean。那么我们怎么获取原型Bean呢？</p>
<ul>
<li>用@Autowired，@Resource注解注入</li>
<li>用BeanFactory的getBean方法</li>
</ul>
<p>使用<code>@Autowired</code>，<code>@Resource</code>的话我们就没法达到原型Bean的效果。我想在一个单例Bean中多次获取原型Bean该怎么做，而且我不想用BeanFactory。</p>
<a id="more"></a>

<p><code>@Lookup</code>就能满足我的需要。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class ServiceA &#123;</span><br><span class="line">    </span><br><span class="line">    public void print(String msg) &#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void test(String msg) &#123;</span><br><span class="line">        testBean(msg).print();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Lookup</span><br><span class="line">    protected TestBean testBean(String msg) &#123;</span><br><span class="line">        return new TestBean(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的test方法每次调用都需要一个新的TestBean。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">public class TestBean &#123;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private ServiceA serviceA;</span><br><span class="line">    </span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg(String msg) &#123;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void print() &#123;</span><br><span class="line">        serviceA.print(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TestBean(String msg) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Lookup并不神奇，它的就是通过BeanFactory的getBean实现的</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth解决了什么问题？</title>
    <url>/2019/10/15/OAuth%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
    <content><![CDATA[<blockquote><p>In the traditional client-server authentication model, the client<br>   requests an access-restricted resource (protected resource) on the<br>   server by authenticating with the server using the resource owner’s<br>   credentials.  In order to provide third-party applications access to<br>   restricted resources, the resource owner shares its credentials with<br>   the third party.  This creates several problems and limitations:</p>
<a id="more"></a>

<p>   o  Third-party applications are required to store the resource<br>      owner’s credentials for future use, typically a password in<br>      clear-text.</p>
<p>   o  Servers are required to support password authentication, despite<br>      the security weaknesses inherent in passwords.</p>
<p>   o  Third-party applications gain overly broad access to the resource<br>      owner’s protected resources, leaving resource owners without any<br>      ability to restrict duration or access to a limited subset of<br>      resources.</p>
<p>   o  Resource owners cannot revoke access to an individual third party<br>      without revoking access to all third parties, and must do so by<br>      changing the third party’s password.<br>   o  Compromise of any third-party application results in compromise of<br>      the end-user’s password and all of the data protected by that<br>      password.</p>
<footer><strong>RFC 6749</strong><cite><a href="https://tools.ietf.org/html/rfc6749#section-1" target="_blank" rel="noopener">section-1</a></cite></footer></blockquote>

<p>大概意思就是</p>
<ul>
<li>第三方应用需要存储资源拥有者的密码，并且通常是明文密码</li>
<li>尽管密码不安全，但是服务器必须支持密码验证</li>
<li>资源拥有者不能限制第三方应用对资源访问的范围和持续时间</li>
<li>资源拥有着不能撤销单个第三方应用的权限，只能是通过修改密码的方式来撤销所有第三方应用的权限</li>
<li>任何第三方应用遭到破坏会导致用户密码和所有受到该密码保护的数据受到损害</li>
</ul>
]]></content>
      <categories>
        <category>OAuth</category>
      </categories>
      <tags>
        <tag>OAuth</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-session是怎样使用redis存session的？</title>
    <url>/2019/10/13/spring-session%E6%98%AF%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8redis%E5%AD%98session%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<p>其实，我的直觉告诉我使用Hash。</p>
<p>我在项目里找到<a href="https://docs.spring.io/spring-session/docs/current/api/org/springframework/session/data/redis/RedisOperationsSessionRepository.html" target="_blank" rel="noopener">RedisOperationsSessionRepository</a>然后在注释中找到了答案</p>
<blockquote>
<p>Each session is stored in Redis as a <a href="http://redis.io/topics/data-types#hashes" target="_blank" rel="noopener">Hash</a>. Each session is set and updated using the <a href="http://redis.io/commands/hmset" target="_blank" rel="noopener">HMSET command</a>. </p>
</blockquote>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMSET spring:session:sessions:33fdd1b6-b496-4b33-9f7d-df96679d32fe creationTime 1404360000000 maxInactiveInterval 1800 lastAccessedTime 1404360000000 sessionAttr:attrName someAttrValue sessionAttr:attrName2 someAttrValue2</span><br></pre></td></tr></table></figure>

<ul>
<li><code>33fdd1b6-b496-4b33-9f7d-df96679d32fe</code>是session id</li>
<li><code>creationTime 1404360000000</code>是session的创建时间</li>
<li><code>maxInactiveInterval 1800</code>是过期时间</li>
<li><code>lastAccessedTime 1404360000000</code>是最后访问时间</li>
<li>后面的就是一些自定义的属性了</li>
</ul>
<p>当然，除了上面的这些，在Redis中还存了一些过期时间相关的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPIRE spring:session:sessions:33fdd1b6-b496-4b33-9f7d-df96679d32fe 2100</span><br><span class="line">APPEND spring:session:sessions:expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe &quot;&quot;</span><br><span class="line">EXPIRE spring:session:sessions:expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe 1800</span><br><span class="line">SADD spring:session:expirations:1439245080000 expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe</span><br><span class="line">EXPIRE spring:session:expirations1439245080000 2100</span><br></pre></td></tr></table></figure>

<p>原因是Spring Session依赖Redis的过期键的删除触发<code>SessionDestroyedEvent</code>事件来释放资源。但是，Redis的键过期之后不能保证立马删除，所以就会有后台任务不断地访问session过期键来触发Redis过期键删除。</p>
<p>这个可以在<code>RedisOperationsSessionRepository</code>的注释或者<a href="https://docs.spring.io/spring-session/docs/2.0.0.M4/reference/html5/#api-redisoperationssessionrepository-expiration" target="_blank" rel="noopener">Spring Session的文档</a>查看详细介绍。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Session</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Session</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson序列化字段脱敏处理</title>
    <url>/2019/10/11/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E8%84%B1%E6%95%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>例如，我有如下类A，我需要A序列化为JSON是name字段值为***。</p>
<figure class="highlight java"><figcaption><span>A.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="meta">@JsonProperty</span></span><br><span class="line">​    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>我们可以这么做。</p>
<div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><a href="#code-1">StdConverter-></a></li><li class="tab"><a href="#code-2">A</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code-1"><figure class="highlight java"><figcaption><span>NameDesensitizeConverter.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameDesensitizeConverter</span> <span class="keyword">extends</span> <span class="title">StdConverter</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"***"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="code-2"><figure class="highlight java"><figcaption><span>A.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(converter = NameDesensitizeConverter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<p>当然，网上还有<a href="https://blog.csdn.net/liufei198613/article/details/79009015" target="_blank" rel="noopener">其他的方法</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Jackson</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jackson</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentModificationException你真的了解吗？</title>
    <url>/2019/10/11/ConcurrentModificationException%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<p>我想很多人第一次遇到这个异常都是因为对<code>List</code>使用<code>foreach</code>遍历，然后删除元素的导致的。然后我们会在网上查到使用<code>Iterator</code>或<code>for倒序遍历</code>来解决这个问题。那么<code>ConcurrentModificationException</code>是怎么出现的？为什么要使用Iterator或for倒序遍历来解决呢？</p>
<a id="more"></a>

<p>首先，<code>ConcurrentModificationException</code>是<code>Iterator</code>的<code>remove</code>方法抛出来的，而不是<code>List</code>的<code>remove</code>方法，而<code>foreach</code>的实现原理其实就是<code>Iterator</code>。既然<code>foreach</code>是通过<code>Iterator</code>实现的，那为什么使用<code>Iterator</code>可以，而使用<code>foreach</code>却不行呢？</p>
<p>别急，让我们先看看<code>Iterator</code>的<code>remove</code>和<code>List</code>的<code>remove</code>的区别。</p>
<div class="tabs" id="remove"><ul class="nav-tabs"><li class="tab active"><a href="#remove-1">Iterator</a></li><li class="tab"><a href="#remove-2">List</a></li></ul><div class="tab-content"><div class="tab-pane active" id="remove-1"><figure class="highlight java"><figcaption><span>ArrayList$Itr</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    checkForComodification();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="remove-2"><figure class="highlight java"><figcaption><span>ArrayList</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<p>可以看到，<code>Iterator</code>的的<code>remove</code>方法除了调用<code>List</code>的<code>remove</code>方法之后，还有这样一个操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expectedModCount &#x3D; modCount;</span><br></pre></td></tr></table></figure>

<p>使用<code>foreach</code>的时候会调用<code>checkForComodification</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final void checkForComodification() &#123;</span><br><span class="line">    if (modCount !&#x3D; expectedModCount)</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而我们使用foreach的时候一般都会习惯性的使用List的<code>remove</code>，导致了<code>modCount</code> 和 <code>expectedModCount</code>不相等。</p>
<p><strong>为什么普通的for循环不会出现<code>ConcurrentModificationException</code>异常呢？</strong></p>
<p>因为普通的for循环没有用到Iterator的方法，也就不存在<code>modCount</code> 和 <code>expectedModCount</code>是否相等的问题。</p>
<p>但是，普通for循环也要注意要倒序。</p>
<div class="tabs" id="for"><ul class="nav-tabs"><li class="tab active"><a href="#for-1">倒序</a></li><li class="tab"><a href="#for-2">正序</a></li></ul><div class="tab-content"><div class="tab-pane active" id="for-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; lst = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = lst.size() - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.println(lst.get(i));</span><br><span class="line">            lst.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码可以正常运行。并且输出和预料的一样是10,9,8,7,6,5,4,3,2,1</p></div><div class="tab-pane" id="for-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; lst = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; lst.size() ; i++) &#123;</span><br><span class="line">            System.out.println(lst.get(i));</span><br><span class="line">            lst.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这就有问题了，输出1,3,5,7,9。原因就是删除1之后，2挪到了数组下标为0的位置，但是i已经变成1了，而1的位置已经不是2是3了，所以2就错过了。4,6,8,10也是同样的道理。</p></div></div></div>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次MySQL统计查询SQL优化</title>
    <url>/2019/09/10/%E8%AE%B0%E4%B8%80%E6%AC%A1MySQL%E7%BB%9F%E8%AE%A1%E6%9F%A5%E8%AF%A2SQL%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	COL_B,</span><br><span class="line">	<span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'a'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'a'</span>,</span><br><span class="line">	<span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'b'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'b'</span>,</span><br><span class="line">	<span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'c'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'c'</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Table</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	COL_B </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>COL_C上建立了一个普通索引。<code>50w</code>数据这个SQL的执行时间大概为<code>3s</code>。</p>
<a id="more"></a>

<div class="tabs" id="优化"><ul class="nav-tabs"><li class="tab active"><a href="#优化-1">第一次优化</a></li><li class="tab"><a href="#优化-2">第二次优化</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优化-1"><p>我将一条SQL拆成两条</p>
<figure class="highlight sql"><figcaption><span>分页</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COL_B </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">Table</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    COL_B</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><figcaption><span>查询</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COL_B,</span><br><span class="line">    <span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'a'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'a'</span>,</span><br><span class="line">    <span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'b'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'b'</span>,</span><br><span class="line">    <span class="keyword">MAX</span>( <span class="keyword">CASE</span> COL_A <span class="keyword">WHEN</span> <span class="string">'c'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'c'</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">Table</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    COL_B <span class="keyword">IN</span> (...) </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    COL_B</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这条查询时间缩短到<code>0.5s</code>。在COL_B上加上索引之后，缩短到<code>0.1s</code>。</p>
<p>在第一次优化之后，<code>查询</code>的速度我已经可以接受了，但是<code>分页</code>我还是觉得太慢了。</p></div><div class="tab-pane" id="优化-2"><p>对<code>分页</code>SQL执行EXPLAIN，发现Extra列有一个<code>Using filesort</code>，我想去掉这个。决定使用索引覆盖，在原来的COL_C的索引改为COL_C,COL_B的多列索引。但是这样还是不行，因为GROUP BY 使用的是COL_B，所以无法用到COL_C,COL_B的多列索引，因为索引中COL_C在COL_B左边。</p>
<p>既然是GROUP BY这里引起的，那么我可以不用<code>GROUP BY</code>，改为用<code>DISTINCT</code></p>
<figure class="highlight sql"><figcaption><span>分页</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">DISTINCT</span></span><br><span class="line">    COL_B </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">Table</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    COL_C <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这么一改时间由<code>1.4s</code>缩短至<code>0.1s</code>。</p>
<p>原来一条SQL查询需要<code>3s</code>，优化之后变成了两个<code>0.1s</code>的SQL。</p></div></div></div>


]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
        <tag>优化查询</tag>
      </tags>
  </entry>
  <entry>
    <title>spring.mvc.favicon.enabled为什么不起作用？</title>
    <url>/2019/09/05/spring.mvc.favicon.enabled%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%EF%BC%9F/</url>
    <content><![CDATA[<p>偶然发现不管我将spring.mvc.favicon.enabled设置成true还是false，系统表面上都没有什么变化。favicon该显示还是显示。</p>
<p>那么这个配置究竟有什么用呢？</p>
<a id="more"></a>

<p>我在github的<a href="https://github.com/spring-projects/spring-boot/issues/17925" target="_blank" rel="noopener">issue</a>找到了答案。</p>
<blockquote>
<p>It only disables serving a favicon.ico from the root of the classpath. A favicon.ico that’s placed in one of the static resource locations will still be served.</p>
</blockquote>
<p>也就是说将<code>spring.mvc.favicon.enabled</code>设置成<code>false</code>，只是让<code>classpath</code>下的<code>favicon</code>图标不能用。而<code>static</code>下的<code>favicon</code>仍然可以用。</p>
<p><code>WebMvcAutoConfiguration</code>的<code>FaviconConfiguration</code>也可以验证这一点。</p>
<p>favicon的请求是由浏览器发起的，所以如果要禁用需要让系统不再请求这个图标。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache VFS移动FTP文件太慢原因及解决办法</title>
    <url>/2019/09/04/Apache%20VFS%E7%A7%BB%E5%8A%A8FTP%E6%96%87%E4%BB%B6%E5%A4%AA%E6%85%A2%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>项目中我们使用Apache VFS操作FTP服务器上得文件。但是最近发现，如果一个文件夹里面的文件特别多，移动这个文件夹里的文件就会特别慢。</p>
<p>于是，我就找了找原因。</p>
<a id="more"></a>

<p><code>Apache VFS</code>移动文件是通过使用<code>FileSystemManager的resolveFile方法</code>获得<code>FileObject</code>，然后调用其<code>moveTo</code>方法来达到FTP文件移动的目的。</p>
<p>我们使用的<code>FileSystemManager</code>是默认的<code>DefaultFileSystemManager</code>，在操作FTP文件的时候会调用<code>AbstractOriginatingFileProvider</code>的<code>findFile</code>方法。</p>
<figure class="highlight java"><figcaption><span>AbstractOriginatingFileProvider.findFile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> FileObject <span class="title">findFile</span><span class="params">(<span class="keyword">final</span> FileName name, <span class="keyword">final</span> FileSystemOptions fileSystemOptions)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="comment">// Check in the cache for the file system</span></span><br><span class="line">    <span class="keyword">final</span> FileName rootName = getContext().getFileSystemManager().resolveName(name, FileName.ROOT_PATH);</span><br><span class="line">    <span class="keyword">final</span> FileSystem fs = getFileSystem(rootName, fileSystemOptions);</span><br><span class="line">    <span class="comment">// Locate the file</span></span><br><span class="line">    <span class="comment">// return fs.resolveFile(name.getPath());</span></span><br><span class="line">    <span class="keyword">return</span> fs.resolveFile(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里可以看到会使用<code>FileName</code>获取到一个<code>FileSystem</code>，然后调用FlieSystem的resolveFile方法。这个FileName是从FTP的uri中解析出来的。FTP的uri（例如：<a href="ftp://username:password@host" target="_blank" rel="noopener">ftp://username:password@host</a>:port/）如果username，password，host，port相同，这里取到的<code>FileSystem是同一个</code>。这里涉及到两个重要的类。</p>
<div class="tabs" id="class"><ul class="nav-tabs"><li class="tab active"><a href="#class-1">FtpFileObject</a></li><li class="tab"><a href="#class-2">FtpFileSystem</a></li></ul><div class="tab-content"><div class="tab-pane active" id="class-1"><figure class="highlight java"><figcaption><span>FtpFileObject.class</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">FtpFileObject</span><span class="params">(<span class="keyword">final</span> AbstractFileName name, <span class="keyword">final</span> FtpFileSystem fileSystem, <span class="keyword">final</span> FileName rootName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, fileSystem);</span><br><span class="line">    <span class="keyword">final</span> String relPath = UriParser.decode(rootName.getRelativeName(name));</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"."</span>.equals(relPath)) &#123;</span><br><span class="line">        <span class="comment">// do not use the "." as path against the ftp-server</span></span><br><span class="line">        <span class="comment">// e.g. the uu.net ftp-server do a recursive listing then</span></span><br><span class="line">        <span class="comment">// this.relPath = UriParser.decode(rootName.getPath());</span></span><br><span class="line">        <span class="comment">// this.relPath = ".";</span></span><br><span class="line">        <span class="keyword">this</span>.relPath = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.relPath = relPath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从构造函数可以看出，并没有做太多事情，而且最关键的属性没有初始化
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private FTPFile fileInfo;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="class-2"><figure class="highlight java"><figcaption><span>FtpFileSystem.class</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putClient</span><span class="params">(<span class="keyword">final</span> FtpClient client)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Save client for reuse if none is idle.</span></span><br><span class="line">    <span class="keyword">if</span> (!idleClient.compareAndSet(<span class="keyword">null</span>, client)) &#123;</span><br><span class="line">        <span class="comment">// An idle client is already present so close the connection.</span></span><br><span class="line">        closeConnection(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> FtpClient <span class="title">getClient</span><span class="params">()</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    FtpClient client = idleClient.getAndSet(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (client == <span class="keyword">null</span> || !client.isConnected()) &#123;</span><br><span class="line">        client = createWrapper();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line">这个类就是对`FtpClient`进行了封装，操作FTP文件时会先调用`getClient()`，操作完成后再调用`putClient`。这个类使用`AtomicReference`来保持他只持有`一个`FtpClient，每次get的时候会置`<span class="keyword">null</span>`，如果有`其他的`线程get，那么会创建一个`新的client`返回。在put的时候，如果这个类已经持有一个client了，就把put进来的client关掉。</span><br></pre></td></tr></table></figure></div></div></div>



<p>既然是移动文件太慢，那就看看<code>AbstractFileObject</code>的<code>moveTo</code>方法</p>
<figure class="highlight java"><figcaption><span>AbstractFileObject.class</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(<span class="keyword">final</span> FileObject destFile)</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (canRenameTo(destFile)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!getParent().isWriteable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/rename-parent-read-only.error"</span>, getName(),getParent().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isWriteable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/rename-read-only.error"</span>, getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (destFile.exists() &amp;&amp; !isSameFile(destFile)) &#123;</span><br><span class="line">        destFile.deleteAll();</span><br><span class="line">        <span class="comment">// throw new FileSystemException("vfs.provider/rename-dest-exists.error", destFile.getName());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (canRenameTo(destFile)) &#123;</span><br><span class="line">        <span class="comment">// issue rename on same filesystem</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            attach();</span><br><span class="line">            <span class="comment">// remember type to avoid attach</span></span><br><span class="line">            <span class="keyword">final</span> FileType srcType = getType();</span><br><span class="line">            doRename(destFile); </span><br><span class="line">            FileObjectUtils.getAbstractFileObject(destFile).handleCreate(srcType);</span><br><span class="line">            destFile.close(); <span class="comment">// now the destFile is no longer imaginary. force reattach.</span></span><br><span class="line">            handleDelete(); <span class="comment">// fire delete-events. This file-object (src) is like deleted.</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> RuntimeException re) &#123;</span><br><span class="line">                <span class="keyword">throw</span> re;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception exc) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/rename.error"</span>, exc, getName(), destFile.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// different fs - do the copy/delete stuff</span></span><br><span class="line">            destFile.copyFrom(<span class="keyword">this</span>, Selectors.SELECT_SELF);</span><br><span class="line">            <span class="keyword">if</span> ((destFile.getType().hasContent()</span><br><span class="line">                    &amp;&amp; destFile.getFileSystem().hasCapability(Capability.SET_LAST_MODIFIED_FILE)</span><br><span class="line">                    || destFile.getType().hasChildren()</span><br><span class="line">                            &amp;&amp; destFile.getFileSystem().hasCapability(Capability.SET_LAST_MODIFIED_FOLDER))</span><br><span class="line">                    &amp;&amp; fs.hasCapability(Capability.GET_LAST_MODIFIED)) &#123;</span><br><span class="line">            destFile.getContent().setLastModifiedTime(<span class="keyword">this</span>.getContent().getLastModifiedTime());</span><br><span class="line">        &#125;</span><br><span class="line">        deleteSelf();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法也不复杂，移动文件有两种情况</p>
<ol>
<li>源文件和目标文件在同一个filesystem，使用<code>doRename</code></li>
<li>源文件和目标文件不在同一个filesystem，使用<code>copyFrom</code></li>
</ol>
<p>前面我们已经知道username，password，host，port相同的时候取到的就是同一个filesystem，所以这里判断源文件和目标文件是否在同一个filesystem也很简单，直接用==判断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRenameTo</span><span class="params">(<span class="keyword">final</span> FileObject newfile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs == newfile.getFileSystem();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>doRename</code>的实现原理就是调用<code>FTPClient的rename</code>方法，而这个<code>FTPClient</code>是通过<code>FTP协议</code>的<code>RNFR</code>和<code>RNTO</code>指令实现的。 <code>copyFrom</code>则是通过<code>FTP协议</code>中的<code>RETR</code>和<code>STOR</code>命令来下载上传实现的。</p>
<p>目前来看，文件移动都没什么问题，然而项目中导致移动文件慢的竟然是这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getType() != FileType.IMAGINARY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不管源文件与目标文件<code>是否在同一个文件系统</code>都会对源文件和目标文件执行这个<code>getType()</code>方法。这个方法最终会调用<code>FtpFileObject的doGetType()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> FileType <span class="title">doGetType</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// VFS-210</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getFileSystem()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            getInfo(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo == UNKNOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileType.IMAGINARY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileType.FOLDER;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo.isFile()) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileType.FILE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fileInfo.isSymbolicLink()) &#123;</span><br><span class="line">            <span class="keyword">final</span> FileObject linkDest = getLinkDestination();</span><br><span class="line">            <span class="comment">// VFS-437: We need to check if the symbolic link links back to the symbolic link itself</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isCircular(linkDest)) &#123;</span><br><span class="line">                <span class="comment">// If the symbolic link links back to itself, treat it as an imaginary file to prevent following</span></span><br><span class="line">                <span class="comment">// this link. If the user tries to access the link as a file or directory, the user will end up with</span></span><br><span class="line">                <span class="comment">// a FileSystemException warning that the file cannot be accessed. This is to prevent the infinite</span></span><br><span class="line">                <span class="comment">// call back to doGetType() to prevent the StackOverFlow</span></span><br><span class="line">                <span class="keyword">return</span> FileType.IMAGINARY;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> linkDest.getType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider.ftp/get-type.error"</span>, getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面已经说过，FtpFileObject的fileInfo没有初始化，所以这里会执行getInfo方法，而getInfo方法又会调用<code>getChildFile</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> FTPFile <span class="title">getChildFile</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="keyword">boolean</span> flush)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * If we should flush cached children, clear our children map unless we're in the middle of a refresh in which</span></span><br><span class="line"><span class="comment">    * case we've just recently refreshed our children. No need to do it again when our children are refresh()ed,</span></span><br><span class="line"><span class="comment">    * calling getChildFile() for themselves from within getInfo(). See getChildren().</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (flush &amp;&amp; !inRefresh) &#123;</span><br><span class="line">        children = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// List the children of this file</span></span><br><span class="line">    doGetChildren();</span><br><span class="line">    <span class="comment">// VFS-210</span></span><br><span class="line">    <span class="keyword">if</span> (children == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Look for the requested child</span></span><br><span class="line">    <span class="keyword">final</span> FTPFile ftpFile = children.get(name);</span><br><span class="line">    <span class="keyword">return</span> ftpFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是这里，我们可以看到，获取某个文件时，会先获取<code>父路径的所有子文件</code>，然后从子文件中获取你要的那个文件。 如果你要的那个文件在一个文件非常多的目录里，而且<code>关闭了缓存</code>，你每获取这个目录的一个文件就要把目录里的所有文件列一次。<br>FTPClient是可以通过listFiles列出单个文件的，所以解决办法就是</p>
<ol>
<li>使用缓存</li>
<li>不要用VFS了，直接用FTPClient的rename方法，直接起飞（仅限于同一个FTPClient，如果时跨文件服务器的需要FTPClient的上传下载实现）。<br>下面附上解决办法2的代码。<br>代码很简单，大多数都是解析URI的，全塞一个类里了，如果真要用建议把一些代码拆出来。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPFile;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.FileSystemException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.FileSystemOptions;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.UriParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.ftp.FtpClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.ftp.FtpFileSystemConfigBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.util.Cryptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.util.CryptorFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(FtpUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Auth, AtomicReference&lt;FTPClient&gt;&gt; clients = Maps.newConcurrentMap();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">move</span><span class="params">(String src, String tar)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FtpPath srcFtpPath = parse(src);</span><br><span class="line">        FtpPath tarFtpPath = parse(tar);</span><br><span class="line">        <span class="keyword">if</span> (!srcFtpPath.auth.equals(tarFtpPath.auth)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"源目录和目标目录的ftp服务器连接信息不一致"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FTPClient ftpClient = getFTPClient(srcFtpPath.auth);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ftpClient.rename(srcFtpPath.path, tarFtpPath.path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            closeConnection(ftpClient);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putFTPClient(srcFtpPath.auth, ftpClient);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FtpPath <span class="title">parse</span><span class="params">(String uri)</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">        FtpPath ftpPath = <span class="keyword">new</span> FtpPath();</span><br><span class="line">        StringBuilder name = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        UriParser.extractScheme(uri, name);</span><br><span class="line">        <span class="comment">// Expecting "//"</span></span><br><span class="line">        <span class="keyword">if</span> (name.length() &lt; <span class="number">2</span> || name.charAt(<span class="number">0</span>) != <span class="string">'/'</span> || name.charAt(<span class="number">1</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-double-slashes.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">        name.delete(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">     <span class="comment">// Extract userinfo, and split into username and password</span></span><br><span class="line">        <span class="keyword">final</span> String userInfo = extractUserInfo(name);</span><br><span class="line">        <span class="keyword">final</span> String userName;</span><br><span class="line">        <span class="keyword">final</span> String password;</span><br><span class="line">        <span class="keyword">if</span> (userInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> idx = userInfo.indexOf(<span class="string">':'</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx == -<span class="number">1</span>) &#123;</span><br><span class="line">                userName = userInfo;</span><br><span class="line">                password = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                userName = userInfo.substring(<span class="number">0</span>, idx);</span><br><span class="line">                password = userInfo.substring(idx + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userName = <span class="keyword">null</span>;</span><br><span class="line">            password = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String u = UriParser.decode(userName);</span><br><span class="line">        String p = UriParser.decode(password);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.startsWith(<span class="string">"&#123;"</span>) &amp;&amp; p.endsWith(<span class="string">"&#125;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> Cryptor cryptor = CryptorFactory.getCryptor();</span><br><span class="line">                p = cryptor.decrypt(p.substring(<span class="number">1</span>, p.length() - <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"Unable to decrypt password"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ftpPath.auth.username = u == <span class="keyword">null</span> ? <span class="keyword">null</span> : u.toCharArray();</span><br><span class="line">        ftpPath.auth.password = p == <span class="keyword">null</span> ? <span class="keyword">null</span> : p.toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Extract hostname, and normalise (lowercase)</span></span><br><span class="line">        <span class="keyword">final</span> String hostName = extractHostName(name);</span><br><span class="line">        <span class="keyword">if</span> (hostName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-hostname.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">        ftpPath.auth.host = hostName.toLowerCase();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Extract port</span></span><br><span class="line">        ftpPath.auth.port = extractPort(name, uri);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Expecting '/' or empty name</span></span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt; <span class="number">0</span> &amp;&amp; name.charAt(<span class="number">0</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-hostname-path-sep.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ftpPath.path = name.toString();</span><br><span class="line">        <span class="keyword">return</span> ftpPath;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extracts the user info from a URI.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name string buffer with the "scheme://" part has been removed already. Will be modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the user information up to the '@' or null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">extractUserInfo</span><span class="params">(<span class="keyword">final</span> StringBuilder name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxlen = name.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; pos &lt; maxlen; pos++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">char</span> ch = name.charAt(pos);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'@'</span>) &#123;</span><br><span class="line">                <span class="comment">// Found the end of the user info</span></span><br><span class="line">                <span class="keyword">final</span> String userInfo = name.substring(<span class="number">0</span>, pos);</span><br><span class="line">                name.delete(<span class="number">0</span>, pos + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> userInfo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'/'</span> || ch == <span class="string">'?'</span>) &#123;</span><br><span class="line">                <span class="comment">// Not allowed in user info</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Not found</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extracts the hostname from a URI.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name string buffer with the "scheme://[userinfo@]" part has been removed already. Will be modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the host name or null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">extractHostName</span><span class="params">(<span class="keyword">final</span> StringBuilder name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxlen = name.length();</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; pos &lt; maxlen; pos++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">char</span> ch = name.charAt(pos);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'/'</span> || ch == <span class="string">';'</span> || ch == <span class="string">'?'</span> || ch == <span class="string">':'</span> || ch == <span class="string">'@'</span> || ch == <span class="string">'&amp;'</span> || ch == <span class="string">'='</span> || ch == <span class="string">'+'</span></span><br><span class="line">                    || ch == <span class="string">'$'</span> || ch == <span class="string">','</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> String hostname = name.substring(<span class="number">0</span>, pos);</span><br><span class="line">        name.delete(<span class="number">0</span>, pos);</span><br><span class="line">        <span class="keyword">return</span> hostname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extracts the port from a URI.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name string buffer with the "scheme://[userinfo@]hostname" part has been removed already. Will be</span></span><br><span class="line"><span class="comment">     *            modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri full URI for error reporting.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The port, or -1 if the URI does not contain a port.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileSystemException if URI is malformed.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NumberFormatException if port number cannot be parsed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">extractPort</span><span class="params">(<span class="keyword">final</span> StringBuilder name, <span class="keyword">final</span> String uri)</span> <span class="keyword">throws</span> FileSystemException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &lt; <span class="number">1</span> || name.charAt(<span class="number">0</span>) != <span class="string">':'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxlen = name.length();</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; pos &lt; maxlen; pos++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">char</span> ch = name.charAt(pos);</span><br><span class="line">            <span class="keyword">if</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> String port = name.substring(<span class="number">1</span>, pos);</span><br><span class="line">        name.delete(<span class="number">0</span>, pos);</span><br><span class="line">        <span class="keyword">if</span> (port.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(<span class="string">"vfs.provider/missing-port.error"</span>, uri);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(port);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> FTPClient <span class="title">getFTPClient</span><span class="params">(Auth key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AtomicReference&lt;FTPClient&gt; refClient = clients.getOrDefault(key, <span class="keyword">new</span> AtomicReference&lt;FTPClient&gt;(<span class="keyword">null</span>));</span><br><span class="line">        </span><br><span class="line">        FTPClient client = refClient.getAndSet(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span> || !client.isConnected()) &#123;</span><br><span class="line">            client = createClient(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> FTPClient <span class="title">createClient</span><span class="params">(Auth key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FtpFileSystemConfigBuilder builder = FtpFileSystemConfigBuilder.getInstance();</span><br><span class="line">        FileSystemOptions options = <span class="keyword">new</span> FileSystemOptions();</span><br><span class="line">        builder.setControlEncoding(options, <span class="string">"UTF-8"</span>);</span><br><span class="line">        builder.setServerLanguageCode(options, <span class="string">"zh"</span>);</span><br><span class="line">        builder.setPassiveMode(options, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> FtpClientFactory.createConnection(key.host, key.port, key.username, key.password, <span class="keyword">null</span>, options);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putFTPClient</span><span class="params">(Auth key, FTPClient client)</span> </span>&#123;</span><br><span class="line">        AtomicReference&lt;FTPClient&gt; refClient = clients.getOrDefault(key, <span class="keyword">new</span> AtomicReference&lt;FTPClient&gt;(<span class="keyword">null</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!refClient.compareAndSet(<span class="keyword">null</span>, client)) &#123;</span><br><span class="line">            closeConnection(client);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">(FTPClient client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (client.isConnected()) &#123;</span><br><span class="line">                client.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Auth</span> </span>&#123;</span><br><span class="line">        String host;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">char</span>[] username;</span><br><span class="line">        <span class="keyword">char</span>[] password;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Auth) &#123;</span><br><span class="line">                Auth k = (Auth) obj;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.host.equals(k.host) &amp;&amp; <span class="keyword">this</span>.port == k.port &amp;&amp; Arrays.equals(<span class="keyword">this</span>.username, k.username)</span><br><span class="line">                        &amp;&amp; Arrays.equals(<span class="keyword">this</span>.password, k.password);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> h = host.hashCode();</span><br><span class="line">            h = <span class="number">31</span> * h + port;</span><br><span class="line">            h = <span class="number">31</span> * h + username.hashCode();</span><br><span class="line">            h = <span class="number">31</span> * h + password.hashCode();</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpPath</span> </span>&#123;</span><br><span class="line">        Auth auth = <span class="keyword">new</span> Auth();</span><br><span class="line">        String path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>FTP</tag>
        <tag>Apache VFS</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么修改SVN后Spring Cloud Config失效了？</title>
    <url>/2019/09/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BF%AE%E6%94%B9SVN%E5%90%8ESpring%20Cloud%20Config%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/</url>
    <content><![CDATA[<p><code>spring.cloud.config.server.svn.uri</code>修改成<code>新的SVN地址</code>之后，访问配置中心获得的配置还是<code>修改前SVN</code>的。</p>
<p>在我百思不得其姐的时候，我看到了配置中<code>spring.cloud.config.server.svn.basedir</code>指定了一个服务器上的目录。</p>
<p>于是，我上服务器看了看<code>spring.cloud.config.server.svn.basedir</code>指定的目录有什么。</p>
<p>果然跟我猜测的一样，这个目录其实就是SVN上Check out下来的文件。平时我们在自己电脑上换SVN的时候都会<code>relocate</code>一下，但是Spring Cloud Config没有<code>relocate</code>。</p>
<p>所以，解决办法就是：</p>
<ol>
<li>手动<code>relocate</code> <code>spring.cloud.config.server.svn.basedir</code>指定的目录。</li>
<li>直接删除<code>spring.cloud.config.server.svn.basedir</code>指定的目录。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot注解之@ConditionalOnProperty</title>
    <url>/2019/09/04/Spring%20Boot%E6%B3%A8%E8%A7%A3%E4%B9%8B@ConditionalOnProperty/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>,</span><br><span class="line">				matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>当配置文件中<strong>没有</strong><code>spring.mvc.favicon.enabled</code>时，由于<code>matchIfMissing = true</code><strong>，属于条件</strong>匹配**。</p>
</li>
<li><p>当配置文件中<strong>有</strong><code>spring.mvc.favicon.enabled</code>时，此时配合<code>havingValue</code>，如下表。<code>havingValue</code>默认为<code>“”</code>，<code>spring.mvc.favicon.enabled=true</code>时属于条件<strong>匹配</strong>(yes)， <code>spring.mvc.favicon.enabled=false</code>时属于条件<strong>不匹配</strong>(no)</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Property Value</th>
<th>havingValue=””</th>
<th>havingValue=”true”</th>
<th>havingValue=”false”</th>
<th>havingValue=”foo”</th>
</tr>
</thead>
<tbody><tr>
<td>“true”</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td>“false”</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>“foo”</td>
<td>yes</td>
<td>no</td>
<td>no</td>
<td>yes</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
</search>
