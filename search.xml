<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建个人博客</title>
    <url>/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这不完全是一篇搭建个人博客的教程，因为<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>的文档其实写得非常清楚了。但是，我们按照教程来不一定很顺利。所以，这主要还是一个小白的经验之谈。</p>
<a id="more"></a>


<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="我为什么选择Hexo呢？"><a href="#我为什么选择Hexo呢？" class="headerlink" title="我为什么选择Hexo呢？"></a>我为什么选择Hexo呢？</h3><ol>
<li>网上很多人推荐使用Hexo</li>
<li>我本来也打算用Jekyll，但是由于网络原因Ruby的开发环境的安装包我下载不下来。</li>
</ol>
<p>什么？还有其他的比Hexo好用，为什么不用？别问，问就是Hexo是最好用的。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> </li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li>
</ul>
<p>这两我都是用得很少，一般都是现学现用。安装也不难，这就不多说了。</p>
<h5 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h5><p>由于最终我们的是将网站部署到<span class="label default">GitHub Pages</span>，所以这里需要配置Git，将Git和GitHub关联上，以便之后将文件push到GitHub。</p>
<ol>
<li><p>鼠标右击，选择<span class="label default">Git Bash Here</span>打开Git命令行。</p>
</li>
<li><p>配置<span class="label default">user.name</span>和<span class="label default">user.email</span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;你的GitHub用户名&#39;</span><br><span class="line">git config --global user.email &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成SSH密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;你的GitHub注册邮箱&#39;</span><br></pre></td></tr></table></figure>

<p>然后直接连续回车就OK，默认不需要设置密码</p>
</li>
<li><p>复制公钥</p>
<p>打开.ssh文件夹中的id_rsa.pub文件(用文本编辑器打开就好了)，复制里面的内容。（我的在这个目录下：C:\Users\Admin\.ssh）</p>
</li>
<li><p>到<a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener">GitHub设置SSH keys</a></p>
<p>Title的内容随意，Key里面粘贴<span class="label default">第4步</span>中复制的内容，然后点击<a class="btn" href="#">Add SSH Key</a></p>
</li>
<li><p>检查</p>
<p>打开Git Bash，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh git@github.com</span><br></pre></td></tr></table></figure>

<p>显示<span class="label default">You've successfully authenticated</span>这样的话，就是成功了。</p>
</li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>打开一个新的命令行窗口输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ Hexo</span><br></pre></td></tr></table></figure>

<p>能显示出一些帮助信息就说明装成功了</p>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="初始化网站"><a href="#初始化网站" class="headerlink" title="初始化网站"></a>初始化网站</h4><p>找一个你想放网站文件的地方，然后执行下列命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p><a name='folder'>&lt;folder&gt;</a>换成你想要的文件夹名字。完成后，能看到指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>到目前为止，网站就建好了。但是我们要在本地看效果还需要将网站部署到本地服务器。</p>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ol>
<li><p>安装hexo-server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>这里一定要切换到网站文件夹下启动。</p>
          </div>

<p>最终看到输出<span class="label default">Hexo is running at http://localhost:4000</span>就是启动好了。</p>
</li>
<li><p>打开浏览器输入<span class="label default">Hexo is running at http://localhost:4000</span>就能看到Hexo默认主题<span class="label default">landscape</span>的页面</p>
<img data-src="/2020/01/17/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_landscape.png" class="" title="landscape主题图片">



</li>
</ol>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>我们现在已经在本地部署过搭建的网站了。为了让其他人也能看到，我们要个人网站部署到GitHub Pages。</p>
<p>这个教程在<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>也是有的，有<span class="label default">两种</span>方式。我比较推荐第一种，就是使用<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 。</p>
<div class="note info">
            <p><strong>为什么选第一种?</strong></p><p>主要还是我按第二种，GitHub上只存了Hexo生成的页面，但是我想源文件也想存下来，当然我们也可以将源文件也上传到GitHub，达到跟第一种类似的效果。但是，持续集成服务，免费的，它不香吗？</p>
          </div>



<p>如果你按官方教程后最终发现这个：</p>
<blockquote>
<p>User pages must be built from the <code>master</code> branch.</p>
</blockquote>
<p>那么下面的内容就有用了。因为<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo</a>的教程是将Hexo的文件放<span class="label default">master</span>，然后生成的html放<span class="label default">gh-pages</span>的，以前可能是没问题，但是现在GitHub规定你必须将页面放到<span class="label default">master</span>。</p>
<ol>
<li><p>GitHub新建一个 repository。命名为<span class="label default"><你的 GitHub 用户名>.github.io</span>。选择<span class="label default">Public</span>，勾上<span class="label default">Initialize this repository with a README</span>。</p>
</li>
<li><p>然后选择一个地方新建一个空的文件夹。进入文件夹，右键鼠标，选择<span class="label default">Git Bash Here</span>打开Git命令行。将刚才建的repository clone下来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后新建一个分支用来存放Hexo生成前的文件。（我的分支名就blog）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>

<p>然后切换到分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;分支名字&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将之前建站的文件夹<a href='#folder'>&lt;folder&gt;</a>下的所有文件及文件夹复制到第2步种新建的文件夹下面。</p>
</li>
<li><p>将第3步种的文件提交到分支，填写注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;&lt;注释&gt;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件push到GitHub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:&lt;你的GitHub用户名&gt;&#x2F;&lt;你的GitHub用户名&gt;.github.io.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>上传成功后就能在GitHub上之前建的repository的分支看到了。</p>
</li>
<li><p>将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 GitHub 账户中。</p>
</li>
<li><p>前往 GitHub 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</p>
</li>
<li><p>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/" target="_blank" rel="noopener">手动前往</a>。</p>
</li>
<li><p>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</p>
</li>
<li><p>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</p>
</li>
<li><p>在你的 Hexo 站点文件夹(现在这个站点文件夹为应该为<span class="label default"><你的 GitHub 用户名>.github.io</span>)中新建一个 <code>.travis.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog # build blog branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  target_branch: master</span><br><span class="line">  on:</span><br><span class="line">    branch: blog</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>这里的内容和Hexo官网的有点区别。这里指定了build的为&lt;分支名字&gt;（<span class="label default">我的是blog</span>），目标是master</p>
          </div>
</li>
<li><p>将 <code>.travis.yml</code> 推送（推送方法和之前的文件推送到GitHub类型）到 repository 分支中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>master</code> 分支下。</p>
</li>
<li><p>推送之后等一会,<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 上就能看到build信息。等<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> build完之后。就能在 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点了。可能需要等一会儿。发布成功的话，你应该可以在repository的setting的<span class="label default">GitHub Pages</span> 下看到<span class="label success">Your site is published at https://<你的 GitHub 用户名>.github.io</span>。</p>
</li>
</ol>
<h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>到此，我们已经将网站发布到GitHub Pages了。但是默认的<code>landscape</code>，真的不符合我的审美。我们可以取<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a>网站挑选，也可以去GitHub上搜索<code>hexo-theme</code>。我就是去GitHub上挑选的star比较高的<a href="hexo-theme">Next主题</a>，所以我就以<code>Next</code>主题为例。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><div class="tabs" id="hexo-主题"><ul class="nav-tabs"><li class="tab active"><a href="#hexo-主题-1">安装-></a></li><li class="tab"><a href="#hexo-主题-2">Hexo 配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="hexo-主题-1"><p>切换到站点文件夹，按我上的的教程此时应该是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &lt;你的 GitHub 用户名&gt;.github.io</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="hexo-主题-2"><figure class="highlight plain"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一开始Next主题的很多配置都是关闭的，所以我们可以通过查看<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">文档</a>,然后修改主题的<code>_config.yml</code>来开启和配置一些功能。下面只讲我遇到过问题的。</p>
<h4 id="Post-Wordcount"><a href="#Post-Wordcount" class="headerlink" title="Post Wordcount"></a>Post Wordcount</h4><p>这是一个统计文字的功能，但是我安装步骤弄好之后。页面显示的字数和阅读时间都没正确显示出来。我看GitHub上关于没有正确显示字数的issue都是因为Next升级到<code>6.x</code>之后，将统计的插件从<a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener"><code>hexo-wordcount</code></a>换到了<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener"><code>hexo-symbols-count-time</code></a>。而我的都是最新的，最终我在Hexo上找到了解决办法。</p>
<blockquote>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
</blockquote>
<p>这个命令就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>我运行完这个之后就正确显示了。</p>
<h4 id="Comment-Systems"><a href="#Comment-Systems" class="headerlink" title="Comment Systems"></a>Comment Systems</h4><p>评论系统我选的Gitalk。嗯，我比较喜欢GitHub那一套。</p>
<p>具体过程，按照过程来就行。</p>
<p>需要注意的就是这个配置</p>
<figure class="highlight plain"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">gitalk:  </span><br><span class="line"></span><br><span class="line">​	repo: # Repository name to store issues</span><br></pre></td></tr></table></figure>

<p>这里填的是 Repository的名字，不是SSH URL。这个填错了页面上会显示<code>Error</code>。</p>
<p>另外，评论系统你得发布到GitHub才能正常使用。</p>
<div class="note info">
            <p><strong>推送主题修改到GitHub</strong></p><p>因为我们是将Next主题直接clone到我们自己的Repository下。所以，我们推送的文件中，有个.git的文件夹。嵌套仓库可能会出问题。注意命令行的提示信息，会有类似让你执行下面这条命令的提示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached themes&#x2F;next</span><br></pre></td></tr></table></figure><p>这条真的有用，执行完就可以提交了。如果不行，你就多试几次，亲测有效。</p>
          </div>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="标签和分类"><a href="#标签和分类" class="headerlink" title="标签和分类"></a>标签和分类</h4><p>这个我们在Next的<a href="https://theme-next.org/docs/theme-settings/custom-pages" target="_blank" rel="noopener">文档</a>中就能弄好了。</p>
<h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>在站点文件夹下执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>这条指令其实就是在source/_posts文件夹下建了名为&lt;title&gt;.md的文件。</p>
<p>用一个markdown的编辑器打开这个文件就可以开始写文章了。</p>
<p>文章的头部一段内容可以包含标签，分类。本篇文章就是这就这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo搭建个人博客</span><br><span class="line">date: 2020-01-17 16:56:05</span><br><span class="line">categories:</span><br><span class="line"> - Blog</span><br><span class="line">tags: </span><br><span class="line"> - Hexo</span><br><span class="line"> - Github</span><br><span class="line"> - Blog</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>



<p>默认的情况下，文章是全部展开的，我们可以在文章的任何地方添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>控制哪些内容需要点击<a class="btn" href="#">阅读全文>></a>查看。</p>
<p>还有一些标签的使用可以查看Next<a href="https://theme-next.org/docs/tag-plugins/" target="_blank" rel="noopener">文档</a>和Hexo<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">文档</a>。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Java + Appium + 夜神模拟器实现学习强国积分任务自动化</title>
    <url>/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<p>首先，先放源码<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>。</p>
<p>我想装了《学习强国》App的同学都为每天30积分的任务苦恼过。我之前也是因为这30积分非常头疼，不是《学习强国》App不好，而是真的不适合我。我们会学习，但可能不是被迫学习指定内容，为了指标而学习。</p>
<p>GitHub上面有很多Python写的《学习强国》自动化学习项目。我也有在用，但是我想有一个Java编写的，自己改起来顺手的《学习强国》自动学习。</p>
<p>为此，我就写了一个Java的，目前已经实现刷30分。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK8</a></p>
</li>
<li><p><a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">Android SDK 24.4.1</a></p>
</li>
<li><p><a href="http://appium.io/" target="_blank" rel="noopener">Appium 1.15.1</a></p>
</li>
<li><p><a href="https://www.yeshen.com/" target="_blank" rel="noopener">夜神模拟器 6.5.0.3</a>，当然里面还需要安装《学习强国》</p>
</li>
<li><p><a href="https://spring.io/tools" target="_blank" rel="noopener">Sping Tool Suite</a></p>
</li>
<li><p><a href="https://projectlombok.org/setup/eclipse" target="_blank" rel="noopener">Lombok</a></p>
<p>（1、5、6我电脑上本来就已经装了，所以我就只用装2、3、4就行了</p>
<p>安装基本都比较顺利，网上教程也挺多。）</p>
</li>
</ol>
<div class="note info">
            <p>上面的环境准备好之后，启动<code>夜神模拟器</code>后，命令行执行下列命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>如果<code>List of devices attached</code>没有显示内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">127.0.0.1:62002 device</span><br></pre></td></tr></table></figure><p>那么，需要使用SDK下<code>platform-tools</code>文件夹的<strong>adb.exe</strong>覆盖掉夜神模拟器安装目录下<code>bin</code>目录中的<strong>adb.exe</strong>和<strong>nox_adb.exe</strong></p><p>如果做了上面的操作还是不行，试试以下指令。还是不行的话，看看adb的<a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn" target="_blank" rel="noopener">用户指南</a>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect device_ip_address</span><br></pre></td></tr></table></figure><p>我这里夜神模拟器的<code>device_ip_address</code>是<code>127.0.0.1:62001</code></p>
          </div>

<h2 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h2><p><a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>的核心就是<code>Appium</code>了。</p>
<p>Appium是客户端/服务器架构。我们下载的<a href="http://appium.io/" target="_blank" rel="noopener">Appium Desktop</a>就是服务器。而<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>做的就是使用Appium的Java客户端库定义一些操作来完成我的目标。</p>
<p>我没有去了解太多关于Appium的知识。感兴趣的可以去官方文档查看<a href="https://appium.io/docs/en/about-appium/intro/" target="_blank" rel="noopener">详细介绍</a>。</p>
<h3 id="Appium-Desktop"><a href="#Appium-Desktop" class="headerlink" title="Appium Desktop"></a>Appium Desktop</h3><p>打开Appium Desktop之后，显示如下界面，我将Host设置为<code>localhost</code>了</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_start.png" class="">

<p>在<a class="btn" href="#">Start Server</a> 之前我们需要，先点击下面的按钮配置JDK和Android SDK 的路径</p>
<p>然后启动，显示如下界面</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_cmd.png" class="">

<p>点击放大镜。得到如下界面</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_conf.png" class="">

<p>然后填入如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;platformName&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;5.1.1&quot;,</span><br><span class="line">  &quot;appPackage&quot;: &quot;cn.xuexi.android&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.alibaba.android.rimet.biz.SplashActivity&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;127.0.0.1:62001&quot;,</span><br><span class="line">  &quot;noReset&quot;: true,</span><br><span class="line">  &quot;newCommandTimeout&quot;: 600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击<a class="btn" href="#">Start Session</a>，就能得到如下界面。（在这之前得保证<code>adb devices</code>能看到你的设备，我这里是夜神模拟器）</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/Appium_op.png" class="">

<p>这时候我们应该能看到<code>夜神模拟器</code>中的《学习强国》App也已经打开了。此时<code>Appium</code>和<code>夜神模拟器</code>看到的页面是同步的。以上界面对页面元素的操作按钮的所有操作都会反馈到夜神模拟器上的《学习强国》App。同样，在夜神模拟器上的操作也会反馈到上面的页面，点击<code>刷新</code>按钮就能刷新页面。</p>
<p>到此为止就准备好了，可以开发了。</p>
<h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>用 <a href="https://spring.io/tools" target="_blank" rel="noopener">Sping Tool Suite</a>建一个Spring Boot工程</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​	&lt;dependency&gt;</span><br><span class="line">  			&lt;groupId&gt;io.appium&lt;&#x2F;groupId&gt;</span><br><span class="line">  			&lt;artifactId&gt;java-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">  			&lt;version&gt;7.3.0&lt;&#x2F;version&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">​			&lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">​			&lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;com.h2database&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;h2&lt;&#x2F;artifactId&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">​		&lt;&#x2F;dependency&gt;</span><br><span class="line">​		&lt;dependency&gt;</span><br><span class="line">​			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">​			&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">​	&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要还是Appium客户端的依赖，其他的都是为了方便完成学习强国的积分任务功能而添加的</p>
<p>上面这些完成了就可以开始写代码了。当然你可以直接clone这个<a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>。</p>
<h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><p>下面我以《学习强国》里的<code>登录</code>和<code>阅读文章</code>为例，讲述怎么使用Appium的Java客户端库。</p>
<p>因为几乎所有的操作都是从<code>AndroidDriver</code>开始的，所以我们需要构建<code>AndroidDriver</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;platformName&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;5.1.1&quot;,</span><br><span class="line">  &quot;appPackage&quot;: &quot;cn.xuexi.android&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.alibaba.android.rimet.biz.SplashActivity&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;127.0.0.1:62001&quot;,</span><br><span class="line">  &quot;noReset&quot;: true,</span><br><span class="line">  &quot;newCommandTimeout&quot;: 600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/l-qiang/LitterBaby" target="_blank" rel="noopener">LitterBaby</a>中的代码如下：</p>
<figure class="highlight java"><figcaption><span>AppiumConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> AndroidDriver&lt;AndroidElement&gt; <span class="title">androidDriver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">	capabilities.setPlatform(Platform.ANDROID);</span><br><span class="line">	capabilities.setVersion(version); <span class="comment">// 安卓版本</span></span><br><span class="line">	capabilities.setCapability(AndroidMobileCapabilityType.APP_PACKAGE, appPackage);</span><br><span class="line">	capabilities.setCapability(AndroidMobileCapabilityType.APP_ACTIVITY, appActivity);</span><br><span class="line">	capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, deviceName); <span class="comment">// adb devices 查看</span></span><br><span class="line">	capabilities.setCapability(<span class="string">"noReset"</span>, noReset); </span><br><span class="line">	capabilities.setCapability(<span class="string">"newCommandTimeout"</span>, newCommandTimeout); </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> AndroidDriver&lt;AndroidElement&gt;(<span class="keyword">new</span> URL(appiumServer), capabilities);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p><code>手机号</code>和<code>密码</code>登录就非常简单了。</p>
<ol>
<li><p>找到<code>手机号输入框</code>。我们在Appium Desktop上用选择元素的按钮选中<code>手机号输入框</code>。</p>
<img data-src="/2020/01/15/Java+Appium+%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD%E7%A7%AF%E5%88%86%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/login_phone_input.png" class="">

<p>我们可以在右侧的<code>Selected Element</code>下看到<code>手机号输入框</code>的<code>XPath</code>，<code>Text</code>, <code>resource-id</code>等信息。</p>
</li>
<li><p>使用<code>AndroidDriver</code>的<code>findElementByXPath</code>方法。(所有的元素我都用的XPath查找，我们可以在网上搜索XPath的教程来学习XPath，这个并不复杂)</p>
<p>这里我使用以下XPath查找，意思就是查找所有元素中<code>resource-id</code>为<code>cn.xuexi.android:id/et_phone_input</code>的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;et_phone_input&#39;]</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>所有的XPath都可以在Appium Desktop的搜索中按XPath搜索尝试能不能搜到元素。</p>
          </div>
</li>
<li><p>然后调用第2步中<code>findElementByXPath</code>返回的<code>AndroidElement</code>对象的<code>sendKeys</code>方法，并传入手机号作为参数。</p>
</li>
<li><p>同样的操作找到<code>密码输入框</code>，并输入密码。找到<code>登录</code>按钮，然后调用<code>click()</code>方法点击</p>
</li>
</ol>
<p>到此为止，登录就实现了。</p>
<h4 id="阅读文章"><a href="#阅读文章" class="headerlink" title="阅读文章"></a>阅读文章</h4><p>阅读文章不外乎是这些操作</p>
<ol>
<li>找文章</li>
<li>进入文章</li>
<li>上下滑动阅读文章</li>
<li>等待阅读到达指定时间</li>
<li>返回</li>
</ol>
<p>这5步中比较特别的就是<code>上下滑动</code>和<code>返回</code>了，其他的就跟<code>登录</code>差不多，都是先<code>findElementByXPath</code>找到元素然后调用<code>click()</code>方法。</p>
<h5 id="那么滑动怎么做呢"><a href="#那么滑动怎么做呢" class="headerlink" title="那么滑动怎么做呢?"></a>那么滑动怎么做呢?</h5><ol>
<li>我们需要创建一个新的对象<code>AndroidTouchAction</code></li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line">androidTouchAction = <span class="keyword">new</span> AndroidTouchAction(androidDriver);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取设备的<code>宽</code>和<code>高</code></li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line">val size = androidDriver.manage().window().getSize();</span><br><span class="line">height = size.height;</span><br><span class="line">width = size.width;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后相继调用<code>AndroidTouchAction</code>的<code>press</code>，<code>moveTo</code>，<code>release</code>，<code>perform</code>方法</li>
</ol>
<figure class="highlight java"><figcaption><span>DriverService.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		androidTouchAction.press(PointOption.point(width / <span class="number">2</span>, height / <span class="number">2</span> + <span class="number">200</span>))</span><br><span class="line">						  .waitAction()</span><br><span class="line">						  .moveTo(PointOption.point(width / <span class="number">2</span>, height / <span class="number">2</span> - <span class="number">400</span>))</span><br><span class="line">						  .release()</span><br><span class="line">						  .perform();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="返回操作"><a href="#返回操作" class="headerlink" title="返回操作"></a>返回操作</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">androidDriver.navigate().back();</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p><strong>常见问题</strong></p><ol><li><p>XPath对了但是找不到元素</p><p>这种情况基本就是元素还没加载。我们可以用WebDriverWait对象等待</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wait &#x3D; new WebDriverWait(androidDriver,30);</span><br><span class="line">wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(xpath)));</span><br></pre></td></tr></table></figure></li><li><p>滑动的时候报不能在指定元素上执行touch操作</p><p>解决办法也是跟上面类似，都是需要等待元素加载完成。</p></li></ol>
          </div>

<div class="note info">
            <p><strong>XPath的常用写法</strong></p><ul><li><p>指定属性为&lt;xxx&gt;的元素，例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@text&#x3D;&#39;&lt;xxxx&gt;&#39;]</span><br><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;&lt;xxx&gt;&#39;]</span><br></pre></td></tr></table></figure></li><li><p>指定某个元素的父元素，例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;general_card_title_id&#39;]&#x2F;parent::*</span><br></pre></td></tr></table></figure><p><code>resource-id</code>为<code>cn.xuexi.android:id/general_card_title_id</code>的元素的父元素</p></li><li><p>指定元素之后的同级元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;android.widget.ImageView&#x2F;following-sibling::android.widget.TextView[ends-with(@text, &quot;学习平台&quot;)]</span><br></pre></td></tr></table></figure><p><code>android.widget.ImageView</code>元素之后的同级元素为<code>android.widget.TextView</code>的text内容以<code>学习平台</code>结尾的元素</p></li><li><p>指定元素之前的同级元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@resource-id&#x3D;&#39;cn.xuexi.android:id&#x2F;action_bar_root&#39;]&#x2F;&#x2F;android.widget.TextView[@text&#x3D;&#39;分享到学习强国&#39;]&#x2F;preceding-sibling::*</span><br></pre></td></tr></table></figure></li><li><p>倒数第二个元素</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;android.widget.TextView[@text&#x3D;&#39;欢迎发表你的观点&#39;]&#x2F;following-sibling::*[last()-1]</span><br></pre></td></tr></table></figure><p><code>android.widget.TextView</code>的text内容为<code>欢迎发表你的观点</code>的元素之后的同级元素中的倒数第二个元素</p><p><a href="https://github.com/l-qiang/LitterBaby/blob/master/src/main/resources/application.properties" target="_blank" rel="noopener">更多用法示例</a></p></li></ul>
          </div>








]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Appium</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>iText合并PDF和添加书签</title>
    <url>/2020/01/10/iText%E5%90%88%E5%B9%B6PDF%E5%92%8C%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/</url>
    <content><![CDATA[<p>关于这个问题，其实在iText官网和Stack Overflow上面都有答案。之所以还要记录是想有更多人看到简单易懂的解决办法。因为我不想再有人直接CSDN搜一个，不管是否要新引入Jar包也不管代码是否复杂，然后告诉我参考那个写。</p>
<p><a href="https://itextpdf.com/en/resources/examples/itext-5-legacy/merging-documents-bookmarks#39-mergewithoutlines.java" target="_blank" rel="noopener">官网例子</a></p>
<a id="more"></a>

<p>下面是一个示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(List&lt;String&gt; srcFiles, String desFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Document document = <span class="keyword">new</span> Document();</span><br><span class="line">        PdfCopy copy = <span class="keyword">new</span> PdfCopy(document, <span class="keyword">new</span> FileOutputStream(desFile));</span><br><span class="line">        document.open();</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line">        List&lt;HashMap&lt;String, Object&gt;&gt; outlines = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String scrFile : srcFiles) &#123;</span><br><span class="line">            PdfReader reader = <span class="keyword">new</span> PdfReader(scrFile);</span><br><span class="line">            copy.addDocument(reader);</span><br><span class="line">            <span class="comment">// add outline element</span></span><br><span class="line">            HashMap&lt;String, Object&gt; outline = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            outline.put(<span class="string">"Title"</span>, FilenameUtils.getBaseName(scrFile)); <span class="comment">// 书签的名字</span></span><br><span class="line">            outline.put(<span class="string">"Action"</span>, <span class="string">"GoTo"</span>);</span><br><span class="line">            outline.put(<span class="string">"Page"</span>, String.format(<span class="string">"%d Fit"</span>, page));</span><br><span class="line">            outlines.add(outline);</span><br><span class="line">            <span class="comment">// update page count</span></span><br><span class="line">            page += reader.getNumberOfPages();</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line">        copy.setOutlines(outlines);</span><br><span class="line">        document.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PDF</tag>
        <tag>iText</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson将无嵌套JSON转嵌套对象</title>
    <url>/2019/12/19/Jackson%E5%B0%86%E6%97%A0%E5%B5%8C%E5%A5%97JSON%E8%BD%AC%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>例如，我有以下JSON</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;age: 18, lastname: &quot;Liu&quot;, firstname: &quot;Ryan&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>我需要将这个JSON装成Person对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private Name name;</span><br><span class="line">&#125;</span><br><span class="line">class Name &#123;</span><br><span class="line">    private String lastname;</span><br><span class="line">    private String firstname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要使用Jackson的注解<code>@JsonUnwrapped</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    @JsonUnwrapped</span><br><span class="line">    private Name name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jackson</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我的Spring Boot项目不能访问静态资源？</title>
    <url>/2019/12/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84Spring-Boot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%EF%BC%9F/</url>
    <content><![CDATA[<p>问题源于一个客户这边自己封装的框架。</p>
<p>一直以来，我都对这种框架无感，因为它一般是由开源项目改编的，而且不一定是改得更好了。封装越多用起来越笨重。</p>
<a id="more"></a>

<p>由于缺少文档的原因，查原因就稍微曲折了一点。</p>
<ul>
<li><p>首先我从出错信息开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401 认证失败</span><br></pre></td></tr></table></figure>

<p>这就有意思了，我访问一个静态资源，而且我按照所谓的文档已经关闭权限认证了。最头疼的是，这个错误信息在这个框架的自定义的错误码里面根本没有。然后我顺着代码看了个遍，终于找到了这个错误信息。他不是用的自定义的错误码，而是直接写死的，我服了…</p>
</li>
<li><p>然后debug找到原本的错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No handler mapping for xxx</span><br></pre></td></tr></table></figure>

<p>醉了，这错误多明显，为啥要改成<code>401 认证失败</code>返回呢。</p>
<p>错误虽然明显，但是确实超过了我的经验范围，静态资源需要啥Handler呢，还是我太年轻了。不过踩一次坑涨一波经验也不亏。</p>
</li>
<li><p>最终，我在配置文件中发现了这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring</span><br><span class="line">    resources:</span><br><span class="line">        add-mappings: false</span><br></pre></td></tr></table></figure>

<p>这不是坑爹吗，这么多配置项中掺了一个这个，还没有任何说明。</p>
</li>
</ul>
<p>所以原因就是因为<code>spring.resource.add-mappings</code>这个被设置成false，导致<code>WebMvcConfigurer</code>的<code>addResourceHandlers</code>方法直接返回了，所以没有Handler处理静态资源。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
</search>
